<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深入浅出react hooks</title>
      <link href="/2020/03/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAreact-hooks/"/>
      <url>/2020/03/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAreact-hooks/</url>
      
        <content type="html"><![CDATA[<h1 id="1-react-hook"><a href="#1-react-hook" class="headerlink" title="1.react hook"></a>1.react hook</h1><blockquote><p>React 16.7.0开始推行Hook，到 React 16.8.0 Hook 稳定，Hooks开始被推广使用，它解决了传统使用生命周期而导致的相关代码逻辑分离(例如创建订阅及取消订阅)、不相关代码逻辑混合在一个生命周期中(使用多个Effect)、class中复杂的this指向、class不能被很好的压缩、class可能导致热重载不稳定</p></blockquote><blockquote><p>Hook为开发者提供了可以使用function创建微state，且一个state由一个对应的函数管理，还提供了专门处理副作用、实现redux、性能优化等功能，并且100%向后兼容，个人认为Hook是react未来发展的趋势，但并不意味着摒弃class，react也没有移除class的计划。</p></blockquote><h2 id="1-1-State-Hook"><a href="#1-1-State-Hook" class="headerlink" title="1.1 State Hook"></a>1.1 State Hook</h2><p><code>useState</code> 就是一个 <em>Hook</em> ，通过在函数组件里调用它来给组件添加一些内部 state。React 会在重复渲染时保留这个 state。</p><p><code>useState</code> 会返回一对值：<strong>当前</strong>状态和一个让你更新它的函数，你可以在事件处理函数中或其他一些地方调用这个函数。它类似 class 组件的 <code>this.setState</code>，但是它不会把新的 state 和旧的 state 进行合并。</p><blockquote><ol><li><p>一般来说，一个函数组件，在函数退出后变量就会”消失”，但是 state 中的变量会被 React 保留。</p></li><li><p>当我们点击按钮，调用setCount函数时，React会重新渲染这个组件，并把更新的count值传给这个组件。(其实是每次 Render 都有自己的 Props 与 State)</p><p><a href="https://segmentfault.com/a/1190000018639033#item-2-5" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018639033#item-2-5</a></p></li><li><p>useState()接受一个参数为默认值，该方法返回一个数组，第一个值为定义data的值，第二个为更新data的方法，他们总是成对出现的，</p></li></ol></blockquote><h3 id="1-1-1-基本使用"><a href="#1-1-1-基本使用" class="headerlink" title="1.1.1 基本使用"></a>1.1.1 基本使用</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo1</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//count代表state的变量</span></span><br><span class="line">    <span class="comment">//setCount是一个function，如果我们要修改count变量，需要通过setCount来修改</span></span><br><span class="line">    <span class="keyword">let</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> [count2, setCount2] = useState(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> [count3, setCount3] = useState(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;count&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; setCount(++count) &#125;&#125;&gt;点我修改count<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;count2&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; setCount2(++count2) &#125;&#125;&gt;点我修改count2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;count3&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; setCount3(++count3) &#125;&#125;&gt;点我修改count3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo1;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-useState使用注意点"><a href="#1-1-2-useState使用注意点" class="headerlink" title="1.1.2 useState使用注意点"></a>1.1.2 useState使用注意点</h3><h4 id="a-useState是异步的"><a href="#a-useState是异步的" class="headerlink" title="a) useState是异步的"></a>a) <code>useState</code>是异步的</h4><p>修改state之后无法拿到最新的状态，要等到下一个事件循环周期执行时，状态才是最新的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> props =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [people, setPeople] = useState(&#123;<span class="attr">name</span>: <span class="string">"张三"</span>,<span class="attr">age</span>: <span class="number">12</span>&#125;)</span><br><span class="line">    setPeople(&#123;...people,<span class="attr">name</span>: <span class="string">'王五'</span>&#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(people.name); <span class="comment">// 张三</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在state不影响DOM的前提下，你是可以同步使用它</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> props =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [people, setPeople] = useState(&#123;<span class="attr">name</span>: <span class="string">"张三"</span>,<span class="attr">age</span>: <span class="number">12</span>&#125;);</span><br><span class="line">    people.name = <span class="string">"王五"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(people.name); <span class="comment">// 王五</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="b-useState中的数据务必是immutable数据"><a href="#b-useState中的数据务必是immutable数据" class="headerlink" title="b) useState中的数据务必是immutable数据"></a>b) <code>useState</code>中的数据务必是<code>immutable</code>数据</h4><p>若两次传入同一对象则不会触发组件更新，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> props =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [list, setList] = useState([<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &#123;list.map((item, idx) =&gt; &lt;li key=&#123;String(idx)&#125;&gt;&#123;item&#125;&lt;/li&gt;)&#125;</span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;/* sort 不生成副本，直接返回原数组 */&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span> &#123;setList(list.sort((a, b) =&gt; a - b))&#125;&#125;&gt;sort<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;/* slice 返回一个新的副本数组 */&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span> &#123;setList(list.slice().sort((a, b) =&gt; a - b))&#125;&#125;&gt;slice<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击sort按钮后并不会出发更新！</p><ul><li><p><code>useState</code>对应的 setState对state地改变生效，无论DOM是否使用了<code>state</code>，该组件都会重新渲染；</p></li><li><p>useState 是将新值直接覆盖掉旧值，而不是合并</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [temp,setTemp] = useState(&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;);</span><br><span class="line">setTemp(&#123;<span class="attr">a</span>: <span class="number">2</span>&#125;); <span class="comment">// temp = &#123;a: 2&#125;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>useState</strong>将函数入参给useState时，该函数是在DOM渲染前执行的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [value,setValue] = useState(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'笨鸟先飞'</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="1-2-Effect-Hook"><a href="#1-2-Effect-Hook" class="headerlink" title="1.2 Effect Hook"></a>1.2 Effect Hook</h2><h3 id="1-2-1-useEffect介绍"><a href="#1-2-1-useEffect介绍" class="headerlink" title="1.2.1 useEffect介绍"></a>1.2.1 useEffect介绍</h3><p><code>useEffect</code> 就是一个 Effect Hook，给函数组件增加了操作副作用的能力。它跟 class 组件中的 <code>componentDidMount</code>、<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 具有相同的用途，只不过被合并成了一个 API。</p><p>在调用这个hook时，就是告诉React在完成对DOM的更改后运行这个hook，在这里你可以访问到state和props。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- 纯函数：如果函数的调用参数相同，则永远返回相同的结果。它不依赖于程序执行期间函数外部任何状态或数据的变化，必须只依赖于其输入参数。</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">priceAfterTax</span>(<span class="params">productPrice</span>) </span>&#123; <span class="keyword">return</span> (productPrice * <span class="number">0.20</span>) + productPrice;&#125;</span><br><span class="line"></span><br><span class="line">- 副作用：一个可以被观察的副作用是在函数内部与其外部的任意交互。这可能是在函数内修改外部的变量，或者在函数里调用另外一个函数等。</span><br><span class="line">    <span class="keyword">var</span> tax = <span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">calculateTax</span>(<span class="params">productPrice</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (productPrice * (tax/<span class="number">100</span>)) + productPrice;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-useEffect用法"><a href="#1-2-2-useEffect用法" class="headerlink" title="1.2.2 useEffect用法"></a>1.2.2 useEffect用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1  componentDidMount执行一次，依赖项每次改变时执行一次</span></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//副作用动作</span></span><br><span class="line">&#125;,[依赖项])</span><br><span class="line"></span><br><span class="line"><span class="comment">//2  相当于componentDidMount</span></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//副作用动作</span></span><br><span class="line">&#125;,[])</span><br><span class="line"></span><br><span class="line"><span class="comment">//3  相当于componentDidMount 、componentDidUpdate</span></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//副作用动作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-2-3-useEffect使用"><a href="#1-2-3-useEffect使用" class="headerlink" title="1.2.3 useEffect使用"></a>1.2.3 useEffect使用</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState,useEffect  &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">'./Child.jsx'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo2</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//count代表state的变量</span></span><br><span class="line">    <span class="comment">//setCount是一个function，如果我们要修改count变量，需要通过setCount来修改</span></span><br><span class="line">    <span class="keyword">let</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> [count2, setCount2] = useState(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//useEffect函数可以来模拟class组件的中指定生命周期的钩子函数 componentDidMount，componentDidUpdate，componentWillUnmount</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//相当于componentDidMount 、componentDidUpdate</span></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"xxxxxxxxxxx"</span>,count)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相当于componentDidMount</span></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"yyyyyyyyy"</span>)</span><br><span class="line">    &#125;,[])</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当count2的值被改变之后执行当前的useEffect，其他值改变不会执行这个useEffect</span></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"zzzzzzzzzzzzz"</span>)</span><br><span class="line">    &#125;,[count2])</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;count&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; setCount(++count) &#125;&#125;&gt;点我修改count<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; setCount2(++count2) &#125;&#125;&gt;点我修改count2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Child</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo2;</span><br></pre></td></tr></table></figure><h3 id="1-2-4-清除副作用"><a href="#1-2-4-清除副作用" class="headerlink" title="1.2.4 清除副作用"></a>1.2.4 清除副作用</h3><h4 id="a-无需清理的副作用"><a href="#a-无需清理的副作用" class="headerlink" title="a) 无需清理的副作用"></a>a) 无需清理的副作用</h4><blockquote><p>有时候，我们只想<strong>在 React 更新 DOM 之后运行一些额外的代码。</strong>比如发送网络请求，手动变更 DOM，记录日志，这些都是常见的无需清除的操作。因为我们在执行完这些操作之后，就可以忽略他们了。</p></blockquote><p>需求：监听url的变化来发送网络请求，保存返回结果</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ajax <span class="keyword">from</span> <span class="string">'@utils/ajax'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params">&#123; location &#125;</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> [data, setData] = useState(&#123;&#125;);</span><br><span class="line">    </span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        getData();</span><br><span class="line">    &#125;,[location]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> getData = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        ajax.post().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            setData(res);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;data&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当location发生变化时，useEffect中函数就会自动执行</p><h4 id="b-需要清理的副作用"><a href="#b-需要清理的副作用" class="headerlink" title="b) 需要清理的副作用"></a>b) 需要清理的副作用</h4><blockquote><p>之前，我们研究了如何使用不需要清除的副作用，还有一些副作用是需要清除的。例如<strong>定时器</strong>、<strong>订阅外部数据源</strong>。这种情况下，清除工作是非常重要的，可以防止引起内存泄露！</p></blockquote><p>在useEffect中可选的返回一个清除函数，该清除函数会在组件<strong>卸载</strong>时自动执行，以达到清除effect的目的；</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//useEffect函数中return的function会在组件卸载时自动执行</span></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//副作用动作</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//清除effect</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用示例</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"xxxxxxxxxxxxxxxx"</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(timer, <span class="string">"卸载"</span>)</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            clearInterval(timer)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="c-useEffect返回清除函数的执行时机"><a href="#c-useEffect返回清除函数的执行时机" class="headerlink" title="c) useEffect返回清除函数的执行时机"></a>c) useEffect返回清除函数的执行时机</h4><p>这里是组件<strong>卸载</strong>时自动执行（而不仅仅是销毁），当前状态下的函数组件render完之后会立即执行上一个函数状态中<code>useEffect</code>返回的清除函数，而这个清除函数中所带的参数也是处于上一个状态中（闭包的特性）。</p><p><a href="https://segmentfault.com/a/1190000018639033" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018639033</a></p><blockquote><p>假设在组件的使用过程中，外部传入的props参数id，改变了两次，第一次传入<code>id: 1</code>， 第二次传入<code>id: 2</code></p><p>那么我们来梳理一下整个过程：</p><ol><li>传入<code>props.id = 1</code></li><li>组件渲染</li><li>DOM渲染完成，useEffect逻辑执行，返回清除副作用函数<code>clear，</code>命名为<code>clear1</code></li><li>传入<code>props.id = 2</code></li><li>组件渲染</li><li>组件渲染完成，clear1执行</li><li>useEffect逻辑执行，返回另一个clear函数，命名为<code>clear2</code></li><li>组件销毁，clear2执行</li></ol><p>执行过程有点绕，因为与你印象中的执行过程似乎不一样。其实关键的地方就在于clear函数的执行，它的特征如下：</p><ul><li>每次useEffect执行，都会返回一个新的clear函数</li><li>clear函数会在下一次useEffect逻辑之前执行（DOM渲染完成之后）</li><li>组件销毁也会执行一次</li></ul></blockquote><h3 id="1-2-5-useLayoutEffect"><a href="#1-2-5-useLayoutEffect" class="headerlink" title="1.2.5 useLayoutEffect"></a>1.2.5 useLayoutEffect</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useLayoutEffect( <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;, [ 依赖项 ] );</span><br></pre></td></tr></table></figure><p>其函数签名与 <code>useEffect</code> 相同，但它会在所有的 DOM 变更之后<strong>同步调用</strong> effect。可以使用它来读取 DOM 布局并同步触发重渲染。</p><p>这个是用在处理DOM的时候，当你的useEffect里面的操作需要处理DOM。并且会改变页面的样式，就需要用这个，否则可能会出现出现闪屏问题</p><p><a href="https://www.jianshu.com/p/412c874c5add" target="_blank" rel="noopener">https://www.jianshu.com/p/412c874c5add</a></p><blockquote><p>useEffect和useLayoutEffect的异同：</p><ul><li>useLayoutEffect是在虚拟DOM构建完成后立即执行，useEffect是在真实DOM构建完成后立即执行。</li></ul><ul><li>useLayoutEffect是同步执行，useEffect是异步执行</li></ul></blockquote><h3 id="1-2-6-useEffect使用注意点"><a href="#1-2-6-useEffect使用注意点" class="headerlink" title="1.2.6 useEffect使用注意点"></a>1.2.6 useEffect使用注意点</h3><p>useEffect的函数需要返回一个cleanup的清除函数或者nothing。而当我们使用await、async的时候，会默认返回一个Promise，所以我们不能在useEffect函数中使用async</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误</span></span><br><span class="line">useEffect(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">     <span class="keyword">await</span> fetchSomething();</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">//正确</span></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">await</span> fetchSomething();</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><h2 id="1-3-Ref-Hook"><a href="#1-3-Ref-Hook" class="headerlink" title="1.3 Ref Hook"></a>1.3 Ref Hook</h2><blockquote><p>“ref”对象是一个通用容器，其current属性是可变的。返回的 ref 对象在组件的整个生命周期内保持不变。</p></blockquote><h3 id="1-3-1-保存dom"><a href="#1-3-1-保存dom" class="headerlink" title="1.3.1 保存dom"></a>1.3.1 保存dom</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> t = useRef(<span class="literal">null</span>);</span><br><span class="line"> </span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(t.current); <span class="comment">// div</span></span><br><span class="line">  &#125;);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div ref=&#123;t&#125;&gt; ... &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>也可以通过回调对ref景进行赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> input = useRef(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">&lt;input ref=&#123;(node) =&gt; input = node&#125; /&gt;</span><br></pre></td></tr></table></figure><h3 id="1-3-2-forwardRef"><a href="#1-3-2-forwardRef" class="headerlink" title="1.3.2 forwardRef"></a>1.3.2 forwardRef</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// father</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useRef &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">'./components/Son'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> props =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> refContainer = useRef(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">const</span> changeInput = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        refContainer.current.value = <span class="string">'啊，我被改了！'</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> &gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeInput&#125;</span>&gt;</span>changeInput<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Son</span> <span class="attr">ref</span>=<span class="string">&#123;refContainer&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Son</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; forwardRef &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">const</span> Son = <span class="function">(<span class="params">props,ref</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> &gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> forwardRef(Son)</span><br></pre></td></tr></table></figure><h3 id="1-3-3-useImperativeHandle"><a href="#1-3-3-useImperativeHandle" class="headerlink" title="1.3.3 useImperativeHandle"></a>1.3.3 useImperativeHandle</h3><blockquote><p><code>useImperativeHandle</code> 可以让你在使用 <code>ref</code> 时自定义暴露给父组件的实例值。在大多数情况下，应当避免使用 ref 这样的命令式代码。<code>useImperativeHandle</code> 应当与 <code>forwardRef</code> 一起使用</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//father</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useRef &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">'./components/Son'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> props =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> refContainer = useRef(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">const</span> changeInput = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        refContainer.current.focus()</span><br><span class="line">        <span class="comment">// console.log(refContainer)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> talk = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        refContainer.current.talk()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> &gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeInput&#125;</span>&gt;</span>changeInput<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;talk&#125;</span>&gt;</span>talk<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Son</span> <span class="attr">ref</span>=<span class="string">&#123;refContainer&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Son</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useRef, forwardRef, useImperativeHandle &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">props, ref</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//新建一个ref  将此ref绑定在本组建内的input上</span></span><br><span class="line">    <span class="keyword">const</span> inputRef = useRef();</span><br><span class="line">    <span class="comment">//将 使得本组件input获取焦点的方法赋给父组件传递来的ref上 </span></span><br><span class="line">    useImperativeHandle(ref, () =&gt; (&#123;</span><br><span class="line">        focus: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            inputRef.current.focus();</span><br><span class="line">        &#125;,</span><br><span class="line">        talk: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'hello, world!'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> forwardRef(Son);</span><br></pre></td></tr></table></figure><h3 id="1-3-4-保存事件-变量"><a href="#1-3-4-保存事件-变量" class="headerlink" title="1.3.4 保存事件/变量"></a>1.3.4 保存事件/变量</h3><p>在函数组件中，因为每次re-render就意味着函数重新执行一次，因此在函数内部保持变量引用是一件我们需要思考的事情(如果普通变量，每次re-render都会被重新初始化)。</p><p>在前面学习useState时我们知道，使用useState定义变量，可以做到这样的事情。同样的，利用ref的.current也可以。</p><p>一个很常见的应用场景就是对于定时器的清除。我们需要确保setInterval的执行结果timer的引用，才能准确的清除对应的定时器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> timerRef = useRef&lt;NodeJS.Timeout&gt;();</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        timerRef.current = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'do something'</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 组件卸载时，清除定时器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            timerRef.current &amp;&amp; clearInterval(timerRef.current);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-5-useState和useRef的区别"><a href="#1-3-5-useState和useRef的区别" class="headerlink" title="1.3.5 useState和useRef的区别"></a>1.3.5 useState和useRef的区别</h3><ul><li>每次 Render 的内容都会形成一个快照并保留下来，因此当状态变更而 re-render 时，就形成了 N 个 Render 状态，而每个 Render 状态都拥有自己固定不变的 Props 与 State。(每次Render都有自己的Props、State、事件处理、effect，这就是<strong>Capture Value</strong> 特性)</li><li>利用 <code>useRef</code> 就可以绕过 Capture Value 的特性。<strong>可以认为 ref 在所有 Render 过程中保持着唯一引用，因此所有对 ref 的赋值或取值，拿到的都只有一个最终状态</strong></li><li>也可以简洁的认为，<code>ref</code> 是 Mutable 的，而 <code>state</code> 是 Immutable 的。</li></ul><h2 id="1-4-memo-useMemo-useCallback"><a href="#1-4-memo-useMemo-useCallback" class="headerlink" title="1.4 memo\useMemo\useCallback"></a>1.4 memo\useMemo\useCallback</h2><p>在介绍一下这两个hooks的作用之前，我们先来回顾一下react中的性能优化。在hooks诞生之前，如果组件包含内部state，我们都是基于class的形式来创建组件。当时我们也知道，react中性能的优化点在于：</p><blockquote><ol><li>调用setState，就会触发组件的重新渲染，无论前后的state是否不同</li><li>父组件更新，子组件也会自动的更新</li><li>组件更新时，会卸载所有function，并重新创建function</li></ol></blockquote><p>基于上面的三点，我们通常的解决方案是：</p><blockquote><ol><li>使用immutable进行比较，在不相等的时候调用setState；</li><li>在shouldComponentUpdate中判断前后的props和state，如果没有变化，则返回false来阻止更新。</li></ol></blockquote><p>在hooks出来之后，我们能够使用function的形式来创建包含内部state的组件。但是，使用function的形式，失去了上面的shouldComponentUpdate，我们无法通过判断前后状态来决定是否更新。而且，在函数组件中，react不再区分mount和update两个状态，这意味着函数组件的每一次调用都会执行其内部的所有逻辑，那么会带来较大的性能损耗。因此useMemo 和useCallback就是解决性能问题的杀手锏。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, memo &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Child = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;date.toLocaleString()&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Parent = ()=&gt;&#123;</span></span><br><span class="line"><span class="regexp">  const [count,setCount] = useState(0);</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;数量为:&#123;count&#125;&lt;/</span>div&gt;</span><br><span class="line">      &lt;button onClick=&#123;()=&gt;&#123;setCount(count+<span class="number">1</span>)&#125;&#125;&gt;点我加<span class="number">1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Child&gt;&lt;/</span>Child&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function App() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div className="App"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Parent&gt;&lt;/</span>Parent&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/案例存在的问题：每点击一次按钮，会重新渲染一次时间，说明父组件更新的时候，子组件也重新渲染了</span></span><br></pre></td></tr></table></figure><h3 id="1-4-1-使用memo组件"><a href="#1-4-1-使用memo组件" class="headerlink" title="1.4.1 使用memo组件"></a>1.4.1 使用memo组件</h3><p><code>React.memo()</code>是一个高阶函数，它与 <a href="https://reactjs.org/docs/react-api.html#reactpurecomponent" target="_blank" rel="noopener"><code>React.PureComponent</code></a>类似，但是一个函数组件而非一个类。</p><p>React.memo()可接受2个参数，第一个参数为纯函数的组件，第二个参数用于对比props控制是否刷新，与<a href="https://reactjs.org/docs/react-component.html#shouldcomponentupdate" target="_blank" rel="noopener"><code>shouldComponentUpdate()</code></a>功能类似</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改Child组件</span></span><br><span class="line"><span class="keyword">const</span> Child = memo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;date.toLocaleString()&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;, (prev,next) =&gt; &#123; console.log(prev.count,next.count); return prev.count==next.count &#125;)  /</span><span class="regexp">/这边只要父亲传递给孩子的props发生了变化就应该刷新子组件(如果父亲没有给子组件传递props或者父亲给子组件传递的props没有改变，则子组件不应该刷新)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Parent = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  const [count, setCount] = useState(0);</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;数量为:&#123;count&#125;&lt;/</span>div&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123; setCount(count + <span class="number">1</span>) &#125;&#125;&gt;点我加<span class="number">1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Child count=&#123;count&#125;&gt;&lt;/</span>Child&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-2-useMemo"><a href="#1-4-2-useMemo" class="headerlink" title="1.4.2 useMemo"></a>1.4.2 useMemo</h3><h4 id="a-没有使用useMemo存在的问题"><a href="#a-没有使用useMemo存在的问题" class="headerlink" title="a) 没有使用useMemo存在的问题"></a>a) 没有使用useMemo存在的问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, memo &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Child = memo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;date.toLocaleString()&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;, (prev,next) =&gt; &#123; console.log(prev.obj,next.obj); return prev.obj==next.obj &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Parent = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  const [count, setCount] = useState(0);</span></span><br><span class="line"><span class="regexp">  const obj = &#123;</span></span><br><span class="line"><span class="regexp">    name:"zhangsan"</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;数量为:&#123;count&#125;&lt;/</span>div&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123; setCount(count + <span class="number">1</span>) &#125;&#125;&gt;点我加<span class="number">1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Child obj=&#123;obj&#125;&gt;&lt;/</span>Child&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function App() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div className="App"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Parent&gt;&lt;/</span>Parent&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/案例存在的问题：每点击一次按钮，会重新渲染一次时间，但是每一次点击按钮的时候，父组件给子组件传递的都是相同的obj对象，为什么子组件还是会刷新呢?</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/原因是每一次点击按钮的时候，会重新刷新父组件，父组件中的obj会重新被实例化，所以新实例化的obj和上一次实例化的obj不是同一个对象</span></span><br></pre></td></tr></table></figure><h4 id="b-useMemo-hook"><a href="#b-useMemo-hook" class="headerlink" title="b) useMemo hook"></a>b) useMemo hook</h4><p>useMemo可以用来缓存一些变量，并指定哪些条件变化后重新计算缓存的变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedValue = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> computeExpensiveValue(a, b), [a, b]);</span><br></pre></td></tr></table></figure><blockquote><p>useMemo第一个参数是一个 factory 函数，该函数的返回结果会通过useMemo缓存下来</p><p>​                  第二个参数是factory函数的依赖(deps)，当依赖(deps)改变时才重新执行 factory 函数，memoizedValue 才会被重新计算</p></blockquote><p>也就是在依赖未改变时（或空数组无依赖时），memoizedValue 总是返回通过useMemo缓存的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, memo,useMemo &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Child = memo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;date.toLocaleString()&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;, (prev,next) =&gt; &#123; console.log(prev.obj===next.obj); return prev.obj===next.obj &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Parent = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  const [count, setCount] = useState(0);</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/使用useMemo将函数返回的结果返回</span></span><br><span class="line"><span class="regexp">  const obj = useMemo(()=&gt;&#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      name:"zhangsan"</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,[])</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;数量为:&#123;count&#125;&lt;/</span>div&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123; setCount(count + <span class="number">1</span>) &#125;&#125;&gt;点我加<span class="number">1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Child obj=&#123;obj&#125;&gt;&lt;/</span>Child&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function App() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div className="App"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Parent&gt;&lt;/</span>Parent&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-3-useCallback"><a href="#1-4-3-useCallback" class="headerlink" title="1.4.3 useCallback"></a>1.4.3 useCallback</h3><h4 id="a-没有使用useCallback的问题"><a href="#a-没有使用useCallback的问题" class="headerlink" title="a) 没有使用useCallback的问题"></a>a) 没有使用useCallback的问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, memo,useMemo &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Child = memo(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;date.toLocaleString()&#125;</span><br><span class="line">      &lt;input type=<span class="string">"text"</span> onChange=&#123;props.onChange&#125;&gt;&lt;<span class="regexp">/input&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Parent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [text,setText] = useState(<span class="string">""</span>)</span><br><span class="line">  <span class="keyword">const</span> changeHandler = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">    setText(event.target.value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;text文本为:&#123;text&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Child onChange=&#123;changeHandler&#125;&gt;&lt;/</span>Child&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function App() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div className="App"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Parent&gt;&lt;/</span>Parent&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/上面代码中，我们在子组件中修改文本框的值，会触发子组件的onChange，从而触发父组件的changeHandler方法，在父组件中的changeHandler方法中修改了text文本，所以页面上的text值发生了改变。 </span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/但是除了我们发现页面上text文本改变之外，子组件中的时间也发生了改变 (说明每一次子组件输入内容的时候都会触发子组件的重新渲染)</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/原因是每一次子组件输入内容，父组件的text文本发生变化，造成父组件被重新渲染，从而造成父组件传递给子组件的changeHandler方法(props)发生了变化，从而造成子组件的重新渲染</span></span><br></pre></td></tr></table></figure><h4 id="b-useCallback-hook"><a href="#b-useCallback-hook" class="headerlink" title="b) useCallback   hook"></a>b) useCallback   hook</h4><p>useMemo缓存的是值</p><p>useCallback缓存的是函数。有两个参数，第一个参数是需要缓存的函数，第二个参数是依赖项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, memo,useMemo,useCallback &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Child = memo(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;date.toLocaleString()&#125;</span><br><span class="line">      &lt;input type=<span class="string">"text"</span> onChange=&#123;props.onChange&#125;&gt;&lt;<span class="regexp">/input&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Parent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [text,setText] = useState(<span class="string">""</span>)</span><br><span class="line">  <span class="comment">//使用useCallback来缓存函数</span></span><br><span class="line">  <span class="keyword">const</span> changeHandler = useCallback(<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">    setText(event.target.value)</span><br><span class="line">  &#125;,[])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;text文本为:&#123;text&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Child onChange=&#123;changeHandler&#125;&gt;&lt;/</span>Child&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function App() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div className="App"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Parent&gt;&lt;/</span>Parent&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-4-useMemo和useCallback的区别和练习"><a href="#1-4-4-useMemo和useCallback的区别和练习" class="headerlink" title="1.4.4 useMemo和useCallback的区别和练习"></a>1.4.4 useMemo和useCallback的区别和练习</h3><p>实际上<code>useCallback</code>是基于<code>useMemo</code>实现的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useCallback</span>(<span class="params">callback, args</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> useMemo(<span class="function"><span class="params">()</span> =&gt;</span> callback, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>useMemo</code>是返回<code>callback</code>执行后的结果</li><li><code>useCallback</code> 是直接返回被<code>useMemo</code>修饰的<code>callback</code>函数</li></ol><h2 id="1-5-useReducer和useContext"><a href="#1-5-useReducer和useContext" class="headerlink" title="1.5 useReducer和useContext"></a>1.5 useReducer和useContext</h2><h3 id="1-5-1-useReducer"><a href="#1-5-1-useReducer" class="headerlink" title="1.5.1 useReducer"></a>1.5.1 useReducer</h3><p>useReducer提供类似 Redux 的功能。他接收两个参数，第一个参数是一个recuder(纯函数)，第二个参数是state的初始值。</p><p>他返回一个状态 state和 dispath，state是返回状态中的值，而 dispatch 是一个可以发布事件来更新 state 的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reducer就是平时redux那种reducer函数</span></span><br><span class="line"><span class="comment">// initialState 初始化的state状态</span></span><br><span class="line"><span class="comment">// init 一个函数用于惰性计算state初始值</span></span><br><span class="line"><span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialArg, init);</span><br></pre></td></tr></table></figure><p>基本使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个reducer(纯函数，将action转换为state)</span></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state=<span class="number">0</span>,action</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'ADD'</span>:</span><br><span class="line">      <span class="keyword">return</span> state+<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'SUB'</span>:</span><br><span class="line">      <span class="keyword">return</span> state<span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Child = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//使用useReducer提供状态</span></span><br><span class="line">  <span class="keyword">const</span> [count,dispatcher] = useReducer(reducer,<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      子组件</span><br><span class="line">      数量:&#123;count&#125;&lt;br/&gt;</span><br><span class="line">      &lt;button onClick=&#123;()=&gt;&#123;dispatcher(&#123;<span class="attr">type</span>:<span class="string">"ADD"</span>&#125;)&#125;&#125;&gt;加<span class="number">1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;()=&gt;&#123;dispatcher(&#123;type:"SUB"&#125;)&#125;&#125;&gt;减1&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Parent = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;父组件&lt;/</span>div&gt;</span><br><span class="line">      &lt;Child&gt;&lt;<span class="regexp">/Child&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">      &lt;Parent&gt;&lt;<span class="regexp">/Parent&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h3 id="1-5-2-useContext"><a href="#1-5-2-useContext" class="headerlink" title="1.5.2 useContext"></a>1.5.2 useContext</h3><blockquote><p>实现同一子树下所有节点可统一共享子树根节点的数据</p></blockquote><p>useContext接收一个 context 对象（<code>React.createContext</code> 的返回值）并返回该 context 的当前值。当前的 context 值由上层组件中距离当前组件最近的 <code>&lt;MyContext.Provider&gt;</code> 的 <code>value</code> prop 决定。</p><p>当组件上层最近的 <code>&lt;MyContext.Provider&gt;</code> 更新时，该 Hook 会触发重渲染，并使用最新传递给 <code>MyContext</code> provider 的 context <code>value</code> 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = useContext(MyContext);</span><br></pre></td></tr></table></figure><p>基本用法：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#1.App.jsx</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> Demo3 <span class="keyword">from</span> <span class="string">'@/components/Demo3'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MyContext <span class="keyword">from</span> <span class="string">'./context.js'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">MyContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;name:</span>"<span class="attr">zhangsan</span>"&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        App</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Demo3</span>&gt;</span><span class="tag">&lt;/<span class="name">Demo3</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">MyContext.Provider</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#2/context.js</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">const</span> MyContext = React.createContext(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#3.Child.jsx</span><br><span class="line"><span class="keyword">import</span> React,&#123;useContext&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> MyContext <span class="keyword">from</span> <span class="string">'@/context.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//在子组件中获取父组件发布的数据</span></span><br><span class="line">    <span class="keyword">const</span> contextValue = useContext(MyContext);</span><br><span class="line">    <span class="built_in">console</span>.log(contextValue)</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-3-useReducer和useContext提供全局状态管理"><a href="#1-5-3-useReducer和useContext提供全局状态管理" class="headerlink" title="1.5.3 useReducer和useContext提供全局状态管理"></a>1.5.3 useReducer和useContext提供全局状态管理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useReducer,useContext &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"><span class="keyword">import</span> MyContext <span class="keyword">from</span> <span class="string">'./context.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个reducer(纯函数，将action转换为state)</span></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = <span class="number">0</span>, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'ADD'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'SUB'</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Child = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//使用useReducer提供状态</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [count,dispatcher] = useContext(MyContext);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      子组件</span><br><span class="line">      数量:&#123;count&#125;&lt;br /&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123; dispatcher(&#123; <span class="attr">type</span>: <span class="string">"ADD"</span> &#125;) &#125;&#125;&gt;加<span class="number">1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; &#123; dispatcher(&#123; type: "SUB" &#125;) &#125;&#125;&gt;减1&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Parent = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  const [count,dispatcher] = useContext(MyContext);</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      父组件：&#123;count&#125;</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;父组件&lt;/</span>div&gt;</span><br><span class="line">      &lt;Child&gt;&lt;<span class="regexp">/Child&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, dispatcher] = useReducer(reducer, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;MyContext.Provider value=&#123;[count,dispatcher]&#125;&gt;</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;Parent&gt;&lt;<span class="regexp">/Parent&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/MyContext.Provider&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><p>useReducer和useContext的出现并不是为了取代redux，redux是独立于任何第三方库，redux有优秀的中间件(异步数据流、debug)。当状态比较简单的时候，我们可以使用useReducer和useContext来实现组件之间的数据共享，但是当状态变得特别复杂的时候，建议使用redux。</p><h2 id="1-6-Hook的规则"><a href="#1-6-Hook的规则" class="headerlink" title="1.6 Hook的规则"></a>1.6 Hook的规则</h2><h3 id="1-6-1-只在组件顶层中使用Hook"><a href="#1-6-1-只在组件顶层中使用Hook" class="headerlink" title="1.6.1 只在组件顶层中使用Hook"></a>1.6.1 只在组件顶层中使用Hook</h3><blockquote><p><strong>不要在循环，条件或嵌套函数中调用 Hook，</strong> 确保总是在你的 React 函数的最顶层调用他们。遵守这条规则，你就能确保 Hook 在每一次渲染中都按照同样的顺序被调用。这让 React 能够在多次的 <code>useState</code> 和 <code>useEffect</code> 调用之间保持 hook 状态的正确。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>); <span class="comment">//Yes</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(props.id)&#123;</span><br><span class="line">        <span class="comment">// const [count, setCount] = useState(0); //No</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">const</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// const [count, setCount] = useState(0); //No</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-2-只在React-函数中调用Hook"><a href="#1-6-2-只在React-函数中调用Hook" class="headerlink" title="1.6.2 只在React 函数中调用Hook"></a>1.6.2 只在React 函数中调用Hook</h3><blockquote><p><strong>不要在普通的 JavaScript 函数中调用 Hook。</strong>你可以：</p><ul><li>在 React 的函数组件中调用 Hook</li><li>在自定义 Hook 中调用其他 Hook</li><li>在class组件中不能使用Hook</li></ul><p>遵循此规则，确保组件的状态逻辑在代码中清晰可见。</p></blockquote><h2 id="参照文章："><a href="#参照文章：" class="headerlink" title="参照文章："></a>参照文章：</h2><ol><li><a href="https://react-1251415695.cos-website.ap-chengdu.myqcloud.com/docs/getting-started.html" target="_blank" rel="noopener">React官方文档</a></li><li><a href="https://blog.csdn.net/sinat_17775997/article/details/94453167" target="_blank" rel="noopener">useMemo与useCallback使用指南</a></li><li><a href="https://blog.csdn.net/gtLBTNq9mr3/article/details/93984397" target="_blank" rel="noopener">useReducerde使用和原理</a></li><li><a href="https://segmentfault.com/a/1190000021133222" target="_blank" rel="noopener">五个大型项目实践总结，解密React Hooks最佳实践</a></li><li><a href="https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/" target="_blank" rel="noopener">useEffect完整指南</a></li><li><a href="https://zhuanlan.zhihu.com/p/88135310" target="_blank" rel="noopener">一文彻底搞懂 react hooks 的原理和实现</a></li><li><a href="https://www.jianshu.com/p/b9ac8fa849f1" target="_blank" rel="noopener">React Hooks的原理</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nextJS</title>
      <link href="/2020/03/22/nextJS/"/>
      <url>/2020/03/22/nextJS/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Next-Js介绍"><a href="#1-Next-Js介绍" class="headerlink" title="1.Next.Js介绍"></a>1.Next.Js介绍</h2><h3 id="1-1-next-js是什么"><a href="#1-1-next-js是什么" class="headerlink" title="1.1 next.js是什么"></a>1.1 next.js是什么</h3><p>next.js作为一款轻量级的应用框架，主要用于构建静态网站和后端渲染网站。</p><blockquote><p>Next.js 只支持<a href="https://reactjs.org/blog/2017/09/26/react-v16.0.html" target="_blank" rel="noopener">React 16</a>.<br>由于我们使用 React 16 的特性，所以不得不放弃对 React 15 以及以下版本的支持. 当前译版为7.0.0-canary.8</p></blockquote><h3 id="1-2-框架特点"><a href="#1-2-框架特点" class="headerlink" title="1.2 框架特点"></a>1.2 框架特点</h3><ul><li>使用后端渲染</li><li>自动进行代码分割（code splitting），以获得更快的网页加载速度</li><li>简洁的前端路由实现</li><li>使用webpack进行构建，支持模块热更新（Hot Module Replacement）</li><li>可与主流Node服务器进行对接（如express）</li><li>可自定义babel和webpack的配置</li></ul><h2 id="2-Next项目创建"><a href="#2-Next项目创建" class="headerlink" title="2.Next项目创建"></a>2.Next项目创建</h2><h3 id="2-1-安装create-next-app脚手架"><a href="#2-1-安装create-next-app脚手架" class="headerlink" title="2.1 安装create-next-app脚手架"></a>2.1 安装create-next-app脚手架</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yarn global add create-next-app</span><br><span class="line">create-next-app my-project</span><br><span class="line">cd my-project</span><br><span class="line">yarn dev</span><br></pre></td></tr></table></figure><h3 id="2-2-添加antd"><a href="#2-2-添加antd" class="headerlink" title="2.2 添加antd"></a>2.2 添加antd</h3><p>安装<code>antd</code>和按需加载的<code>babel-plugin-import</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yarn add antd@<span class="number">3.9</span><span class="number">.2</span> babel-plugin-<span class="keyword">import</span></span><br><span class="line"></span><br><span class="line">yarn add @zeit/next-css @zeit/next-less less </span><br><span class="line">yarn add babel-plugin-<span class="built_in">module</span>-resolver</span><br><span class="line">yarn add next-compose-plugins</span><br></pre></td></tr></table></figure><p>跟目录下建立<code>.babelrc</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"next/babel"</span>],</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    <span class="comment">// 让我们可以使用根路径，避免相对路径的混乱，如import Head from '@/components/Head'</span></span><br><span class="line">    [</span><br><span class="line">      <span class="string">"module-resolver"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"alias"</span>: &#123;</span><br><span class="line">          <span class="string">"@"</span>: <span class="string">"./"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"import"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"libraryName"</span>: <span class="string">"antd"</span>,</span><br><span class="line">        <span class="string">"style"</span>: <span class="string">"css"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根目录有个<code>next.config.js</code>，专门用来修改<code>next</code>以及<code>webpack</code>的配置。更改如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="keyword">const</span> withCss = <span class="built_in">require</span>(<span class="string">'@zeit/next-css'</span>)</span><br><span class="line"><span class="keyword">const</span> withLess = <span class="built_in">require</span>(<span class="string">'@zeit/next-less'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> withPlugins = <span class="built_in">require</span>(<span class="string">"next-compose-plugins"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> style = [</span><br><span class="line">  [withCss, &#123;</span><br><span class="line"></span><br><span class="line">  &#125;],</span><br><span class="line">  [withLess, &#123;</span><br><span class="line"></span><br><span class="line">  &#125;],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = withPlugins([...style],&#123;</span><br><span class="line">  distDir: <span class="string">'dist'</span>,</span><br><span class="line">  webpack: <span class="function">(<span class="params">config, &#123; isServer &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isServer) &#123;</span><br><span class="line">      <span class="keyword">const</span> antStyles = <span class="regexp">/antd\/.*?\/style\/css.*?/</span></span><br><span class="line">      <span class="keyword">const</span> origExternals = [...config.externals]</span><br><span class="line">      config.externals = [</span><br><span class="line">        (context, request, callback) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (request.match(antStyles)) <span class="keyword">return</span> callback()</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> origExternals[<span class="number">0</span>] === <span class="string">'function'</span>) &#123;</span><br><span class="line">            origExternals[<span class="number">0</span>](context, request, callback)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            callback()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        ...(<span class="keyword">typeof</span> origExternals[<span class="number">0</span>] === <span class="string">'function'</span> ? [] : origExternals),</span><br><span class="line">      ]</span><br><span class="line"></span><br><span class="line">      config.module.rules.unshift(&#123;</span><br><span class="line">        test: antStyles,</span><br><span class="line">        use: <span class="string">'null-loader'</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-3-使用antd组件"><a href="#2-3-使用antd组件" class="headerlink" title="2.3 使用antd组件"></a>2.3 使用antd组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#pages/index.js</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Pagination &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div className=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;Button type=<span class="string">"primary"</span>&gt;Primary&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Pagination defaultCurrent=&#123;1&#125; total=&#123;50&#125; /</span>&gt;</span><br><span class="line"> .........</span><br></pre></td></tr></table></figure><h2 id="3-Next基本使用"><a href="#3-Next基本使用" class="headerlink" title="3.Next基本使用"></a>3.Next基本使用</h2><h3 id="3-1-创建视图"><a href="#3-1-创建视图" class="headerlink" title="3.1  创建视图"></a>3.1  创建视图</h3><p>pages目录下新建about.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> About = <span class="function"><span class="params">()</span>=&gt;</span>(</span><br><span class="line">    &lt;div className=<span class="string">"container"</span>&gt;</span><br><span class="line">        这是About页面</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">export default About</span></span><br></pre></td></tr></table></figure><p>浏览器访问：<a href="http://localhost:3000/about" target="_blank" rel="noopener">http://localhost:3000/about</a></p><blockquote><p>Next.js 没有路由配置文件，路由的规则跟 PHP 有点像。只要在 pages 文件夹下创建的文件，都会默认生成以文件名命名的路由</p></blockquote><h3 id="3-2-页面跳转和路由参数"><a href="#3-2-页面跳转和路由参数" class="headerlink" title="3.2 页面跳转和路由参数"></a>3.2 页面跳转和路由参数</h3><p>我们可以使用传统的a标签在页面之间进行跳转，但每跳转一次，都需要去服务端请求一次。为了增加页面的访问速度，推荐使用<code>next/link</code>组件进行跳转。将 index.js 改写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Pagination &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'next/link'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div className=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;Button type=<span class="string">"primary"</span>&gt;Primary&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Pagination defaultCurrent=&#123;1&#125; total=&#123;50&#125; /</span>&gt;</span><br><span class="line">    &lt;Link href=<span class="string">"/about"</span>&gt;</span><br><span class="line">      &lt;a&gt;About Page&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Link&gt;</span><br><span class="line">    .........</span><br></pre></td></tr></table></figure><blockquote><p><strong>Link标签支持任意react组件作为其子元素，不一定要用a标签，只要该子元素能响应onClick事件</strong>，就像下面这样：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link href=<span class="string">"/about"</span>&gt;</span><br><span class="line">    &lt;div&gt;Go about page&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Link&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Link标签不支持添加style和className等属性，如果要给链接增加样式，需要在子元素上添加</strong>：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link href=<span class="string">"/about"</span>&gt;</span><br><span class="line">    &lt;a className=<span class="string">"about-link"</span> style=&#123;&#123;<span class="attr">color</span>:<span class="string">'#ff0000'</span>&#125;&#125;&gt;Go about page&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Link&gt;</span><br></pre></td></tr></table></figure><h3 id="3-3-路由传参"><a href="#3-3-路由传参" class="headerlink" title="3.3 路由传参"></a>3.3 路由传参</h3><p>如果需要给路由传参数，则使用<code>query string</code>的形式，将 index.js 改写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Pagination &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'next/link'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PostLink = <span class="function">(<span class="params">props</span>) =&gt;</span> (</span><br><span class="line">  &lt;li&gt;</span><br><span class="line">    &#123;<span class="comment">/* &lt;Link href=&#123;`/about?title=$&#123;props.title&#125;`&#125;&gt;</span></span><br><span class="line"><span class="comment">      &lt;a&gt;&#123;props.title&#125;&lt;/a&gt;</span></span><br><span class="line"><span class="comment">    &lt;/Link&gt; */</span>&#125;</span><br><span class="line"></span><br><span class="line">    &lt;Link href=&#123;&#123; <span class="attr">pathname</span>: <span class="string">'/about'</span>, <span class="attr">query</span>: &#123; <span class="attr">title</span>: props.title &#125; &#125;&#125;&gt;</span><br><span class="line">      &lt;a&gt;&#123;props.title&#125;&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Link&gt;</span><br><span class="line">  &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Home = () =&gt; (</span></span><br><span class="line"><span class="regexp">  &lt;div className="container"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Button type="primary"&gt;Primary&lt;/</span>Button&gt;</span><br><span class="line">    &lt;Pagination defaultCurrent=&#123;<span class="number">1</span>&#125; total=&#123;<span class="number">50</span>&#125; /&gt;</span><br><span class="line">    &lt;Link href=<span class="string">"/about?title=hello"</span>&gt;</span><br><span class="line">      &lt;a&gt;About Page&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Link&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;PostLink title=<span class="string">"Hello next.js"</span> /&gt;</span><br><span class="line">      &lt;PostLink title=<span class="string">"next.js is awesome"</span> /&gt;</span><br><span class="line">      &lt;PostLink title=<span class="string">"Deploy apps with Zeit"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home</span><br></pre></td></tr></table></figure><p>取参数的时候，需要借助框架提供的<code>withRouter</code>方法，参数封装在 query 对象中，将 about.js 改写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'next/link'</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">'next/router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> About = withRouter(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div className=<span class="string">"container"</span>&gt;</span><br><span class="line">            &lt;h1&gt;&#123;props.router.query.title&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">            这是About页面</span></span><br><span class="line"><span class="regexp">            &#123;flag &amp;&amp; &lt;Button type="primary"&gt;Primary&lt;/</span>Button&gt;&#125;</span><br><span class="line">            &lt;Link href=<span class="string">"/"</span>&gt;</span><br><span class="line">                &lt;a&gt;首页&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Link&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp">export default About</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">#注意：这边有个bug，当next和antd结合使用的时候，如果某个页面中没有使用到antd组件，那么这个页面不能被刷新，否则路由导航失效，antd的样式也不会被加载</span></span><br><span class="line"><span class="regexp">#因此这边在about页面中使用了Button组件，即使Button组件没有被渲染到页面</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>如果希望浏览器地址栏不显示query string，可以使用Link标签的as属性：</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link <span class="keyword">as</span>=<span class="string">"/t/123"</span> href=<span class="string">"/about?title=123"</span>&gt;</span><br><span class="line">    &lt;a&gt;About Page2&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Link&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-Layout"><a href="#3-4-Layout" class="headerlink" title="3.4 Layout"></a>3.4 Layout</h3><p>所谓的layout就是就是给不同的页面添加相同的header，footer，navbar等通用的部分，同时又不需要写重复的代码。在next.js中可以通过共享某些组件实现layout。</p><p>我们先增加一个公共的header和footer组件，放在根目录的components文件夹下面（页面级的组件放pages中，公共组件放components中）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#header.js</span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'next/link'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> linkStyle = &#123;</span><br><span class="line">    marginRight: <span class="number">15</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Header = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;Link href=<span class="string">"/"</span>&gt;</span><br><span class="line">            &lt;a style=&#123;linkStyle&#125;&gt;Home&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Link&gt;</span><br><span class="line">        &lt;Link href=<span class="string">"/about"</span>&gt;</span><br><span class="line">            &lt;a style=&#123;linkStyle&#125;&gt;About&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Link&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Header;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">#footer.js</span></span><br><span class="line"><span class="regexp">const Footer = () =&gt; (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        网页尾巴</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Footer;</span><br></pre></td></tr></table></figure><p>在components中添加一个<code>layout.js</code>文件，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./header'</span>;</span><br><span class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">'./footer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> layoutStyle = &#123;</span><br><span class="line">    margin: <span class="number">20</span>,</span><br><span class="line">    padding: <span class="number">20</span>,</span><br><span class="line">    border: <span class="string">'1px solid #DDD'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Layout = <span class="function">(<span class="params">props</span>) =&gt;</span> (</span><br><span class="line">    &lt;div style=&#123;layoutStyle&#125;&gt;</span><br><span class="line">        &lt;Header /&gt;</span><br><span class="line">        &#123;props.children&#125;</span><br><span class="line">        &lt;Footer /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Layout</span></span><br></pre></td></tr></table></figure><p>在index.js和about.js页面中引入layout组件就可以达到布局的目的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#index.js</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Pagination &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'next/link'</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">'@/components/layout'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PostLink = <span class="function">(<span class="params">props</span>) =&gt;</span> (</span><br><span class="line">  &lt;li&gt;</span><br><span class="line">    &#123;<span class="comment">/* &lt;Link href=&#123;`/about?title=$&#123;props.title&#125;`&#125;&gt;</span></span><br><span class="line"><span class="comment">      &lt;a&gt;&#123;props.title&#125;&lt;/a&gt;</span></span><br><span class="line"><span class="comment">    &lt;/Link&gt; */</span>&#125;</span><br><span class="line"></span><br><span class="line">    &lt;Link href=&#123;&#123; <span class="attr">pathname</span>: <span class="string">'/about'</span>, <span class="attr">query</span>: &#123; <span class="attr">title</span>: props.title &#125; &#125;&#125;&gt;</span><br><span class="line">      &lt;a&gt;&#123;props.title&#125;&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Link&gt;</span><br><span class="line">  &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Home = () =&gt; (</span></span><br><span class="line"><span class="regexp">  &lt;Layout&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div className="container"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Button type="primary"&gt;Primary&lt;/</span>Button&gt;</span><br><span class="line">      &lt;Pagination defaultCurrent=&#123;<span class="number">1</span>&#125; total=&#123;<span class="number">50</span>&#125; /&gt;</span><br><span class="line">      &lt;Link href=<span class="string">"/about?title=hello"</span>&gt;</span><br><span class="line">        &lt;a&gt;About Page&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Link&gt;</span><br><span class="line"></span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;PostLink title=<span class="string">"Hello next.js"</span> /&gt;</span><br><span class="line">        &lt;PostLink title=<span class="string">"next.js is awesome"</span> /&gt;</span><br><span class="line">        &lt;PostLink title=<span class="string">"Deploy apps with Zeit"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/Layout&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Home</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#about.js</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'next/link'</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">'next/router'</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">'@/components/layout'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> About = withRouter(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;Layout&gt;</span><br><span class="line">            &lt;div className=<span class="string">"container"</span>&gt;</span><br><span class="line">                &lt;h1&gt;&#123;props.router.query.title&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                这是About页面</span></span><br><span class="line"><span class="regexp">            &#123;flag &amp;&amp; &lt;Button type="primary"&gt;Primary&lt;/</span>Button&gt;&#125;</span><br><span class="line">                &lt;Link href=<span class="string">"/"</span>&gt;</span><br><span class="line">                    &lt;a&gt;首页&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>Link&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Layout&gt;</span><br><span class="line"></span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> About</span><br></pre></td></tr></table></figure><p>打开浏览器访问 <a href="http://localhost:3000/about" target="_blank" rel="noopener">http://localhost:3000/about</a>，可以发现公共的头和尾巴被加载了</p><h2 id="4-样式加载"><a href="#4-样式加载" class="headerlink" title="4.样式加载"></a>4.样式加载</h2><p>对于React应用，有多种方式可以增加样式。主要分为两种： </p><ol><li>使用传统CSS文件（包括SASS，Less等） </li><li>在JS文件中插入CSS</li></ol><p>使用传统CSS文件在实际使用中会用到挺多的问题，所以next.js推荐使用第二种方式。next.js内部默认使用<a href="https://github.com/zeit/styled-jsx" target="_blank" rel="noopener">styled-jsx</a>框架向js文件中插入CSS。这种方式引入的样式在不同组件之间不会相互影响，甚至父子组件之间都不会相互影响。</p><h3 id="4-1-styled-jsx"><a href="#4-1-styled-jsx" class="headerlink" title="4.1  styled-jsx"></a>4.1  styled-jsx</h3><p>接下来，我们看一下如何使用styled-jsx。将<code>about.js</code>的内容替换如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'next/link'</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">'next/router'</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">'@/components/layout'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> About = withRouter(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;Layout&gt;</span><br><span class="line">            &lt;div className=<span class="string">"container"</span>&gt;</span><br><span class="line">                &lt;h1&gt;&#123;props.router.query.title&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                这是About页面</span></span><br><span class="line"><span class="regexp">            &#123;flag &amp;&amp; &lt;Button type="primary"&gt;Primary&lt;/</span>Button&gt;&#125;</span><br><span class="line">                &lt;Link href=<span class="string">"/"</span>&gt;</span><br><span class="line">                    &lt;a&gt;首页&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>Link&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            &lt;style jsx&gt;</span></span><br><span class="line"><span class="regexp">                &#123;`</span></span><br><span class="line"><span class="regexp">                h1&#123;</span></span><br><span class="line"><span class="regexp">                    background-color:blue;</span></span><br><span class="line"><span class="regexp">                    font-size:60px;</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">                .container&#123;</span></span><br><span class="line"><span class="regexp">                    color:red;</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">                `&#125;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>style&gt;</span><br><span class="line">        &lt;<span class="regexp">/Layout&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp">export default About</span></span><br></pre></td></tr></table></figure><p>如果需要为导航增加样式，需要修改<code>header.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'next/link'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> linkStyle = &#123;</span><br><span class="line">    marginRight: <span class="number">15</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Header = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;Link href=<span class="string">"/"</span>&gt;</span><br><span class="line">            &lt;a style=&#123;linkStyle&#125;&gt;Home&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Link&gt;</span><br><span class="line">        &lt;Link href=<span class="string">"/about"</span>&gt;</span><br><span class="line">            &lt;a style=&#123;linkStyle&#125;&gt;About&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Link&gt;</span><br><span class="line"></span><br><span class="line">        &lt;style jsx&gt;</span><br><span class="line">            &#123;<span class="string">`</span></span><br><span class="line"><span class="string">                a&#123;</span></span><br><span class="line"><span class="string">                    color:#EF141F;</span></span><br><span class="line"><span class="string">                    font-size:26px;</span></span><br><span class="line"><span class="string">                    line-height:40px;</span></span><br><span class="line"><span class="string">                    text-decoration:none;</span></span><br><span class="line"><span class="string">                    padding:0 10px;</span></span><br><span class="line"><span class="string">                    text-transform:uppercase;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                a:hover&#123;</span></span><br><span class="line"><span class="string">                    opacity:0.8;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            `</span>&#125;</span><br><span class="line">        &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Header;</span><br></pre></td></tr></table></figure><h3 id="4-2-全局样式"><a href="#4-2-全局样式" class="headerlink" title="4.2  全局样式"></a>4.2  全局样式</h3><p>当我们需要添加一些全局的样式，比如rest.css或者鼠标悬浮在a标签上时出现下划线，这时候我们只需要在<code>style-jsx</code>标签上增加<code>global</code>关键词就行了，我们修改<code>Layout.js</code>如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./header'</span>;</span><br><span class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">'./footer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> layoutStyle = &#123;</span><br><span class="line">    margin: <span class="number">20</span>,</span><br><span class="line">    padding: <span class="number">20</span>,</span><br><span class="line">    border: <span class="string">'1px solid #DDD'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Layout = <span class="function">(<span class="params">props</span>) =&gt;</span> (</span><br><span class="line">    &lt;div style=&#123;layoutStyle&#125;&gt;</span><br><span class="line">        &lt;Header /&gt;</span><br><span class="line">        &#123;props.children&#125;</span><br><span class="line">        &lt;Footer /&gt;</span><br><span class="line">        &lt;style jsx global&gt;</span><br><span class="line">            &#123;<span class="string">`</span></span><br><span class="line"><span class="string">                a:hover&#123;</span></span><br><span class="line"><span class="string">                    text-decoration:underline;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            `</span>&#125;</span><br><span class="line">        &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Layout</span><br></pre></td></tr></table></figure><h3 id="4-3-使用Less-Sass-Css等"><a href="#4-3-使用Less-Sass-Css等" class="headerlink" title="4.3  使用Less/Sass/Css等"></a>4.3  使用Less/Sass/Css等</h3><p>支持用<code>.css</code>, <code>.scss</code>, <code>.less</code> or <code>.styl</code>，需要配置默认文件 <code>next.config.js</code></p><p>下载安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add @zeit/next-less less    </span><br><span class="line">yarn add @zeit/next-css            </span><br><span class="line">yarn add @zeit/next-sass node-sass</span><br></pre></td></tr></table></figure><p>修改根目录下创建<code>next.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> withCss = <span class="built_in">require</span>(<span class="string">'@zeit/next-css'</span>)</span><br><span class="line"><span class="keyword">const</span> withLess = <span class="built_in">require</span>(<span class="string">'@zeit/next-less'</span>)</span><br><span class="line"><span class="keyword">const</span> withSass = <span class="built_in">require</span>(<span class="string">"@zeit/next-sass"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> style = [</span><br><span class="line">  [withCss, &#123;</span><br><span class="line"></span><br><span class="line">  &#125;],</span><br><span class="line">  [withLess, &#123;</span><br><span class="line">    cssModules: <span class="literal">true</span></span><br><span class="line">  &#125;],</span><br><span class="line">  [withSass,&#123;</span><br><span class="line">    <span class="comment">// cssModules: true</span></span><br><span class="line">  &#125;],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在<code>pages</code>中创建<code>styles.less</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@font-size: 50px;</span><br><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: @font-size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在about.js中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lessobj <span class="keyword">from</span> <span class="string">"./styles.less"</span></span><br><span class="line"></span><br><span class="line">&lt;p className=&#123;lessobj.example&#125;&gt;pppp&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-静态文件服务"><a href="#5-静态文件服务" class="headerlink" title="5.静态文件服务"></a>5.静态文件服务</h2><h3 id="5-1-图片的使用"><a href="#5-1-图片的使用" class="headerlink" title="5.1 图片的使用"></a>5.1 图片的使用</h3><p>项目中用到的一些静态资源，包括图片、样式文件、字体图标、音频视频等文件都应该放到一个static目录下。</p><p>在根目录下新建文件夹叫<code>static</code>。通过代码可以通过<code>/static/</code>来引入相关的静态资源。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"../static/images/timg1.jpg"</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="5-2-字体图标的使用"><a href="#5-2-字体图标的使用" class="headerlink" title="5.2 字体图标的使用"></a>5.2 字体图标的使用</h3><p>从Font AweSome官网下载字体图标(压缩包)，然后将里面的fonts和css文件夹拷贝到项目static目录下</p><p><a href="https://fontawesome.dashgame.com/" target="_blank" rel="noopener">https://fontawesome.dashgame.com/</a></p><p><img src="/" alt="1583649395753" class="lazyload" data-src="/2020/03/22/nextJS/1583649395753.png"></p><p>安装next-fonts和next-images</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add next-fonts</span><br><span class="line">yarn add next-images</span><br></pre></td></tr></table></figure><p>在next.config.js中进行配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="keyword">const</span> withCss = <span class="built_in">require</span>(<span class="string">'@zeit/next-css'</span>)</span><br><span class="line"><span class="keyword">const</span> withLess = <span class="built_in">require</span>(<span class="string">'@zeit/next-less'</span>)</span><br><span class="line"><span class="keyword">const</span> withSass = <span class="built_in">require</span>(<span class="string">"@zeit/next-sass"</span>);</span><br><span class="line"><span class="keyword">const</span> withFonts = <span class="built_in">require</span>(<span class="string">'next-fonts'</span>)</span><br><span class="line"><span class="keyword">const</span> withImages = <span class="built_in">require</span>(<span class="string">'next-images'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> withPlugins = <span class="built_in">require</span>(<span class="string">"next-compose-plugins"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> style = [</span><br><span class="line">  [withCss, &#123;</span><br><span class="line"></span><br><span class="line">  &#125;],</span><br><span class="line">  [withLess, &#123;</span><br><span class="line">    cssModules: <span class="literal">true</span></span><br><span class="line">  &#125;],</span><br><span class="line">  [withSass,&#123;</span><br><span class="line">    <span class="comment">// cssModules: true</span></span><br><span class="line">  &#125;],</span><br><span class="line">  [withFonts, &#123;</span><br><span class="line"></span><br><span class="line">  &#125;],</span><br><span class="line">  [withImages, &#123;</span><br><span class="line"></span><br><span class="line">  &#125;],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在about.js中使用字体图标</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'@/static/css/font-awesome.css'</span></span><br><span class="line"></span><br><span class="line">&lt;span className=<span class="string">"fa fa-star"</span>&gt;字体图标&lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-Next的SSR"><a href="#6-Next的SSR" class="headerlink" title="6.Next的SSR"></a>6.Next的SSR</h2><h3 id="6-1-SSR介绍"><a href="#6-1-SSR介绍" class="headerlink" title="6.1 SSR介绍"></a>6.1 SSR介绍</h3><p>服务器端渲染(SSR: Server Side Rendering)，react前端做好的界面，后台把界面渲染成html之后，在传给前台。</p><p>好处：</p><blockquote><p>1.SEO优化</p><p>2.加快首屏渲染速度</p></blockquote><h3 id="6-2-远程数据获取"><a href="#6-2-远程数据获取" class="headerlink" title="6.2 远程数据获取"></a>6.2 远程数据获取</h3><p>Next.js提供了一个标准的获取远程数据的接口:<code>getInitialProps</code>，通过<code>getInitialProps</code>我们可以获取到远程数据并赋值给页面的props。<code>getInitialProps</code>即可以用在服务端也可以用在前端。</p><p>首先，我们安装<a href="https://github.com/developit/unfetch" target="_blank" rel="noopener">isomorphic-unfetch</a>，它是基于fetch实现的一个网络请求库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add isomorphic-unfetch</span><br></pre></td></tr></table></figure><h4 id="6-2-1-无状态组件定义getInitialProps"><a href="#6-2-1-无状态组件定义getInitialProps" class="headerlink" title="6.2.1  无状态组件定义getInitialProps"></a>6.2.1  无状态组件定义getInitialProps</h4><p>新建home.js，然后我们修改<code>home.js</code>如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'next/link'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">'@/components/layout'</span>;</span><br><span class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">'isomorphic-unfetch'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;Layout&gt;</span><br><span class="line">            &lt;h1&gt;Marvel TV Shows&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">            &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">                &#123;props.shows.map((&#123; show &#125;) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">                    return (</span></span><br><span class="line"><span class="regexp">                        &lt;li key=&#123;show.id&#125;&gt;</span></span><br><span class="line"><span class="regexp">                            &#123;show.name&#125;</span></span><br><span class="line"><span class="regexp">                        &lt;/</span>li&gt;</span><br><span class="line">                    );</span><br><span class="line">                &#125;)&#125;</span><br><span class="line">            &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Button&gt;按钮&lt;/</span>Button&gt;</span><br><span class="line">        &lt;<span class="regexp">/Layout&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Home.getInitialProps = async function () &#123;</span></span><br><span class="line"><span class="regexp">    const res = await fetch('https:/</span><span class="regexp">/api.tvmaze.com/</span>search/shows?q=marvel<span class="string">');</span></span><br><span class="line"><span class="string">    const data = await res.json();</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">        shows: data</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default Home;</span></span><br></pre></td></tr></table></figure><h4 id="6-2-2-有状态组件定义getInitialProps"><a href="#6-2-2-有状态组件定义getInitialProps" class="headerlink" title="6.2.2  有状态组件定义getInitialProps"></a>6.2.2  有状态组件定义getInitialProps</h4><p>新建user.js，修改内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">'@/components/layout'</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">'isomorphic-unfetch'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">async</span> getInitialProps(context) &#123;</span><br><span class="line">        <span class="keyword">const</span> id = <span class="number">43519</span>;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">`https://api.tvmaze.com/shows/<span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">const</span> show = <span class="keyword">await</span> res.json();</span><br><span class="line">        <span class="keyword">return</span> &#123; show &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">var</span> html = <span class="keyword">this</span>.props.show.summary;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Layout&gt;</span><br><span class="line">                &lt;h1&gt;&#123;<span class="keyword">this</span>.props.show.name&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div&gt;&#123;this.props.show.summary&#125;&lt;/</span>div&gt;</span><br><span class="line">                &lt;img src=&#123;<span class="keyword">this</span>.props.show.image.medium&#125; /&gt;</span><br><span class="line">            &lt;<span class="regexp">/Layout&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="6-3-getInitialProps的原理"><a href="#6-3-getInitialProps的原理" class="headerlink" title="6.3 getInitialProps的原理"></a>6.3 getInitialProps的原理</h3><p>当页面渲染时加载数据，我们使用了一个异步方法<code>getInitialProps</code>。它能异步获取数据，并绑定在组件的<code>props</code>上。</p><p>getInitialProps()能够在服务的运行，也能够在client运行。当页面第一次加载时，服务器收到请求，getInitialProps()会执行，getInitialProps()返回的数据，会序列化后添加到 <code>window.__NEXT_DATA__.props</code>上，写入HTML源码里，类似于<script>window.<strong>NEXT_DATA</strong>={props:{xxx}}</script>。这样服务端的getInitialProps()就实现了把数据传送给了客户端。</p><p>客户端的收到了HTML源码，有了数据，想做什么都可以。比如可以拿着window.<strong>NEXT_DATA</strong>.props的数据来初始化React组件的props属性。具体过程如下：</p><blockquote><p>当页面是用户通过超链接跳转过去，而不是用户输入网址或刷新来访问的，这时候是纯客户端的行为，没有HTTP请求发出去。用户如果通过超链接跳转回这个页面，客户端的getInitialProps()开始起作用了，它会自动读取HTML源码里 window.<strong>NEXT_DATA</strong>.props里的数据并作为React组件的props。</p><p>当页面初次加载或者刷新页面时，<code>getInitialProps</code>只会加载在服务端。只有当路由跳转时，客户端才会执行<code>getInitialProps</code>。</p></blockquote><p><strong>注意：<code>getInitialProps</code>将不能使用在子组件中。只能使用在<code>pages</code>页面中。</strong></p><h3 id="6-4-getInitialProps的入参"><a href="#6-4-getInitialProps的入参" class="headerlink" title="6.4  getInitialProps的入参"></a>6.4  getInitialProps的入参</h3><p>Next对React组件的getInitialProps生命周期方法做了改造，传入一个上下文对象，该对象在服务端渲染和客户端渲染时，具有不同的属性：</p><ul><li>req: HTTP请求对象（服务端渲染独有）</li><li>res: HTTP响应对象（服务端渲染独有）</li><li>pathname: URL中的路径部分</li><li>query：URL中的查询字符串部分解析出的对象</li><li>err：错误对象，如果在渲染时发生了错误</li><li>xhr：XMLHttpRequest对象（客户端渲染独有）</li></ul>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>flux和redux</title>
      <link href="/2020/02/22/flux%E5%92%8Credux/"/>
      <url>/2020/02/22/flux%E5%92%8Credux/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Flux和Redux"><a href="#1-Flux和Redux" class="headerlink" title="1.Flux和Redux"></a>1.Flux和Redux</h1><h2 id="1-1-常用软件架构思想"><a href="#1-1-常用软件架构思想" class="headerlink" title="1.1 常用软件架构思想"></a>1.1 常用软件架构思想</h2><h3 id="1-1-1-MVC"><a href="#1-1-1-MVC" class="headerlink" title="1.1.1 MVC"></a>1.1.1 MVC</h3><p><strong>Model</strong></p><blockquote><p>Model负责保存应用数组，和后端交互同步应用数据，或校验数据。Model主要与业务数据相关，与应用内交互状态无关</p></blockquote><p><strong>View</strong></p><blockquote><p>View是Model的可视化，表示当前状态的视图。前端View负责构建和维护DOM元素。更新Model的实际任务是在Controller上。用户可以与View交互，包括读取和编辑Model，在Model中获取或设置属性值。<em>一个view通常对应一个model，所以在世实际开发过程中，会面临多个view对应多个model的状况</em></p></blockquote><p><strong>Controller</strong></p><blockquote><p>Controller负责连接view和model，model的任何变化会应用到view中，view的操作会痛殴controller应用到model中。</p></blockquote><p>MVC有两个很明显的问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.m层和v层直接打交道，导致这两层耦合度高</span><br><span class="line">2.因为所有逻辑都写在c层，导致c层特别臃肿</span><br></pre></td></tr></table></figure><p><img src="/" alt="1553222527572" class="lazyload" data-src="/2020/02/22/flux%E5%92%8Credux/1553222527572.png"></p><h3 id="1-1-2-MVVM"><a href="#1-1-2-MVVM" class="headerlink" title="1.1.2 MVVM"></a>1.1.2 MVVM</h3><p>近年来前端一个明显的开发趋势就是架构从传统的 MVC 模式向 MVVM 模式迁移。在传统的 MVC 下，当前前端和后端发生数据交互后会刷新整个页面，从而导致比较差的用户体验。因此我们通过 Ajax 的方式和网关 REST API 作通讯，异步的刷新页面的某个区块，来优化和提升体验。</p><p><img src="/" alt="1553222636183" class="lazyload" data-src="/2020/02/22/flux%E5%92%8Credux/1553222636183.png"></p><p>在 MVVM 框架中，View(视图) 和 Model(数据) 是不可以直接通讯的，在它们之间存在着 ViewModel 这个中间介充当着观察者的角色。当用户操作 View(视图)，ViewModel 感知到变化，然后通知 Model 发生相应改变；反之当 Model(数据) 发生改变，ViewModel 也能感知到变化，使 View 作出相应更新。这个一来一回的过程就是我们所熟知的双向绑定。</p><h3 id="1-1-3-Flux"><a href="#1-1-3-Flux" class="headerlink" title="1.1.3 Flux"></a>1.1.3 Flux</h3><p>Flux 是一种架构思想，专门解决软件的结构问题。它跟<a href="http://www.ruanyifeng.com/blog/2007/11/mvc.html" target="_blank" rel="noopener">MVC 架构</a>是同一类东西，但是更加<a href="http://www.infoq.com/news/2014/05/facebook-mvc-flux" target="_blank" rel="noopener">简单和清晰</a>。</p><p>首先，Flux将一个应用分成四个部分。</p><blockquote><ul><li><strong>View</strong>： 视图层</li><li><strong>Action</strong>（动作）：视图层发出的消息（比如mouseClick）。然后在mouseClick中将出现数据从应用程序发送到store的有效信息负载。它是 store 数据的<strong>唯一</strong>来源。一般来说你会通过 Dispatcher派发器将 action 传到 store。</li><li><strong>Dispatcher</strong>（派发器）：用来接收Actions、执行回调函数</li><li><strong>Store</strong>（数据层）：用来存放应用的状态，一旦发生变动，就提醒Views要更新页面</li></ul></blockquote><p><strong>Flux 的最大特点，就是数据的”单向流动”。</strong></p><blockquote><ol><li>用户访问 View</li><li>View 发出用户的 Action(数据从应用程序发送到store的有效信息负载)</li><li>Dispatcher 收到 Action，要求 Store 进行相应的更新</li><li>Store 更新后，发出一个”change”事件</li><li>View 收到”change”事件后，更新页面</li></ol></blockquote><p><img src="/" alt="1553222968163" class="lazyload" data-src="/2020/02/22/flux%E5%92%8Credux/1553222968163.png"></p><p><img src="/" alt="1553223019430" class="lazyload" data-src="/2020/02/22/flux%E5%92%8Credux/1553223019430.png"></p><h2 id="1-2-Redux"><a href="#1-2-Redux" class="headerlink" title="1.2 Redux"></a>1.2 Redux</h2><p><a href="http://cn.redux.js.org/" target="_blank" rel="noopener">http://cn.redux.js.org/</a></p><h3 id="1-2-1-Redux介绍"><a href="#1-2-1-Redux介绍" class="headerlink" title="1.2.1 Redux介绍"></a>1.2.1 Redux介绍</h3><p>我们把Flux看做一个框架的理念的话，Redux是Flux的一种实现。Redux是SPA单页面应用程序中多个组件之间共享数据的一种方式。</p><blockquote><p>Flux的基本原则是“单向数据流”，Redux在此基础上强调三个基本原则：<br>1.唯一数据源 ：唯一数据源指的是应用的状态数据应该只存储在唯一的一个Store上。<br>2.保持状态只读 ： 保持状态只读，就是说不能去直接修改状态，要修改Store的状态，必须要通过派发一个action对象完成。<br>3.数据改变只能通过纯函数完成 ：这里所说的纯函数就是把Reducer，Reducer描述了state状态如何修改。Redux这个名字的前三个字母Red代表的就是Reducer，其实Redux名字的含义就是Reducer+Flux。</p></blockquote><p><img src="/" alt="1553225378607" class="lazyload" data-src="/2020/02/22/flux%E5%92%8Credux/1553225378607.png"></p><h3 id="1-2-2-Redux的基本使用"><a href="#1-2-2-Redux的基本使用" class="headerlink" title="1.2.2 Redux的基本使用"></a>1.2.2 Redux的基本使用</h3><p>React和Redux事实上是两个独立的产品，一个应用可以使用React而不使用Redux，也可以使用Redux而不使用React，但是如果两者结合使用，没有理由不使用一个名为react-dedux的库，这个库能大大简化代码的书写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install redux --save</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">#1.main.js</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>                        <span class="comment">// 创建组件、虚拟DOM元素，生命周期</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>      <span class="comment">// 把创建好的 组件 和 虚拟DOM 放到页面上展示的</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./app.jsx"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.创建reducer</span></span><br><span class="line"><span class="comment">    这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数.。描述了 action 如何把 state 转变成下一个 state。</span></span><br><span class="line"><span class="comment">    state 的形式取决于你，可以是基本类型、数组、对象、甚至是 Immutable.js 生成的数据结构。</span></span><br><span class="line"><span class="comment">    要点:</span></span><br><span class="line"><span class="comment">    a.当 state 变化时需要返回全新的对象，而不是修改传入的参数。</span></span><br><span class="line"><span class="comment">    b.在default情况下返回旧的 state。遇到未知的 action 时，一定要返回旧的 state</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = <span class="number">0</span>, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'ADD'</span>:</span><br><span class="line">            <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'MINUS'</span>:</span><br><span class="line">            <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.声明 actions</span></span><br><span class="line"><span class="comment">//action 是改变 state 的唯一途径，是一个普通的 javascript 对象，它描述了一个行为且是改变 state 的唯一途径。从用户UI操作事件、网络请求回调和 WebSocket 等其他地方获得的数据，最终都会通过 dispatch 函数调用一个 action，从而改变对应的数据。action 必须带有 type 指明具体的行为名称，且能附带上额外的信息。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>:<span class="string">'ADD'</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">minusFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>:<span class="string">'MINUS'</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.创建 Redux store 来存放应用的状态。</span></span><br><span class="line"><span class="comment">// store的职责：</span></span><br><span class="line"><span class="comment">//a.维持应用的 state；</span></span><br><span class="line"><span class="comment">//b.提供 getState() 方法获取 state；</span></span><br><span class="line"><span class="comment">//c.提供 dispatch(action) 方法更新 state；</span></span><br><span class="line"><span class="comment">//d.通过 subscribe(listener) 注册监听器;</span></span><br><span class="line"><span class="comment">//e.通过 subscribe(listener) 返回的函数注销监听器。</span></span><br><span class="line"><span class="keyword">let</span> store = createStore(counter)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.订阅更新，监听state的变化</span></span><br><span class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(store.getState()))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.触发action</span></span><br><span class="line">store.dispatch(addFn())  <span class="comment">// 1</span></span><br><span class="line">store.dispatch(addFn())  <span class="comment">// 2</span></span><br><span class="line">store.dispatch(minusFn())  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.渲染页面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span> <span class="attr">addFn</span>=<span class="string">&#123;addFn&#125;</span> <span class="attr">minusFn</span>=<span class="string">&#123;minusFn&#125;/</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</span><br><span class="line">&#125;</span><br><span class="line">render()</span><br><span class="line"><span class="comment">// 每当state状态发生变化的时候，重新渲染页面</span></span><br><span class="line">store.subscribe(render)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">#2.app.jsx</span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> store=<span class="keyword">this</span>.props.store</span><br><span class="line">        <span class="keyword">const</span> addFn=<span class="keyword">this</span>.props.addFn</span><br><span class="line">        <span class="keyword">const</span> minusFn=<span class="keyword">this</span>.props.minusFn</span><br><span class="line">        <span class="keyword">const</span> init=store.getState()</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">                &lt;h1&gt;你好吗？&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &#123;&lt;p&gt;现在的总数是：&#123;store.getState()&#125;&lt;/</span>p&gt;&#125;</span><br><span class="line">                &#123;&lt;button onClick=&#123; ()=&gt;store.dispatch( addFn() ) &#125;&gt;加<span class="number">1</span>&lt;<span class="regexp">/button&gt;&#125;</span></span><br><span class="line"><span class="regexp">                &#123;&lt;button onClick=&#123; ()=&gt;store.dispatch( minusFn() ) &#125;&gt;减1&lt;/</span>button&gt;&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-3-Redux异步处理"><a href="#1-2-3-Redux异步处理" class="headerlink" title="1.2.3 Redux异步处理"></a>1.2.3 Redux异步处理</h3><p> redux默认情况下只处理同步，想要处理异步，需要上面安装的redux-thunk插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">npm install redux-thunk -S</span><br><span class="line"></span><br><span class="line">#1.修改main.js 代码 </span><br><span class="line"><span class="keyword">import</span> &#123; createStore ,applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span></span><br><span class="line"><span class="comment">//使用applyMiddleware在创建store的时候开启中间件</span></span><br><span class="line"><span class="keyword">const</span> store=createStore(couter ,applyMiddleware(thunk))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>:<span class="string">'ADD'</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">minusFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>:<span class="string">'MINUS'</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//redux-thunk中间件允许action creator返回一个函数，这个函数会接收dispatch和getState为参数。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addAsynFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span>=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            dispatch(addFn())</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span> <span class="attr">addFn</span>=<span class="string">&#123;addFn&#125;</span> <span class="attr">minusFn</span>=<span class="string">&#123;minusFn&#125;</span> <span class="attr">addAsyncFn</span>=<span class="string">&#123;addAsynFn&#125;/</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</span><br><span class="line">&#125;</span><br><span class="line">                    </span><br><span class="line">#2.修改app.jsx代码</span><br><span class="line">render() &#123;</span><br><span class="line">        <span class="keyword">const</span> store=<span class="keyword">this</span>.props.store</span><br><span class="line">        <span class="keyword">const</span> addFn=<span class="keyword">this</span>.props.addFn</span><br><span class="line">        <span class="keyword">const</span> minusFn=<span class="keyword">this</span>.props.minusFn</span><br><span class="line">        <span class="keyword">const</span> addAsynFn=<span class="keyword">this</span>.props.addAsyncFn</span><br><span class="line">        <span class="built_in">console</span>.log(addAsynFn)</span><br><span class="line">        <span class="keyword">const</span> init=store.getState()</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">                &lt;h1&gt;你好吗？&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &#123;&lt;p&gt;现在的总数是：&#123;store.getState()&#125;&lt;/</span>p&gt;&#125;</span><br><span class="line">                &#123;&lt;button onClick=&#123; ()=&gt;store.dispatch( addFn() ) &#125;&gt;加<span class="number">1</span>&lt;<span class="regexp">/button&gt;&#125;</span></span><br><span class="line"><span class="regexp">                &#123;&lt;button onClick=&#123; ()=&gt;store.dispatch( minusFn() ) &#125;&gt;减1&lt;/</span>button&gt;&#125;</span><br><span class="line">                &#123;&lt;button onClick=&#123; ()=&gt;store.dispatch( addAsynFn() ) &#125;&gt;异步加<span class="number">1</span>&lt;<span class="regexp">/button&gt;&#125;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-4-抽离main-js中的reducer和actions到单独模块"><a href="#1-2-4-抽离main-js中的reducer和actions到单独模块" class="headerlink" title="1.2.4 抽离main.js中的reducer和actions到单独模块"></a>1.2.4 抽离main.js中的reducer和actions到单独模块</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#1.reducers/index.js</span><br><span class="line"><span class="comment">//1.创建reducer,描述了如何根据action将state修改为下一个state</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = <span class="number">0</span>, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'ADD'</span>:</span><br><span class="line">            <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'MINUS'</span>:</span><br><span class="line">            <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#2.actions/action.js</span><br><span class="line"><span class="comment">//2.声明 actions</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>:<span class="string">'ADD'</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">minusFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>:<span class="string">'MINUS'</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addAsynFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span>=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            dispatch(addFn())</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#3.main.js</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>                        <span class="comment">// 创建组件、虚拟DOM元素，生命周期</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>      <span class="comment">// 把创建好的 组件 和 虚拟DOM 放到页面上展示的</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore,applyMiddleware  &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span></span><br><span class="line"><span class="keyword">import</span> &#123; counter &#125; <span class="keyword">from</span> <span class="string">'./reducers/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123;addFn,minusFn,addAsynFn&#125; <span class="keyword">from</span> <span class="string">'./actions/action'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./app.jsx"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.创建 Redux store 来存放应用的状态。store对象的API 有 &#123; subscribe, dispatch, getState &#125;。</span></span><br><span class="line"><span class="keyword">let</span> store = createStore(counter,applyMiddleware(thunk))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.订阅更新，监听state的变化</span></span><br><span class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(store.getState()))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.触发action</span></span><br><span class="line">store.dispatch(addFn())  <span class="comment">// 1</span></span><br><span class="line">store.dispatch(addFn())  <span class="comment">// 2</span></span><br><span class="line">store.dispatch(minusFn())  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.渲染页面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span> <span class="attr">addFn</span>=<span class="string">&#123;addFn&#125;</span> <span class="attr">minusFn</span>=<span class="string">&#123;minusFn&#125;</span> <span class="attr">addAsyncFn</span>=<span class="string">&#123;addAsynFn&#125;/</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</span><br><span class="line">&#125;</span><br><span class="line">render()</span><br><span class="line"><span class="comment">// 每当state状态发生变化的时候，重新渲染页面</span></span><br><span class="line">store.subscribe(render)</span><br><span class="line">    </span><br><span class="line">#4. app.jsx 没有变化</span><br></pre></td></tr></table></figure><h3 id="1-2-5-react和redux的结合使用"><a href="#1-2-5-react和redux的结合使用" class="headerlink" title="1.2.5 react和redux的结合使用"></a>1.2.5 react和redux的结合使用</h3><blockquote><p>1.插件：react-redux</p><p>2.不适用subscribe发布事件</p><p>3.提供provider和connect两个接口</p></blockquote><p>provider作用：如果我们手动将state对象一层一层的传入容器组件应用。小还好说，大应用深层的组件简直累死了，绝对让你传到怀疑人生。react-redux提供了Provider组件让我们省了不少功夫，用法就是在我们根组件外部嵌套一层Provider，传入store （使用全局的store有风险）这样所以的子组件都可以开心地拿到state了 。  </p><p>Provider接受store作为其props，并声明为context的属性之一 。</p><p>connect用于连接 React 组件与 Redux store。连接操作不会改变原来的组件类。反而返回一个新的已与 Redux store 连接的组件类。</p><p>不过现在我们仅仅是通过展示组件生成了一个容器组件并且将它们连接了起来，但是容器组件中并没有数据和逻辑，只是一具空壳毫无意义，所以我们还需要向这个connect函数中传入两个参数。mapStateToProps负责将state的数据映射到展示组件的this.props。mapDispatchToProps负责定义发送action的函数映射到展示组件的this.props。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-redux</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#1.main.js</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>                        <span class="comment">// 创建组件、虚拟DOM元素，生命周期</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>      <span class="comment">// 把创建好的 组件 和 虚拟DOM 放到页面上展示的</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore,applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span></span><br><span class="line"><span class="keyword">import</span> &#123; counter &#125; <span class="keyword">from</span> <span class="string">'./reducers/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./app.jsx"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.创建 Redux store 来存放应用的状态。store对象的API 有 &#123; subscribe, dispatch, getState &#125;。</span></span><br><span class="line"><span class="keyword">let</span> store = createStore(counter,applyMiddleware(thunk))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.订阅更新，监听state的变化</span></span><br><span class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(store.getState()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt; App /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">    , document.getElementById('app'));</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">#2.app.jsx</span></span><br><span class="line"><span class="regexp">import React, &#123; Component &#125; from 'react';</span></span><br><span class="line"><span class="regexp">import &#123; connect &#125; from 'react-redux'</span></span><br><span class="line"><span class="regexp">import &#123;addFn,minusFn,addAsynFn&#125; from './</span>actions/action<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class App extends Component &#123;</span></span><br><span class="line"><span class="string">    constructor(props)&#123;</span></span><br><span class="line"><span class="string">        super(props)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    render() &#123;</span></span><br><span class="line"><span class="string">        const num=this.props.num</span></span><br><span class="line"><span class="string">        const addFn=this.props.addFn</span></span><br><span class="line"><span class="string">        const minusFn=this.props.minusFn</span></span><br><span class="line"><span class="string">        const addAsynFn=this.props.addAsynFn</span></span><br><span class="line"><span class="string">        console.log(addAsynFn)</span></span><br><span class="line"><span class="string">        return (</span></span><br><span class="line"><span class="string">            &lt;div className="App"&gt;</span></span><br><span class="line"><span class="string">                &lt;h1&gt;你好吗？&lt;/h1&gt;</span></span><br><span class="line"><span class="string">                &#123;&lt;p&gt;现在的总数是：&#123;num&#125;&lt;/p&gt;&#125;</span></span><br><span class="line"><span class="string">                &#123;&lt;button onClick=&#123; addFn &#125;&gt;加1&lt;/button&gt;&#125;</span></span><br><span class="line"><span class="string">                &#123;&lt;button onClick=&#123; minusFn &#125;&gt;减1&lt;/button&gt;&#125;</span></span><br><span class="line"><span class="string">                &#123;&lt;button onClick=&#123; addAsynFn &#125;&gt;异步加1&lt;/button&gt;&#125;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        );</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//将state状态映射到属性里面,之后可以通过props获取</span></span><br><span class="line"><span class="string">const mapStatetoProps=(state)=&gt;&#123;</span></span><br><span class="line"><span class="string">    return &#123;num:state&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//addFn 自动有了dispatch的功能 onClick=&#123;addFn&#125; ; addFn  minusFn  minusFn会被映射到props里面</span></span><br><span class="line"><span class="string">const mapDispatchToProps=&#123;addFn,minusFn,addAsynFn&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//为App组件提供数据和逻辑。mapStateToProps负责将state的数据映射到展示组件的this.props。mapDispatchToProps负责定义发送action的函数映射到展示组件的this.props</span></span><br><span class="line"><span class="string">App=connect(mapStatetoProps,mapDispatchToProps)(App)</span></span><br><span class="line"><span class="string">export default App;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#3.其他 reducers/index.js 和 actions/action.js 无变化</span></span><br></pre></td></tr></table></figure><h3 id="1-2-6-多个reducer之间的合并问题"><a href="#1-2-6-多个reducer之间的合并问题" class="headerlink" title="1.2.6 多个reducer之间的合并问题"></a>1.2.6 多个reducer之间的合并问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">#1. reducers/counter.js</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = <span class="number">0</span>, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'ADD'</span>:</span><br><span class="line">            <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'MINUS'</span>:</span><br><span class="line">            <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#2. reducers/city.js</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">location</span>(<span class="params">state = <span class="string">'无锡'</span>, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'CHOOSECITY'</span>:</span><br><span class="line">            <span class="keyword">return</span> action.city</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#3. reducers/index.js</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;combineReducers&#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//redux提供的用于多个reducer合并的方法</span></span><br><span class="line"><span class="comment">// 里面是个对象。罗列需要合并的reducer</span></span><br><span class="line"><span class="keyword">import</span> counter <span class="keyword">from</span> <span class="string">'./counter'</span>;  <span class="comment">//项目中需要的reducer</span></span><br><span class="line"><span class="keyword">import</span> city <span class="keyword">from</span> <span class="string">'./city'</span>;   <span class="comment">//项目中需要的reducer</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(combineReducers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;counter,city&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#4.actions/action.js</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>:<span class="string">'ADD'</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">minusFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>:<span class="string">'MINUS'</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*该action接收参数，在dispatch当前action的时候可以传递参数*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">changeCityFn</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>:<span class="string">'CHOOSECITY'</span>,<span class="attr">city</span>:name &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addAsynFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span>=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            dispatch(addFn())</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#5. main.js</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>                        <span class="comment">// 创建组件、虚拟DOM元素，生命周期</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>      <span class="comment">// 把创建好的 组件 和 虚拟DOM 放到页面上展示的</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore,applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducers/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./app.jsx"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = createStore(reducer,applyMiddleware(thunk))</span><br><span class="line"></span><br><span class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(store.getState()))</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    (<span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt; <span class="attr">App</span> /&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/Provider&gt;)</span></span><br><span class="line"><span class="regexp">    , document.getElementById('app'));</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">#4. app.jsx </span></span><br><span class="line"><span class="regexp">import React from 'react'</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">import &#123; connect &#125; from 'react-redux'</span></span><br><span class="line"><span class="regexp">import &#123;addFn,minusFn,addAsynFn,changeCityFn&#125; from '../</span>actions/action<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class App extends React.Component &#123;</span></span><br><span class="line"><span class="string">    constructor(props, context) &#123;</span></span><br><span class="line"><span class="string">        super(props,context)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    render() &#123;</span></span><br><span class="line"><span class="string">        const num=this.props.num</span></span><br><span class="line"><span class="string">        const city = this.props.city</span></span><br><span class="line"><span class="string">        const addFn=this.props.addFn</span></span><br><span class="line"><span class="string">        const minusFn=this.props.minusFn</span></span><br><span class="line"><span class="string">        const addAsynFn=this.props.addAsynFn</span></span><br><span class="line"><span class="string">        const changeCityFn=this.props.changeCityFn</span></span><br><span class="line"><span class="string">        return &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;你好吗？&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;&#123;city&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &#123;&lt;p&gt;现在的总数是：&#123;num&#125;&lt;/p&gt;&#125;</span></span><br><span class="line"><span class="string">            &#123;&lt;button onClick=&#123; addFn &#125;&gt;加1&lt;/button&gt;&#125;</span></span><br><span class="line"><span class="string">            &#123;&lt;button onClick=&#123; minusFn &#125;&gt;减1&lt;/button&gt;&#125;</span></span><br><span class="line"><span class="string">            &#123;&lt;button onClick=&#123; addAsynFn &#125;&gt;异步加1&lt;/button&gt;&#125;</span></span><br><span class="line"><span class="string">            &#123;/* 这里通过箭头函数dispatch对应的方法，并传递参数 */&#125;</span></span><br><span class="line"><span class="string">            &#123;&lt;button onClick=&#123; ()=&gt;&#123;</span></span><br><span class="line"><span class="string">                changeCityFn("苏州")</span></span><br><span class="line"><span class="string">            &#125; &#125;&gt;改变城市&lt;/button&gt;&#125;</span></span><br><span class="line"><span class="string">            这是home</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//将state状态映射到属性里面,之后可以通过props获取</span></span><br><span class="line"><span class="string">const mapStatetoProps=(state)=&gt;&#123;</span></span><br><span class="line"><span class="string">    return &#123;num:state.counter,city:state.city&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//addFn 自动有了dispatch的功能 onClick=&#123;addFn&#125; ; addFn  minusFn  minusFn会被映射到props里面</span></span><br><span class="line"><span class="string">const mapDispatchToProps=&#123;addFn,minusFn,addAsynFn,changeCityFn&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//为App组件提供数据和逻辑。mapStateToProps负责将state的数据映射到展示组件的this.props。mapDispatchToProps负责定义发送action的函数映射到展示组件的this.props</span></span><br><span class="line"><span class="string">App=connect(mapStatetoProps,mapDispatchToProps)(App)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default App</span></span><br></pre></td></tr></table></figure><h2 id="1-3-redux不可变数据"><a href="#1-3-redux不可变数据" class="headerlink" title="1.3 redux不可变数据"></a>1.3 redux不可变数据</h2><p><strong>1.在ReactJS中的数据对象</strong></p><p>在ReactJS 中主要是props 和state：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.props是不可变的</span></span><br><span class="line">props在子组件构造时由父组件传人子组件或自定义初始值，在子组件中不能改变props的值，只能读取：采用<span class="keyword">this</span>.props.name。</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.state是可变的</span></span><br><span class="line">state是在组件内部运用的，在组件内部均可改变。但是我们永远不要直接改变state，而是要通过setState()方法来改变，因此请把 <span class="keyword">this</span>.state 看作是不可变的，事实上有时候有人会搭配使用 Immutable来设置state，直接把state看成不可变的。</span><br></pre></td></tr></table></figure><p><strong>2.如何在Reactjs中减少render</strong></p><p>那么如何在reactjs中减少render提高性能呢，主要还是从props和state入手。在Reactjs中只要state变化或者props变化,都会重新render，这里的变化并非值真变了，即使是相同的值，因为重新输入了，也会导致render。因此reactjs提供了shouldComponentUpdate和PureComponent来阻止。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：使用shouldComponentUpdate方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shouldComponentUpdate</span> (<span class="params">nextProps, nextState</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//我们需要在state和props有新值的时候进行判断，是否需要render，如果不需要，则返回false。</span></span><br><span class="line">    <span class="keyword">return</span> nextProps.id !== <span class="keyword">this</span>.props.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二：使用PureComponent类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListOfWords</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span> </span>&#123;</span><br><span class="line"> render() &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.words.join(',')&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordAdder</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"> <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">     <span class="keyword">super</span>(props);</span><br><span class="line">     <span class="keyword">this</span>.state = &#123;</span><br><span class="line">         words: [<span class="string">'marklar'</span>]</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> handleClick() &#123;</span><br><span class="line">     <span class="comment">// This section is bad style and causes a bug</span></span><br><span class="line">     <span class="keyword">const</span> words = <span class="keyword">this</span>.state.words;</span><br><span class="line">     words.push(<span class="string">'marklar'</span>);</span><br><span class="line">     <span class="keyword">this</span>.setState(&#123;<span class="attr">words</span>: words&#125;);</span><br><span class="line">  </span><br><span class="line"> &#125;</span><br><span class="line"> render() &#123;</span><br><span class="line">     <span class="keyword">return</span> (</span><br><span class="line">         &lt;div&gt;</span><br><span class="line">             &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;click&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">             &lt;ListOfWords words=&#123;this.state.words&#125; /</span>&gt;</span><br><span class="line">         &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">     );</span></span><br><span class="line"><span class="regexp"> &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span>*</span><br><span class="line"><span class="number">1.</span>继承PureComponent时，不能再重写shouldComponentUpdate</span><br><span class="line"><span class="number">2.</span>继承PureComponent时，进行的是浅比较，也就是说，如果是引用类型的数据，只会比较是不是同一个地址，而不会比较具体这个地址存的数据是否完全一致</span><br><span class="line"><span class="number">3.</span>上面代码中，无论你怎么点击按钮，ListOfWords渲染的结果始终没变化，原因就是WordAdder的word的引用地址始终是同一个。</span><br><span class="line"><span class="number">4.</span>我们可以这样修改state，此时页面会发生变化，因为给words赋值了一个新对象</span><br><span class="line">   <span class="keyword">this</span>.setState(&#123;<span class="attr">words</span>:[...words]&#125;);</span><br><span class="line">*<span class="regexp">/</span></span><br></pre></td></tr></table></figure><p><strong>3.如何简单快捷的判断是否需要render</strong></p><p>从上面我们可以看出reactjs提供了阻止render的方法，但是如何快速判断是否需要render依然是个问题，因为判断一个复杂的数据对象是否跟之前的值是否相同并不容易。</p><p>Redux将这个问题极简化了，整个应用共用一个state。但也带来了更复杂的问题，就是state的结构可能非常复杂，如果判断是否更新呢？Redux又一次极简了，那就是采用不可变数据。</p><p>我们在判断数据是否相同时，并不需要深入判断数据对象的值是否相同，只需要浅比较即可，也就是判断是否为同一个数据对象地址，因为不可变数据对象在数据变化时均会重新创建一个新的数据对象，数据对象的地址不会相同。这也就是为什么在Reactjs，Redux中才有不可变数据对象。</p><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>umi和dva</title>
      <link href="/2020/01/29/umi%E5%92%8Cdva/"/>
      <url>/2020/01/29/umi%E5%92%8Cdva/</url>
      
        <content type="html"><![CDATA[<h2 id="1-umi"><a href="#1-umi" class="headerlink" title="1.umi"></a>1.umi</h2><p><a href="https://umijs.org/zh/guide/" target="_blank" rel="noopener">https://umijs.org/zh/guide/</a></p><p>一套可插拔的企业级 react 应用框架，由dva作者 sorrycc 完成，它既是一个框架也是一个工具。他在Umi中引入了 UI 工具 antd，打包工具 roadhog，路由 react-router和状态管理器 dva，做到了可插拔机制。通过约定、自动生成和解析代码等方式来辅助开发，减少开发者要写的代码量。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yarn global add umi</span><br><span class="line">$ umi -v</span><br><span class="line"><span class="number">2.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir myapp &amp;&amp; cd myapp</span><br><span class="line">$ yarn create umi</span><br></pre></td></tr></table></figure><p><img src="/" alt="1573453772780" class="lazyload" data-src="/2020/01/29/umi%E5%92%8Cdva/1573453772780.png"></p><p><img src="/" alt="1573453795170" class="lazyload" data-src="/2020/01/29/umi%E5%92%8Cdva/1573453795170.png">nextJS</p><p>选上 <code>antd</code> 和 <code>dva</code>，然后回车确认</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//然后安装依赖</span></span><br><span class="line"></span><br><span class="line">$ yarn</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//然后启动应用</span></span><br><span class="line"></span><br><span class="line">$ yarn start</span><br></pre></td></tr></table></figure><p>几秒钟后，你会看到以下输出，</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DONE  Compiled successfully <span class="keyword">in</span> <span class="number">212</span>ms</span><br><span class="line"></span><br><span class="line"> App running at:</span><br><span class="line"> - Local:   http:<span class="comment">//localhost:8000/</span></span><br><span class="line"> - Network: http:<span class="comment">//&#123;&#123; YourIP &#125;&#125;:8000/</span></span><br></pre></td></tr></table></figure><p>在浏览器里打开 <a href="http://localhost:8000/" target="_blank" rel="noopener">http://localhost:8000</a>，你会看到 umi 的欢迎界面。</p><p><img src="/" alt="img" class="lazyload" data-src="/2020/01/29/umi%E5%92%8Cdva/1573453872519.png"></p><h2 id="2-使用-antd"><a href="#2-使用-antd" class="headerlink" title="2.使用 antd"></a>2.使用 antd</h2><p>前面选择 antd 之后，会自动处理 antd 的依赖以及按需加载。你可以检查 <code>.umirc.js</code> 里的配置，确保 antd 已开启。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ref: https://umijs.org/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// ref: https://umijs.org/plugin/umi-plugin-react.html</span></span><br><span class="line">    [<span class="string">'umi-plugin-react'</span>, &#123;</span><br><span class="line">      antd: <span class="literal">true</span>,</span><br><span class="line">      dva: <span class="literal">true</span>,</span><br><span class="line">    &#125;],</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>而如果要使用固定版本的 antd，你可以在项目里安装额外的 antd 依赖，package.json 里声明的 antd 依赖会被优先使用。</p></blockquote><h2 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h2><p>1） .editorconfig 该文件是配置编辑器的一些设置，这里我修改了一个缩进，indent_size = 4。因为个人比较喜欢4个缩进，看着舒服。<br>2） .env 该文件是项目环境配置文件，默认的是BROWSER=none，这时候项目启动后，浏览器不会自动打开。<br>3） .eslintrc 多人开发时候，一套良好的代码规范是非常必要的。这里配置了一份基础eslint文件，供参考。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"env"</span>: &#123;</span><br><span class="line">    <span class="string">"es6"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"node"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"mocha"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"extends"</span>: [</span><br><span class="line">    <span class="string">"eslint:recommended"</span>,</span><br><span class="line">    <span class="string">"react-app"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="string">"strict"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="comment">//"indent": ["error", 4, &#123; "SwitchCase": 1 &#125;],</span></span><br><span class="line">    <span class="string">"eqeqeq"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"no-lone-blocks"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"no-lonely-if"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"no-multi-spaces"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"no-multiple-empty-lines"</span>: [</span><br><span class="line">      <span class="string">"error"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"max"</span>: <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"no-param-reassign"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"no-spaced-func"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"no-use-before-define"</span>: <span class="string">"warn"</span>,</span><br><span class="line">    <span class="string">"no-unused-vars"</span>: <span class="string">"warn"</span>,</span><br><span class="line">    <span class="string">"no-with"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"default-case"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"key-spacing"</span>: [</span><br><span class="line">      <span class="string">"error"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"beforeColon"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"afterColon"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"comma-spacing"</span>: [</span><br><span class="line">      <span class="string">"error"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"before"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"after"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"generator-star-spacing"</span>: [</span><br><span class="line">      <span class="string">"error"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"before"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"after"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"semi"</span>: [</span><br><span class="line">      <span class="string">"warn"</span>,</span><br><span class="line">      <span class="string">"always"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"omitLastInOneLineBlock"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"no-restricted-globals"</span>: <span class="string">"off"</span>,</span><br><span class="line">    <span class="string">"array-callback-return"</span>: <span class="string">"off"</span>,</span><br><span class="line">    <span class="string">"no-console"</span>: [</span><br><span class="line">      <span class="string">"warn"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"allow"</span>: [</span><br><span class="line">          <span class="string">"info"</span>,</span><br><span class="line">          <span class="string">"warn"</span>,</span><br><span class="line">          <span class="string">"error"</span>,</span><br><span class="line">          <span class="string">"time"</span>,</span><br><span class="line">          <span class="string">"timeEnd"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"react/react-in-jsx-scope"</span>: <span class="string">"warn"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4） <code>.umirc</code> 主要配置一些代理，主题，alias，插件，诸如此类。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ref: https://umijs.org/config/</span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  history: <span class="string">'hash'</span>,</span><br><span class="line">  treeShaking: <span class="literal">true</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      component: <span class="string">'../layouts/index'</span>,</span><br><span class="line">      routes: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/'</span>,</span><br><span class="line">          component: <span class="string">'../pages/index'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// ref: https://umijs.org/plugin/umi-plugin-react.html</span></span><br><span class="line">    [</span><br><span class="line">      <span class="string">'umi-plugin-react'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        antd: <span class="literal">true</span>,</span><br><span class="line">        dva: <span class="literal">true</span>,</span><br><span class="line">        dynamicImport: <span class="literal">false</span>,</span><br><span class="line">        title: <span class="string">'testumi'</span>,</span><br><span class="line">        dll: <span class="literal">false</span>,</span><br><span class="line">        routes: &#123;</span><br><span class="line">          exclude: [</span><br><span class="line">            /models\<span class="comment">//,</span></span><br><span class="line">            /services\<span class="comment">//,</span></span><br><span class="line">            /model\.(t|j)sx?$/,</span><br><span class="line">            /service\.(t|j)sx?$/,</span><br><span class="line">            /components\<span class="comment">//,</span></span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    <span class="comment">// '/api': &#123;</span></span><br><span class="line">    <span class="comment">//   target: 'http://127.0.0.1:10000/',</span></span><br><span class="line">    <span class="comment">//   changeOrigin: true,</span></span><br><span class="line">    <span class="comment">//   pathRewrite: &#123; '^/api': '' &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="string">'@'</span>: path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://umijs.org/zh/config/#uglifyjsoptions" target="_blank" rel="noopener">https://umijs.org/zh/config/#uglifyjsoptions</a></p><h2 id="4-新建路由"><a href="#4-新建路由" class="headerlink" title="4.新建路由"></a>4.新建路由</h2><p>我们要写个应用来先显示产品列表。首先第一步是创建路由，路由可以想象成是组成应用的不同页面。</p><p>如果你没有 npx，需要先安装他，用于执行 node_modules 下的命令，</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn global add npx</span><br></pre></td></tr></table></figure><p>然后通过命令创建 <code>/products</code> 路由，</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npx umi g page Product/index</span><br><span class="line"></span><br><span class="line">   create src/pages/Product/index.js</span><br><span class="line">   create src/pages/Product/index.css</span><br><span class="line">✔  success</span><br></pre></td></tr></table></figure><p>然后在浏览器里打开 <a href="http://localhost:8000/#/Product/index" target="_blank" rel="noopener">http://localhost:8000/#/Product/index</a>，你应该能看到对应的页面。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">注意 .umirc.js文件中route的变化</span><br><span class="line"></span><br><span class="line">routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      component: <span class="string">'../layouts/index'</span>,</span><br><span class="line">      routes: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/Product/index'</span>,</span><br><span class="line">          component: <span class="string">'./Product/index'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/'</span>,</span><br><span class="line">          component: <span class="string">'../pages/index'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><h2 id="5-改造项目结构"><a href="#5-改造项目结构" class="headerlink" title="5.改造项目结构"></a>5.改造项目结构</h2><p><img src="/" alt="1573457953533" class="lazyload" data-src="/2020/01/29/umi%E5%92%8Cdva/1573457953533.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">assets用于存放静态资源，如项目中所需要的图片或Icon等</span><br><span class="line">components公共组件目录</span><br><span class="line">config配置文件目录</span><br><span class="line">global.css全局样式表</span><br><span class="line">pages项目路由，各页面入口</span><br><span class="line">services定义后端的接口调用</span><br><span class="line">models定义各model</span><br><span class="line">utils定义各类工具函数</span><br></pre></td></tr></table></figure><h2 id="6-编写-UI-Component"><a href="#6-编写-UI-Component" class="headerlink" title="6.编写 UI Component"></a>6.编写 UI Component</h2><p>随着应用的发展，你会需要在多个页面分享 UI 元素 (或在一个页面使用多次)，在 umi 里你可以把这部分抽成 component 。</p><p>我们来编写一个 <code>ProductList</code> component，这样就能在不同的地方显示产品列表了。</p><p>新建 <code>src/pages/Product/components/ProductList.js</code> 文件：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Table, Popconfirm, Button &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ProductList = <span class="function">(<span class="params">&#123; onDelete, products &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> columns = [&#123;</span><br><span class="line">        title: <span class="string">'Name'</span>,</span><br><span class="line">        dataIndex: <span class="string">'name'</span>,</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        title: <span class="string">'Actions'</span>,</span><br><span class="line">        render: <span class="function">(<span class="params">text, record</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;Popconfirm title=<span class="string">"Delete?"</span> onConfirm=&#123;() =&gt; onDelete(record.id)&#125;&gt;</span><br><span class="line">                    &lt;Button&gt;Delete&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>Popconfirm&gt;</span><br><span class="line">            );</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;Table</span><br><span class="line">            dataSource=&#123;products&#125;</span><br><span class="line">            columns=&#123;columns&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ProductList;</span><br></pre></td></tr></table></figure><h2 id="7-定义-dva-Model"><a href="#7-定义-dva-Model" class="headerlink" title="7.定义 dva Model"></a>7.定义 dva Model</h2><p>完成 UI 后，现在开始处理数据和逻辑。</p><p>dva 通过 <code>model</code> 的概念把一个领域的模型管理起来，包含同步更新 state 的 reducers，处理异步逻辑的 effects，订阅数据源的 subscriptions 。</p><p>新建 model <code>src/pages/Product/models/products.js</code>，</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    namespace: <span class="string">'products'</span>,</span><br><span class="line">    state: &#123;</span><br><span class="line">        datas:[</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">'dva'</span>, <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">'antd'</span>, <span class="attr">id</span>: <span class="number">2</span> &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    reducers: &#123;</span><br><span class="line">        <span class="string">'delete'</span>(state, &#123; <span class="attr">payload</span>: id &#125;) &#123;</span><br><span class="line">            state.datas = state.datas.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.id !== id);</span><br><span class="line">            <span class="keyword">return</span> &#123; ...state &#125; ;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个 model 里：</p><ul><li><code>namespace</code> 表示在全局 state 上的 key</li><li><code>state</code> 是初始值</li><li><code>reducers</code> 等同于 redux 里的 reducer，接收 action，同步更新 state</li></ul><p>umi 里约定 <code>src/models</code> 下的 model 会被自动注入，你无需手动注入。</p><h2 id="8-connect-起来"><a href="#8-connect-起来" class="headerlink" title="8.connect 起来"></a>8.connect 起来</h2><p>到这里，我们已经单独完成了 model 和 component，那么他们如何串联起来呢?</p><p>dva 提供了 <code>connect</code> 方法。如果你熟悉 redux，这个 connect 来自 react-redux。</p><p>编辑 <code>src/pages/Product/index.js</code>，替换为以下内容：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'dva'</span>;</span><br><span class="line"><span class="keyword">import</span> ProductList <span class="keyword">from</span> <span class="string">'./components/ProductList'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Products = <span class="function">(<span class="params">&#123; dispatch, products &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleDelete</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    dispatch(&#123;</span><br><span class="line">      type: <span class="string">'products/delete'</span>,</span><br><span class="line">      payload: id,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;List <span class="keyword">of</span> Products&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">      &lt;ProductList onDelete=&#123;handleDelete&#125; products=&#123;products.datas&#125; /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default connect((&#123; products &#125;) =&gt; (&#123;</span></span><br><span class="line"><span class="regexp">  products,</span></span><br><span class="line"><span class="regexp">&#125;))(Products);</span></span><br></pre></td></tr></table></figure><p>最后，我们还需要一些初始数据让这个应用 run 起来(数据也可以放在model的state里面)。编辑 <code>src/app.js</code>：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> dva = &#123;</span><br><span class="line">  config: &#123;</span><br><span class="line">    onError(err) &#123;</span><br><span class="line">      err.preventDefault();</span><br><span class="line">      <span class="built_in">console</span>.error(err.message);</span><br><span class="line">    &#125;,</span><br><span class="line">    initialState: &#123;</span><br><span class="line">      products: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">'dva'</span>, <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">'antd'</span>, <span class="attr">id</span>: <span class="number">2</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>刷新浏览器，应该能看到以下效果：</p><p><img src="/" alt="img" class="lazyload" data-src="/2020/01/29/umi%E5%92%8Cdva/umi%E5%92%8Cdva%5CGQJeDDeUCSTRMMg.gif"></p><h2 id="9-dva实战"><a href="#9-dva实战" class="headerlink" title="9.dva实战"></a>9.dva实战</h2><p><a href="https://github.com/sorrycc/blog/issues/62" target="_blank" rel="noopener">https://github.com/sorrycc/blog/issues/62</a></p><p>​    dva由阿里架构师 sorrycc 带领 team 完成的一套前端框架，dva 是一个基于 <a href="https://github.com/reduxjs/redux" target="_blank" rel="noopener">redux</a> 和 <a href="https://github.com/redux-saga/redux-saga" target="_blank" rel="noopener">redux-saga</a> (异步处理)的数据流方案，在作者的 github 里是这么描述它的：”dva 是 react 和 redux 的最佳实践”。</p><p>​    一般来说，可以分为主要的三个部分，<code>models</code>、<code>services</code> 和 <code>views</code>。其中，<code>views</code>负责页面上的展示，这个不做赘述；<code>services</code>里面主要写一些请求后台接口的方法；<code>models</code>是其中最重要的概念，这里存放了各种数据，并对数据进行相应的交互。</p><p>​    前端是显示数据的，所以前端将显示数据和操作数据分离开，将数据、数据操作全部放到一个地方单独管理起来。每次数据操作之后，先修改数据，再将新的数据告诉react组件。react组件会根据新的数据，重新生成新的dom组件。</p><p>​    在dva中要做这样几件事情：</p><blockquote><ol><li>保存数据。</li><li>提交数据操作请求。操作请求的信息包含一个动作和新的数据（动作+操作数）。新数据的来源有同步和异步。</li><li>根据新的数据和数据操作请求，更新旧的数据。</li><li>把新的数据告诉react组件。</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dva将树状结构数据，拆分成不同的数据块管理起来。每个数据块通过一个model组织起来（通常model会和react的组件对应起来）。</span><br><span class="line"></span><br><span class="line">每个model中包含这些东西：</span><br></pre></td></tr></table></figure><blockquote><ul><li>namespace 这个数据块对应到整个树状数据的哪一个块。</li><li>state 这个model要管理的数据。</li><li>effect 异步调用的操作。</li><li>reducers 响应动作后对数据的操作。</li></ul></blockquote><h3 id="9-1-准备后台接口"><a href="#9-1-准备后台接口" class="headerlink" title="9.1 准备后台接口"></a>9.1 准备后台接口</h3><p>​      mock/home.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 支持值为 Object 和 Array  </span></span><br><span class="line">    <span class="comment">// list, total, page</span></span><br><span class="line">    <span class="comment">//'GET /api/users': &#123; list: [&#123;name:'zhangsan',email:"zhangsan@qq.com",website:"xx.com"&#125;,&#123;name:"lisi",email:"lisi@qq.com",website:"ll.com"&#125;],total:105,page:2 &#125;,</span></span><br><span class="line">  </span><br><span class="line">    <span class="string">'GET /api/users'</span>:<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; </span><br><span class="line">        <span class="keyword">var</span> page = req.query.page;</span><br><span class="line">        <span class="keyword">var</span> data = &#123; <span class="attr">list</span>: [&#123;<span class="attr">name</span>:<span class="string">'zhangsan'</span>,<span class="attr">email</span>:<span class="string">"zhangsan@qq.com"</span>,<span class="attr">website</span>:<span class="string">"xx.com"</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">"lisi"</span>,<span class="attr">email</span>:<span class="string">"lisi@qq.com"</span>,<span class="attr">website</span>:<span class="string">"ll.com"</span>&#125;],<span class="attr">total</span>:<span class="number">105</span>,<span class="attr">page</span>:page &#125;;</span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(data))</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// GET POST 可省略</span></span><br><span class="line">    <span class="string">'/api/users/1'</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 支持自定义函数，API 参考 express@4</span></span><br><span class="line">    <span class="string">'POST /api/users/create'</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; res.end(<span class="string">'OK'</span>); &#125;,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h3 id="9-2-封装请求工具类"><a href="#9-2-封装请求工具类" class="headerlink" title="9.2 封装请求工具类"></a>9.2 封装请求工具类</h3><p>​    src/utils/request.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> response</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response = <span class="keyword">await</span> axios(options)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-3-封装service"><a href="#9-3-封装service" class="headerlink" title="9.3 封装service"></a>9.3 封装service</h3><p>​    pages/User/services/index.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">queryUserList</span>(<span class="params">&#123; page = <span class="number">1</span> &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(<span class="string">`/api/users?page=<span class="subst">$&#123;page&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-4-编写模型层"><a href="#9-4-编写模型层" class="headerlink" title="9.4 编写模型层"></a>9.4 编写模型层</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pages&#x2F;User&#x2F;models&#x2F;user.js</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; queryUserList &#125; <span class="keyword">from</span> <span class="string">'@/pages/User/services/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    namespace: <span class="string">'users'</span>,</span><br><span class="line">    state: &#123;</span><br><span class="line">        list: [],</span><br><span class="line">        total: <span class="literal">null</span>,</span><br><span class="line">        page: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    reducers: &#123;</span><br><span class="line">        <span class="comment">// 保存数据</span></span><br><span class="line">        save(state, &#123; <span class="attr">payload</span>: &#123; list, total, page &#125; &#125;) &#123;</span><br><span class="line">            <span class="comment">// 复制数组，将list, total, page内容复制到state</span></span><br><span class="line">            <span class="keyword">return</span> &#123; ...state, list, total, page &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//用于处理异步操作和业务逻辑，不直接修改 state，简单的来说，就是获取从服务端获取数据，并且发起       一个 action 交给 reducer 的地方。其中它用到了redux-saga，里面有几个常用的函数。</span></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   put:  用于触发action</span></span><br><span class="line"><span class="comment">        yield put(&#123; type: 'todos/add', payload: 'Learn Dva'&#125;);</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">   call:用于调用异步逻辑，支持Promise。</span></span><br><span class="line"><span class="comment">        const result = yield call(fetch, '/todos');</span></span><br><span class="line"><span class="comment">        这个call与JS的call用法大概一致，这个call的第一个参数是你要调用的函数，第二个参数开始是你要传递的参数，可一 一传递。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    select:用于从state里获取数据。</span></span><br><span class="line"><span class="comment">        const todos = yield select(state =&gt; state.todos);</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    effects: &#123;</span><br><span class="line">        <span class="comment">// 访问接口获取数据 并且保存数据</span></span><br><span class="line">        *fetchUserList(&#123; <span class="attr">payload</span>: &#123; page = <span class="number">1</span> &#125; &#125;, &#123; call, put &#125;) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">yield</span> call(queryUserList, &#123; page &#125;);</span><br><span class="line">            <span class="keyword">yield</span> put(&#123;</span><br><span class="line">                type: <span class="string">'save'</span>,</span><br><span class="line">                payload: &#123;</span><br><span class="line">                    list: data.list,</span><br><span class="line">                    total: <span class="built_in">parseInt</span>(data.total, <span class="number">10</span>),</span><br><span class="line">                    page: <span class="built_in">parseInt</span>(data.page, <span class="number">10</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    subscriptions: &#123;</span><br><span class="line">        <span class="comment">// https://github.com/dvajs/dva/issues/174</span></span><br><span class="line">        setup(&#123; dispatch, history &#125;) &#123;</span><br><span class="line">            <span class="keyword">return</span> history.listen(<span class="function">(<span class="params">&#123; pathname, query &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 进入'/users'地址触发fetchUserList</span></span><br><span class="line">                <span class="keyword">if</span> (pathname === <span class="string">'/User/index'</span>) &#123;</span><br><span class="line">                    dispatch(&#123; <span class="attr">type</span>: <span class="string">'fetchUserList'</span>, <span class="attr">payload</span>: query &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="9-5-编写页面"><a href="#9-5-编写页面" class="headerlink" title="9.5 编写页面"></a>9.5 编写页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pages&#x2F;User&#x2F;index.js</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./index.css'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'dva'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Table, Pagination, Popconfirm, Button &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Users</span>(<span class="params">&#123; dispatch, list: dataSource, loading, total, page: current &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">deleteHandler</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">`TODO: <span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onChangeUserPagination</span>(<span class="params">page</span>) </span>&#123;</span><br><span class="line">    dispatch(&#123;</span><br><span class="line">      type: <span class="string">'users/fetchUserList'</span>,</span><br><span class="line">      payload: &#123;</span><br><span class="line">        page: page</span><br><span class="line">      &#125;, <span class="comment">// 需要传递的信息</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">'用户名'</span>,</span><br><span class="line">      dataIndex: <span class="string">'name'</span>,</span><br><span class="line">      key: <span class="string">'name'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">'电子邮件'</span>,</span><br><span class="line">      dataIndex: <span class="string">'email'</span>,</span><br><span class="line">      key: <span class="string">'email'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">'个人网站'</span>,</span><br><span class="line">      dataIndex: <span class="string">'website'</span>,</span><br><span class="line">      key: <span class="string">'website'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">'操作'</span>,</span><br><span class="line">      key: <span class="string">'operation'</span>,</span><br><span class="line">      render: <span class="function">(<span class="params">text, &#123; id &#125;</span>) =&gt;</span> (</span><br><span class="line">        &lt;span className=&#123;styles.operation&#125;&gt;</span><br><span class="line">          &lt;Button&gt;编辑&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Popconfirm title="Confirm to delete?" onConfirm=&#123;deleteHandler.bind(null, id)&#125;&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Button&gt;删除&lt;/</span>Button&gt;</span><br><span class="line">          &lt;<span class="regexp">/Popconfirm&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>span&gt;</span><br><span class="line">      ),</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;styles.normal&#125;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Table</span><br><span class="line">          loading=&#123;loading&#125;</span><br><span class="line">          columns=&#123;columns&#125;</span><br><span class="line">          dataSource=&#123;dataSource&#125;</span><br><span class="line">          rowKey=&#123;record =&gt; record.id&#125;</span><br><span class="line">          pagination=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;Pagination</span><br><span class="line">          className=<span class="string">"ant-table-pagination"</span></span><br><span class="line">          total=&#123;total&#125; <span class="comment">// 数据总数</span></span><br><span class="line">          current=&#123;current&#125; <span class="comment">// 当前页数</span></span><br><span class="line">          onChange=&#123;onChangeUserPagination&#125;</span><br><span class="line">          page=<span class="string">"1"</span></span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; list, total, page &#125; = state.users;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    list,</span><br><span class="line">    total,</span><br><span class="line">    page</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps)(Users);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>精讲react高阶组件</title>
      <link href="/2020/01/22/%E7%B2%BE%E8%AE%B2react%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/"/>
      <url>/2020/01/22/%E7%B2%BE%E8%AE%B2react%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="1-高阶组件"><a href="#1-高阶组件" class="headerlink" title="1.高阶组件"></a>1.高阶组件</h1><h2 id="1-1-高阶函数"><a href="#1-1-高阶函数" class="headerlink" title="1.1 高阶函数"></a>1.1 高阶函数</h2><p><strong>高阶函数是一个函数，它接收函数作为参数或将函数作为输出返回</strong></p><ul><li><p>举个栗子:</p><ul><li><p>接收函数作为参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function a(x) &#123;</span><br><span class="line">  x();</span><br><span class="line">&#125;</span><br><span class="line">function b() &#123;</span><br><span class="line">  alert(&#39;hello&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a(b);</span><br></pre></td></tr></table></figure></li><li><p>将函数作为输出返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function a() &#123;</span><br><span class="line">  function b() &#123;</span><br><span class="line">    alert(&#39;hello&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">  return b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a()();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>以上函数a就是一个高阶函数, 用法非常简单, 那么实际开发中又有哪些是高阶函数呢？</p><ul><li>Array 的 map 、reduce 、filter 等方法</li><li>Object 的 keys 、values 等方法</li></ul></li></ul><h2 id="1-2-高阶组件"><a href="#1-2-高阶组件" class="headerlink" title="1.2 高阶组件"></a>1.2 高阶组件</h2><ul><li><p>概念：<strong>高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件</strong></p></li><li><p>举个栗子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">   render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HocComponent</span>(<span class="params">WrappedComponent</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span>/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> NewComponent = HocComponent(MyComponent)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;NewComponent&gt;&lt;<span class="regexp">/NewComponent&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure></li><li><p>HocComponent函数就是一个高阶组件。</p></li></ul><blockquote><p>高阶组件可以看做是装饰器模式(Decorator Pattern)在React的实现。即允许向一个现有的对象添加新的功能，同时又不改变其结构，属于包装模式(Wrapper Pattern)的一种。最大的特点就是重用组件逻辑</p></blockquote><h3 id="1-2-1-高阶组件的实现方式-属性代理"><a href="#1-2-1-高阶组件的实现方式-属性代理" class="headerlink" title="1.2.1 高阶组件的实现方式-属性代理"></a>1.2.1 高阶组件的实现方式-属性代理</h3><p>属性代理(Props Proxy)：<code>HOC</code>是包裹在普通组件外面的一层高阶函数，任何要传入普通组件内的<code>props</code> 或者 <code>state</code> 首先都要经过 <code>HOC</code>。</p><p><code>props</code>和 <code>state</code>等属性原本是要流向 目标组件的腰包的，但是却被 雁过拔毛的<code>HOC</code>拦路打劫，那么最终这些 <code>props</code>和 <code>states</code>数据到底还能不能再到达 目标组件，或者哪些能到达以及到达多少就全由 <code>HOC</code>说了算了，也就是说，<code>HOC</code>拥有了提前对这些属性进行修改的能力。</p><p>属性代理的作用：</p><ul><li>更改prop</li><li>通过refs获取组件实例</li><li>抽象state</li><li>把WrappedComponent与其他elements包装在一起</li></ul><h4 id="a-属性代理-更改props"><a href="#a-属性代理-更改props" class="headerlink" title="a) 属性代理-更改props"></a>a) 属性代理-更改props</h4><p>在高阶组件中添加新的 props，可以在 WrappedComponent 中通过 this.props.name访问到。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello React &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HocComponent</span>(<span class="params">WrappedComponent</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125;/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> NewComponent = HocComponent(MyComponent)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;NewComponent name=<span class="string">"zhangsan"</span>&gt;&lt;<span class="regexp">/NewComponent&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h4 id="b-属性代理-通过refs获取组件实例"><a href="#b-属性代理-通过refs获取组件实例" class="headerlink" title="b) 属性代理-通过refs获取组件实例"></a>b) 属性代理-通过refs获取组件实例</h4><p>当我们包装WrappedComponent的时候，想获取到它的实例怎么办，可以通过引用(ref),在WrappedComponent组件挂载的时候，会执行ref的回调函数，在hoc中取到组件的实例。通过打印可以看到它的props、 state、方法都是可以取到的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  say()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"say say say ....."</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello React &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HocComponent</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">//此处的instance会拿到被包装的组件实例，然后访问被包装的组件对象的属性和方法</span></span><br><span class="line">    proc(instance) &#123;</span><br><span class="line">      instance.say();</span><br><span class="line">      <span class="built_in">console</span>.log(instance.props.name)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;this.proc&#125;</span> /&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> NewComponent = HocComponent(MyComponent)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;NewComponent name=<span class="string">"zhangsan"</span>&gt;&lt;<span class="regexp">/NewComponent&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h4 id="c-属性代理-抽取state"><a href="#c-属性代理-抽取state" class="headerlink" title="c) 属性代理-抽取state"></a>c) 属性代理-抽取state</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      value:<span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  handleChange(event)&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      value:event.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;this.state.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTextArea</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      value:<span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  handleChange(event)&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      value:event.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">value</span>=<span class="string">&#123;this.state.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HocComponent</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span>/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> NewInput = HocComponent(MyInput)</span><br><span class="line"><span class="keyword">const</span> NewTextArea = HocComponent(MyTextArea)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;NewInput&gt;&lt;<span class="regexp">/NewInput&gt;</span></span><br><span class="line"><span class="regexp">      &lt;NewTextArea&gt;&lt;/</span>NewTextArea&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/这边代码存在的问题：MyInput和MyTextArea组件都有自己的state和change方法，代码重用性太大</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;this.props.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.props.onChange&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTextArea</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">value</span>=<span class="string">&#123;this.props.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.props.onChange&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HocComponent</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将所有被包含组件的state和change都抽取到高阶组件中</span></span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">      <span class="keyword">super</span>(props);</span><br><span class="line">      <span class="keyword">this</span>.state = &#123;</span><br><span class="line">        value: <span class="string">""</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    handleChange(event) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        value: event.target.value</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> newProps = &#123;</span><br><span class="line">        value: <span class="keyword">this</span>.state.value,</span><br><span class="line">        onChange: <span class="keyword">this</span>.handleChange</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="comment">//向被包含组件传递属性</span></span><br><span class="line">        &lt;WrappedComponent &#123;...this.props&#125; &#123;...newProps&#125; /&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> NewInput = HocComponent(MyInput)</span><br><span class="line"><span class="keyword">const</span> NewTextArea = HocComponent(MyTextArea)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;NewInput&gt;&lt;<span class="regexp">/NewInput&gt;</span></span><br><span class="line"><span class="regexp">      &lt;NewTextArea&gt;&lt;/</span>NewTextArea&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h4 id="d-属性代理-用其他元素包装组件"><a href="#d-属性代理-用其他元素包装组件" class="headerlink" title="d) 属性代理-用其他元素包装组件"></a>d) 属性代理-用其他元素包装组件</h4><p>为了封装样式、布局或别的目的，可以用其它组件和元素包裹 WrappedComponent。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>被包裹组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HocComponent</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div style=&#123;&#123;<span class="attr">color</span>:<span class="string">"red"</span>&#125;&#125;&gt;</span><br><span class="line">          &lt;WrappedComponent &#123;...this.props&#125; /&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const NewComponent = HocComponent(MyComponent)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function App() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;NewComponent&gt;&lt;/</span>NewComponent&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-2-高阶组件的实现方式-反向继承"><a href="#1-2-2-高阶组件的实现方式-反向继承" class="headerlink" title="1.2.2 高阶组件的实现方式-反向继承"></a>1.2.2 高阶组件的实现方式-反向继承</h3><p>反向继承( Inheritance Inversion )：返回的 HOC 类（Enhancer）继承了 WrappedComponent。之所以被称为 Inheritance Inversion 是因为 WrappedComponent 被 Enhancer 继承了，而不是 WrappedComponent 继承了 Enhancer。在这种方式中，它们的关系看上去被反转（inverse）了。</p><p>通过继承WrappedComponent，除了一些静态方法，包括生命周期，state，各种function，我们都可以得到。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iiHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">Enhancer</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.render()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反向继承的作用：</p><ul><li>渲染劫持</li><li>操作state</li></ul><h4 id="a-反向继承-渲染劫持"><a href="#a-反向继承-渲染劫持" class="headerlink" title="a) 反向继承-渲染劫持"></a>a) 反向继承-渲染劫持</h4><p>之所以被称为渲染劫持是因为 HOC 控制着 WrappedComponent 的渲染输出，可以用它做各种各样的事。通过渲染劫持可以：</p><ul><li>在由 render输出的任何 React 元素中读取、添加、编辑、删除 props</li><li>读取和修改由 render 输出的 React 元素树</li><li>有条件地渲染元素树</li><li>把样式包裹进元素树（就像在 Props Proxy 中的那样）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">name</span>=<span class="string">"pp"</span>&gt;</span>被包裹组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iiHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">Enhancer</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> elementsTree = <span class="keyword">super</span>.render();</span><br><span class="line">      <span class="comment">//打印父组件的属性值</span></span><br><span class="line">      <span class="built_in">console</span>.log(elementsTree.props)</span><br><span class="line">      <span class="comment">//添加新的 属性返回</span></span><br><span class="line">      <span class="keyword">let</span> newProps = &#123;<span class="attr">style</span>:&#123;<span class="attr">color</span>:<span class="string">'red'</span>&#125;&#125;;</span><br><span class="line">      <span class="keyword">const</span> props = <span class="built_in">Object</span>.assign(&#123;&#125;,elementsTree.props,newProps);</span><br><span class="line">      <span class="keyword">const</span> newElement = React.cloneElement(elementsTree, props, elementsTree.props.children)</span><br><span class="line">      <span class="keyword">return</span> newElement;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> NewComponent = iiHOC(MyComponent)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;NewComponent&gt;&lt;<span class="regexp">/NewComponent&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h4 id="b-反向继承-修改state"><a href="#b-反向继承-修改state" class="headerlink" title="b) 反向继承-修改state"></a>b) 反向继承-修改state</h4><p>HOC 可以读取、编辑和删除 WrappedComponent 实例的 state，如果需要，也可以给它添加更多的 state。但是这会搞乱 WrappedComponent 的 state，可能会导致破坏某些东西，通常不建议使用高阶组件修改添加state。</p><p>下面通过访问 WrappedComponent 的 props 和 state 来做测试。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">IIHOCDEBUGGER</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">II</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h2&gt;HOC Debugger Component&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">          &lt;p&gt;Props&lt;/</span>p&gt; <span class="xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;JSON.stringify(this.props)&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br><span class="line">          &lt;p&gt;State&lt;<span class="regexp">/p&gt;&lt;pre&gt;&#123;JSON.stringify(this.state)&#125;&lt;/</span>pre&gt;</span><br><span class="line">          &#123;<span class="keyword">super</span>.render()&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>create-react-app脚手架的使用</title>
      <link href="/2020/01/02/create-react-app%E8%84%9A%E6%89%8B%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/01/02/create-react-app%E8%84%9A%E6%89%8B%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-creat-react-app使用"><a href="#1-creat-react-app使用" class="headerlink" title="1.creat-react-app使用"></a>1.creat-react-app使用</h1><p><a href="https://www.html.cn/create-react-app/docs/getting-started/" target="_blank" rel="noopener">https://www.html.cn/create-react-app/docs/getting-started/</a></p><p><code>Create React App</code>是FaceBook的React团队官方出的一个构建<code>React</code>单页面应用的脚手架工具。它本身集成了<code>Webpack</code>，并配置了一系列内置的<code>loader</code>和默认的npm的脚本，可以很轻松的实现零配置就可以快速开发React的应用。</p><h2 id="1-1-创建应用"><a href="#1-1-创建应用" class="headerlink" title="1.1 创建应用"></a>1.1 创建应用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装</span><br><span class="line">npm install -g create-react-app</span><br><span class="line"># 构建一个my-app的项目</span><br><span class="line">npx create-react-app my-app</span><br><span class="line">cd my-app</span><br><span class="line"></span><br><span class="line"># 启动编译当前的React项目，并自动打开 http://localhost:3000/</span><br><span class="line">npm start</span><br><span class="line"></span><br><span class="line"># 如果你不能确保最新版本，可以先尝试卸载： npm uninstall -g create-react-app,然后再全局安装</span><br><span class="line"></span><br><span class="line"># 解压默认的webpack配置到配置文件中</span><br><span class="line"># react-scripts 是 create-react-app 的一个核心包，一些脚本和工具的默认配置都集成在里面，而 yarn eject 命令执行后会将封装在 create-react-app 中的配置全部反编译到当前项目，这样用户就能完全取得 webpack 文件的控制权。所以，eject 命令存在的意义就是更改 webpack 配置存在的啊！</span><br><span class="line">npm run eject</span><br><span class="line">npm install   <span class="comment">//需要再次运行install命令安装</span></span><br><span class="line">npm run start <span class="comment">//然后才可以启动</span></span><br></pre></td></tr></table></figure><p>应用的目录结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├── package.json</span><br><span class="line">├── public                  # 这个是webpack的配置的静态目录</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   ├── index.html          # 默认是单页面应用，这个是最终的html的基础模板</span><br><span class="line">│   └── manifest.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── App.css             # App根组件的css</span><br><span class="line">│   ├── App.js              # App组件代码</span><br><span class="line">│   ├── App.test.js</span><br><span class="line">│   ├── index.css           # 启动文件样式</span><br><span class="line">│   ├── index.js            # 启动的文件（开始执行的入口）！！！！</span><br><span class="line">│   ├── logo.svg</span><br><span class="line">│   └── serviceWorker.js</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure><h2 id="1-2-启用sass"><a href="#1-2-启用sass" class="headerlink" title="1.2 启用sass"></a>1.2 启用sass</h2><p><a href="mailto:react-scripts@2.0.0">react-scripts@2.0.0</a> 以上版本才适用。</p><p>react-scripts主要设计原理是将配置好的如 <code>Webpack，Babel，ESLint</code> ，合并到 <code>react-scripts</code> 这npm包中，用户就可以开箱即用。很多开发者都在这基础上进行改造开发。注意 <code>react-scripts</code> 就是create-react-app脚手架的核心配置代码。</p><h3 id="1-2-1-安装依赖"><a href="#1-2-1-安装依赖" class="headerlink" title="1.2.1 安装依赖"></a>1.2.1 安装依赖</h3><p>要使用Sass必须首先安装   <code>node-sass</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// yarn config <span class="built_in">set</span> sass_binary_site http://cdn.npm.taobao.org/dist/node-sass -g</span><br><span class="line"></span><br><span class="line">$ npm install node-sass --save</span><br><span class="line">$ <span class="comment"># or</span></span><br><span class="line">$ yarn add node-sass</span><br></pre></td></tr></table></figure><p>安装完之后，我们就可以直接把原来的CSS文件后缀直接改为 <code>.scss</code> 或者<code>.sass</code>,然后组件中导入的文件不再是 css文件而给我scss文件即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./Store/Index'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;AddNumCreator, MinusNumCreator&#125; <span class="keyword">from</span> <span class="string">'./Store/ActionCreaters'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.scss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;header className=<span class="string">"App-header"</span>&gt;</span><br><span class="line">          &lt;h1&gt;潇洒&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>header&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-2-在sass文件中引入其他sass文件"><a href="#1-2-2-在sass文件中引入其他sass文件" class="headerlink" title="1.2.2 在sass文件中引入其他sass文件"></a>1.2.2 在sass文件中引入其他sass文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">'styles/colors.scss'</span>;   <span class="comment">//这边路径以当前文件路径为参照</span></span><br></pre></td></tr></table></figure><h2 id="1-3-CSS-Modules支持"><a href="#1-3-CSS-Modules支持" class="headerlink" title="1.3 CSS Modules支持"></a>1.3 CSS Modules支持</h2><p>导入CSS文件或者Sass文件的时候，可以用一个变量接收一下返回值。那么就可以直接通过它来访问CSS或者Sass中的内部样式类了。比如：</p><ul><li>button.module.css</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Button.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./button.module.css'</span>;     <span class="comment">// Import css modules stylesheet as styles</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// reference as a js object</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#123;styles.error&#125;</span>&gt;</span>Error Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- This button has red background --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"Button_error_ax7yz"</span>&gt;</span>Error Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-4-环境变量"><a href="#1-4-环境变量" class="headerlink" title="1.4 环境变量"></a>1.4 环境变量</h2><p>巧妙的使用环境变量可以帮我们在项目中区分开生产环境还是编译环境，从而执行不同的代码。</p><h3 id="1-4-1-添加自定义环境变量文件-env"><a href="#1-4-1-添加自定义环境变量文件-env" class="headerlink" title="1.4.1 添加自定义环境变量文件.env"></a>1.4.1 添加自定义环境变量文件<code>.env</code></h3><p>项目根目录下创建<code>.env</code>文件，文件内部添加 <code>key=value</code>的配置可以直接应用于项目的编译中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REACT_APP_WEBSITE_NAME=myapp</span><br><span class="line">REACT_APP_PUBLIC_URL=http://localhost:3000</span><br></pre></td></tr></table></figure><blockquote><p>Note: 如果创建自定义的环境变量必须以<code>REACT_APP_</code>开头.</p></blockquote><h3 id="1-4-2-在项目中使用环境变量"><a href="#1-4-2-在项目中使用环境变量" class="headerlink" title="1.4.2 在项目中使用环境变量"></a>1.4.2 在项目中使用环境变量</h3><p>在项目中可以直接用<code>process.env.XXX</code>访问我们的自定义的环境变量。比如：</p><ul><li>js中使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;small&gt;You are running <span class="keyword">this</span> application <span class="keyword">in</span> &lt;b&gt;&#123;process.env.NODE_ENV&#125;&lt;<span class="regexp">/b&gt; mode.&lt;/</span>small&gt;</span><br><span class="line">      &lt;form&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> defaultValue=&#123;process.env.REACT_APP_WEBSITE_NAME&#125; /&gt;</span><br><span class="line">        &lt;img src=&#123;process.env.REACT_APP_PUBLIC_URL + <span class="string">'/img/logo.png'</span>&#125; /&gt;;</span><br><span class="line">      &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//再比如：判断是否是生产环境</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"development"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>HTML中使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;%REACT_APP_WEBSITE_NAME%&lt;&#x2F;title&gt;</span><br></pre></td></tr></table></figure><h2 id="1-5-添加图片，字体和文件"><a href="#1-5-添加图片，字体和文件" class="headerlink" title="1.5 添加图片，字体和文件"></a>1.5 添加图片，字体和文件</h2><p>使用 Webpack，添加图片和字体等静态资源的工作方式与 CSS 类似。</p><p>你可以 <strong>直接在 JavaScript 模块中 import 文件</strong>。 这会告诉 Webpack 将该文件包含在 bundle(包) 中。 与 CSS 导入不同，导入文件会为你提供字符串值。 此值是你可以在代码中引用的最终路径，例如 image 的 <code>src</code> 属性或链接到 PDF 的 <code>href</code> 属性。</p><p>要减少对服务器的请求数，导入小于 10,000 字节的图片将返回 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs" target="_blank" rel="noopener">data URI</a> 而不是路径。 这适用于以下文件扩展名：<code>bmp</code> ，<code>gif</code> ，<code>jpg</code> ，<code>jpeg</code> 和 <code>png</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.png'</span>; <span class="comment">// 告诉 Webpack 这个 JS 文件使用了这个图片</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(logo); <span class="comment">// /logo.84287d09.png</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Header</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 导入结果是图片的 URL </span></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;logo&#125;</span> <span class="attr">alt</span>=<span class="string">"Logo"</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Header;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这也适用于 CSS ：</span></span><br><span class="line">.Logo &#123;</span><br><span class="line">  background-image: url(./logo.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字体图标的使用</span></span><br><span class="line"><span class="comment">//yarn add font-awesome</span></span><br><span class="line"><span class="comment">//引入样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'font-awesome/css/font-awesome.css'</span></span><br><span class="line"><span class="comment">//使用样式</span></span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-address-book"</span> aria-hidden=<span class="string">"true"</span>&gt;&lt;<span class="regexp">/i&gt; </span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/具体使用参照官网：http:/</span><span class="regexp">/www.fontawesome.com.cn/</span>faicons/</span><br></pre></td></tr></table></figure><h2 id="1-6-启用less、取别名"><a href="#1-6-启用less、取别名" class="headerlink" title="1.6 启用less、取别名"></a>1.6 启用less、取别名</h2><p>由于 create-react-app 脚手架中并没有配置关于 less 文件的解析，正常情况下我们也不会通过yarn reject暴露配置文件然后修改配置文件，我们可以在项目根目录下新建一个config-overrides.js配置文件，覆盖默认的配置</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>yarn add react-app-rewired customize-cra</span><br><span class="line"><span class="number">2.</span>在项目根目录下创建一个config-overrides.js</span><br><span class="line"><span class="number">3.</span>  yarn add less less-loader</span><br><span class="line"><span class="number">4.</span>  修改package.json</span><br><span class="line">    <span class="string">"scripts"</span>: &#123;</span><br><span class="line">        - <span class="string">"start"</span>: <span class="string">"react-scripts start"</span>,</span><br><span class="line">        + <span class="string">"start"</span>: <span class="string">"react-app-rewired start"</span>,</span><br><span class="line">        - <span class="string">"build"</span>: <span class="string">"react-scripts build"</span>,</span><br><span class="line">        + <span class="string">"build"</span>: <span class="string">"react-app-rewired build"</span>,</span><br><span class="line">        - <span class="string">"test"</span>: <span class="string">"react-scripts test"</span>,</span><br><span class="line">        + <span class="string">"test"</span>: <span class="string">"react-app-rewired test"</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  修改config-overrides.js文件</span></span><br><span class="line"><span class="comment">//  http://npm.taobao.org/package/customize-cra</span></span><br><span class="line"><span class="comment">//  https://blog.csdn.net/weixin_33850890/article/details/91372527</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment">// 配置less和@符号</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    override,</span><br><span class="line">    addWebpackAlias,</span><br><span class="line">    addLessLoader</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">"customize-cra"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line">    addLessLoader(),</span><br><span class="line">    addWebpackAlias(&#123;</span><br><span class="line">        [<span class="string">"@"</span>]: path.resolve(__dirname, <span class="string">"src"</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">);</span><br><span class="line">        </span><br><span class="line"> <span class="comment">//注意：这边less的模块化配置会有问题，参照官网配置无法实现模块化</span></span><br><span class="line"><span class="comment">//https://github.com/arackaf/customize-cra/blob/master/api.md#addlessloaderloaderoptions</span></span><br></pre></td></tr></table></figure><h2 id="1-7-其他react的默认配置"><a href="#1-7-其他react的默认配置" class="headerlink" title="1.7 其他react的默认配置"></a>1.7 其他react的默认配置</h2><ul><li>直接可以使用sass（安装node-sass模块后）</li><li>直接可以使用css（import）</li><li>直接可以导入 图片、svg、字体文件等，已经配置好相应的loader</li><li>ES6 ES7代码直接可以用 <ul><li>class</li><li>箭头函数</li><li>私用变量</li><li>静态属性</li><li>继承</li><li>装饰器（XXX不能用）</li></ul></li></ul><h2 id="1-8-AntDesgin使用"><a href="#1-8-AntDesgin使用" class="headerlink" title="1.8 AntDesgin使用"></a>1.8 AntDesgin使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add babel-plugin-<span class="keyword">import</span></span><br><span class="line">$ yarn add antd</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改config-overrides.js</span></span><br><span class="line">+ <span class="keyword">const</span> &#123; override, fixBabelImports &#125; = <span class="built_in">require</span>(<span class="string">'customize-cra'</span>);</span><br><span class="line">+ <span class="built_in">module</span>.exports = override(</span><br><span class="line">+   fixBabelImports(<span class="string">'import'</span>, &#123;</span><br><span class="line">+     libraryName: <span class="string">'antd'</span>,</span><br><span class="line">+     libraryDirectory: <span class="string">'es'</span>,</span><br><span class="line">+     style: <span class="string">'css'</span>,</span><br><span class="line">+   &#125;),</span><br><span class="line">+ );</span><br></pre></td></tr></table></figure><p>然后移除前面在 <code>src/App.css</code> 里全量添加的 <code>@import &#39;~antd/dist/antd.css&#39;;</code> 样式代码，并且按下面的格式引入模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// src/App.js</span></span><br><span class="line">  <span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line">- <span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">'antd/es/button'</span>;</span><br><span class="line">+ <span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line">  <span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">          &lt;Button type=<span class="string">"primary"</span>&gt;Button&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>最后重启 <code>yarn start</code> 访问页面，antd 组件的 js 和 css 代码都会按需加载</p><p>不启用严格模式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="comment">// &lt;React.StrictMode&gt;</span></span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  <span class="comment">// &lt;/React.StrictMode&gt;</span></span><br><span class="line">  ,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>扒一扒react的ReactTransitionGroup动画</title>
      <link href="/2019/12/29/%E6%89%92%E4%B8%80%E6%89%92react%E7%9A%84ReactTransitionGroup%E5%8A%A8%E7%94%BB/"/>
      <url>/2019/12/29/%E6%89%92%E4%B8%80%E6%89%92react%E7%9A%84ReactTransitionGroup%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<p>React 可以被用来实现强大的动画效果。参见 <a href="https://reactcommunity.org/react-transition-group/" target="_blank" rel="noopener">React Transition Group</a>、<a href="https://github.com/chenglou/react-motion" target="_blank" rel="noopener">React Motion</a> 以及 <a href="https://github.com/react-spring/react-spring" target="_blank" rel="noopener">React Spring</a> 等示例。</p><h1 id="1-ReactTransitionGroup动画"><a href="#1-ReactTransitionGroup动画" class="headerlink" title="1.ReactTransitionGroup动画"></a>1.ReactTransitionGroup动画</h1><p>react-transition-group 一个官网提供的动画过度库。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># npm</span><br><span class="line">npm install react-transition-group --save</span><br><span class="line"></span><br><span class="line"># yarn</span><br><span class="line">yarn add react-transition-group</span><br></pre></td></tr></table></figure><p>而官方提供的四个组建<code>Transition</code>，<code>CSSTransition</code>，<code>SwitchTransiton</code>，<code>TransitonGroup</code>。</p><h2 id="1-1-Transition"><a href="#1-1-Transition" class="headerlink" title="1.1 Transition"></a>1.1 Transition</h2><p>过渡组件(Transiton)允许您用一个简单的声明性API描述随着时间的推移从一个组件状态到另一个组件状态的转换。最常用的是用来动画一个组件的安装和卸载，但也可以用来描述在适当的过渡状态。默认情况下，该组件不会更改其呈现的组件的行为，它只跟踪组件的“进入”和“退出”的状态。由你来为这些状态定义效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Transition &#125; <span class="keyword">from</span> <span class="string">'react-transition-group'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Fade</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line">    done = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'结束了'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    addEndListener = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123; <span class="comment">//原生时间transition运动的事件</span></span><br><span class="line">        node.addEventListener(<span class="string">'transitionend'</span>, <span class="keyword">this</span>.done, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 三个进入状态的事件，可以做你想做的事情</span></span><br><span class="line">    onEnter = <span class="function">(<span class="params">node, isAppearing</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(isAppearing, <span class="string">'onEnter'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    onEntering = <span class="function">(<span class="params">node, isAppearing</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(isAppearing, <span class="string">'onEntering'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    onEntered = <span class="function">(<span class="params">node, isAppearing</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(isAppearing, <span class="string">'onEntered'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 三个退出的状态的事件</span></span><br><span class="line">    onExit = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'onExit'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    onExiting = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'onExiting'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    onExited = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'onExited'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; <span class="attr">in</span>: inProp &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> defaultStyle = &#123;</span><br><span class="line">            transition: <span class="string">`transform <span class="subst">$&#123;<span class="number">300</span>&#125;</span>ms ease-in-out, opacity <span class="subst">$&#123;<span class="number">300</span>&#125;</span>ms ease-in-out`</span>,</span><br><span class="line">            transform: <span class="string">'translateX(100px)'</span>,</span><br><span class="line">            opacity: <span class="string">'0'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> transitionStyles = &#123;</span><br><span class="line">            entering: &#123; <span class="attr">transform</span>: <span class="string">'translateX(100px)'</span>, <span class="attr">opacity</span>: <span class="string">'0'</span> &#125;,</span><br><span class="line">            entered: &#123; <span class="attr">transform</span>: <span class="string">'translateX(0px)'</span>, <span class="attr">opacity</span>: <span class="string">'1'</span> &#125;,</span><br><span class="line">            exiting: &#123; <span class="attr">transform</span>: <span class="string">'translateX(0px)'</span>, <span class="attr">opacity</span>: <span class="string">'1'</span> &#125;,</span><br><span class="line">            exited: &#123; <span class="attr">transform</span>: <span class="string">'translateX(100px)'</span>, <span class="attr">opacity</span>: <span class="string">'0'</span> &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> duration = &#123;</span><br><span class="line">            enter: <span class="number">300</span>,</span><br><span class="line">            exit: <span class="number">300</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上面的都是基本参数，样式的转变以及时间的设定，具体的可以看官网文档</span></span><br><span class="line">        <span class="comment">// 样式也可以写成className 例如&lt;MyComponent className=&#123;`fade fade-$&#123;status&#125;`&#125; /&gt;</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Transition</span><br><span class="line">                onEnter=&#123;<span class="keyword">this</span>.onEnter&#125;</span><br><span class="line">                onEntering=&#123;<span class="keyword">this</span>.onEntering&#125;</span><br><span class="line">                onEntered=&#123;<span class="keyword">this</span>.onEntered&#125;</span><br><span class="line"></span><br><span class="line">                onExit=&#123;<span class="keyword">this</span>.onExit&#125;</span><br><span class="line">                onExiting=&#123;<span class="keyword">this</span>.onExiting&#125;</span><br><span class="line">                onExited=&#123;<span class="keyword">this</span>.onExited&#125;</span><br><span class="line"></span><br><span class="line">                addEndListener=&#123;<span class="keyword">this</span>.addEndListener&#125;</span><br><span class="line">                <span class="keyword">in</span>=&#123;inProp&#125;</span><br><span class="line">                unmountOnExit=&#123;<span class="literal">false</span>&#125; <span class="comment">// 为true 代表退出的时候移除dom</span></span><br><span class="line">                appear=&#123;<span class="literal">true</span>&#125;     <span class="comment">// 为true 初始动画</span></span><br><span class="line">                timeout=&#123;duration&#125;</span><br><span class="line">            &gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    state =&gt; &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(state, <span class="string">'###'</span>) <span class="comment">//你可以很直观的看到组件加载和卸载时候的状态</span></span><br><span class="line">                        <span class="keyword">return</span> (</span><br><span class="line">                            &lt;div style=&#123;&#123;</span><br><span class="line">                                ...defaultStyle,</span><br><span class="line">                                ...transitionStyles[state]</span><br><span class="line">                            &#125;&#125;&gt;</span><br><span class="line">                                &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">                            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                        )</span></span><br><span class="line"><span class="regexp">                    &#125;</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Transition&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> Fade <span class="keyword">from</span> <span class="string">'./Fade.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Dnd</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        flag:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    handle = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(<span class="function"><span class="params">prev</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                flag: !prev.flag</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;() =&gt; <span class="keyword">this</span>.handle()&#125;&gt;点击transition&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Fade in=&#123;this.state.flag&#125;&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;div&gt;动画&lt;/</span>div&gt;</span><br><span class="line">                &lt;<span class="regexp">/Fade&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-CSSTransition"><a href="#1-2-CSSTransition" class="headerlink" title="1.2 CSSTransition"></a>1.2 CSSTransition</h2><p>此组件是在转换的出现、进入、退出阶段应用一对类名(也就是className)，靠这个来激活CSS动画。所以参数和平时的className不同，参数为：<code>classNames</code><br>参数：（主要）in, timeout, unmountOnExit, classNames, 用法同Transition。看如下例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./star.css'</span></span><br><span class="line"><span class="keyword">import</span> &#123; CSSTransition &#125; <span class="keyword">from</span> <span class="string">'react-transition-group'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Star</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        star: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleStar = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(<span class="function"><span class="params">prev</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                star:!prev.star</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.handleStar()&#125;&#125;&gt;start<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">            &lt;CSSTransition</span><br><span class="line">                in=&#123;this.state.star&#125;</span><br><span class="line">                timeout=&#123;300&#125;</span><br><span class="line">                classNames="star"</span><br><span class="line">                unmountOnExit  //为true 代表退出的时候移除dom</span><br><span class="line">            &gt;</span><br><span class="line">                &#123;/*指定默认样式*/&#125;   </span><br><span class="line">                &lt;div className="star"&gt;星星&lt;/div&gt;</span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">CSSTransition</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.star &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    margin-left: <span class="number">0.5</span>rem;</span><br><span class="line">    transform: scale(<span class="number">1.25</span>);</span><br><span class="line">&#125;</span><br><span class="line">.star-enter &#123;</span><br><span class="line">    opacity: <span class="number">0.01</span>;</span><br><span class="line">    transform: translateY(<span class="number">-100</span>%) scale(<span class="number">0.75</span>);</span><br><span class="line">&#125;</span><br><span class="line">.star-enter-active &#123;</span><br><span class="line">    opacity: <span class="number">1</span>;</span><br><span class="line">    transform: translateY(<span class="number">0</span>%) scale(<span class="number">1.25</span>);</span><br><span class="line">    transition: all <span class="number">300</span>ms ease-out;</span><br><span class="line">&#125;</span><br><span class="line">.star-exit &#123;</span><br><span class="line">    opacity: <span class="number">1</span>;</span><br><span class="line">    transform: scale(<span class="number">1.25</span>);</span><br><span class="line">&#125;</span><br><span class="line">.star-exit-active &#123;</span><br><span class="line">    opacity: <span class="number">0</span>;</span><br><span class="line">    transform: scale(<span class="number">4</span>);</span><br><span class="line">    transition: all <span class="number">300</span>ms ease-<span class="keyword">in</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-SwitchTransition"><a href="#1-3-SwitchTransition" class="headerlink" title="1.3 SwitchTransition"></a>1.3 SwitchTransition</h2><p>受vue过渡模式启发的过渡组件， 当您要控制状态转换之间的渲染时，可以使用它。SwitchTransition不提供任何形式的动画，具体的动画取决与你包裹的Transition || CSSTransition的动画。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; SwitchTransition, CSSTransition &#125; <span class="keyword">from</span> <span class="string">'react-transition-group'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./switch.css'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchAnim</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            flag: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toggle = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prev</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                flag: !prev.flag</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.toggle&#125;</span>&gt;</span>点我切换组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">            &lt;SwitchTransition&gt;</span><br><span class="line">                &lt;CSSTransition</span><br><span class="line">                    key=&#123;this.state.flag ? "A" : "B"&#125;</span><br><span class="line">                    classNames="fade"</span><br><span class="line">                    timeout=&#123;300&#125;&gt;</span><br><span class="line">                    &#123;this.state.flag ? &lt;div&gt;AAAA&lt;/div&gt; : &lt;div&gt;BBBB&lt;/div&gt;&#125;</span><br><span class="line">                &lt;/CSSTransition&gt;</span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">SwitchTransition</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.fade-enter &#123;</span><br><span class="line">    opacity: <span class="number">0.01</span>;  </span><br><span class="line">&#125;</span><br><span class="line">.fade-enter-active &#123;</span><br><span class="line">    opacity: <span class="number">1</span>;</span><br><span class="line">    transition: opacity <span class="number">500</span>ms ease-<span class="keyword">in</span>;</span><br><span class="line">&#125;</span><br><span class="line">.fade-exit &#123;</span><br><span class="line">    opacity: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">.fade-exit-active &#123;</span><br><span class="line">    opacity: <span class="number">0.01</span>;</span><br><span class="line">    transition: opacity <span class="number">500</span>ms ease-<span class="keyword">in</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-TransitionGroup"><a href="#1-4-TransitionGroup" class="headerlink" title="1.4 TransitionGroup"></a>1.4 TransitionGroup</h2><p>一看group就知道肯定是列表形态的动画了！但是看了官网后知道，TransitionGroup不提供任何形式的动画，具体的动画取决与你包裹的Transition || CSSTransition的动画，所以你可以在列表里面做出不同类型的动画出来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; TransitionGroup, CSSTransition &#125; <span class="keyword">from</span> <span class="string">'react-transition-group'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./switch.css'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ListAnim</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            items: [</span><br><span class="line">                &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'Buy eggs'</span> &#125;,  <span class="comment">//0</span></span><br><span class="line">                &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Pay bills'</span> &#125;,  <span class="comment">//1</span></span><br><span class="line">                &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">'Invite friends over'</span> &#125;, <span class="comment">//2</span></span><br><span class="line">                &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">text</span>: <span class="string">'Fix the TV'</span> &#125;,  <span class="comment">//3</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleAdd = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> items = <span class="keyword">this</span>.state.items;</span><br><span class="line">        items.unshift(&#123; <span class="attr">id</span>: items.length + <span class="number">1</span>, <span class="attr">text</span>: <span class="string">"张三"</span> &#125;);</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            items: [...items]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleRemove = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(<span class="function"><span class="params">prev</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                items: prev.items.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.id != id)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> items = <span class="keyword">this</span>.state.items;</span><br><span class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line">            &lt;TransitionGroup&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    items.map(item =&gt; (</span><br><span class="line">                        &lt;CSSTransition</span><br><span class="line">                            key=&#123;item.id&#125;  //这边的key一定要能唯一标识当前元素</span><br><span class="line">                            timeout=&#123;300&#125;</span><br><span class="line">                            classNames="fade"</span><br><span class="line">                        &gt;</span><br><span class="line">                            &lt;div style=&#123;&#123; background: "red" &#125;&#125;&gt;</span><br><span class="line">                                &#123;item.text&#125;</span><br><span class="line">                                &lt;button onClick=&#123;() =&gt; this.handleRemove(item.id)&#125;&gt;&amp;times;&lt;/button&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                        &lt;/CSSTransition&gt;</span><br><span class="line">                    ))</span><br><span class="line">                &#125;</span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">TransitionGroup</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleAdd&#125;</span>&gt;</span>添加元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.fade-enter &#123;</span><br><span class="line">    opacity: <span class="number">0.01</span>;  </span><br><span class="line">&#125;</span><br><span class="line">.fade-enter-active &#123;</span><br><span class="line">    opacity: <span class="number">1</span>;</span><br><span class="line">    transition: opacity <span class="number">500</span>ms ease-<span class="keyword">in</span>;</span><br><span class="line">&#125;</span><br><span class="line">.fade-exit &#123;</span><br><span class="line">    opacity: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">.fade-exit-active &#123;</span><br><span class="line">    opacity: <span class="number">0.01</span>;</span><br><span class="line">    transition: opacity <span class="number">500</span>ms ease-<span class="keyword">in</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>react-spring动画库</title>
      <link href="/2019/11/29/react-spring%E5%8A%A8%E7%94%BB%E5%BA%93/"/>
      <url>/2019/11/29/react-spring%E5%8A%A8%E7%94%BB%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="1-React-Spring动画库"><a href="#1-React-Spring动画库" class="headerlink" title="1. React Spring动画库"></a>1. React Spring动画库</h2><p><a href="https://www.react-spring.io/docs/hooks/basics" target="_blank" rel="noopener">https://www.react-spring.io/docs/hooks/basics</a></p><h3 id="1-1-基本用法"><a href="#1-1-基本用法" class="headerlink" title="1.1 基本用法"></a>1.1 基本用法</h3><p>React Spring是使用于reactjs的动画工具库，因为依据 react-motio作者Cheng Lou的演讲观点95%以上的动画特效使用spring即可达到可用的效果，以往那种时间间隔和曲线的动画理念生硬又复杂。</p><p>react-spring库中UseSpring和animated</p><p>UseSpring是一个可以设置样式的自定义钩子，它接受一个对象，该对象具有from和to值作为开始和结束状态，react-spring正是用这两个状态来处理过渡的动画效果。from和to几乎可以设置所有的CSS属性对象：颜色，大小，transform，甚至滚动条。</p><p>只需要在HTML标签上增加animated就可以应用spring动画。默认情况下，动画会在组件挂载的时候立即执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.改变透明度</span></span><br><span class="line"><span class="keyword">const</span> animation = useSpring(&#123;</span><br><span class="line">    <span class="keyword">from</span>: &#123; <span class="attr">opacity</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    to: &#123; <span class="attr">opacity</span>: <span class="number">1</span> &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.改变颜色</span></span><br><span class="line"><span class="keyword">const</span> colorAnimation = useSpring(&#123;</span><br><span class="line">    config: &#123; <span class="attr">duration</span>: <span class="number">4000</span> &#125;,</span><br><span class="line">    delay: <span class="number">2000</span>,</span><br><span class="line">    <span class="keyword">from</span>: &#123; <span class="attr">color</span>: <span class="string">'blue'</span> &#125;,</span><br><span class="line">    to: &#123; <span class="attr">color</span>: <span class="string">`rgb(255,0,0)`</span> &#125;,</span><br><span class="line">    <span class="comment">/*从from到to的过程开启动画*/</span></span><br><span class="line">    reset: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/*reverse:会自动反转from和to的值，这个值只有在联合reset:true的情况下才生效*/</span></span><br><span class="line">    reverse: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/*动画的回调函数*/</span></span><br><span class="line">    onStart: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">"动画开始"</span>) &#125;,</span><br><span class="line">    onRest: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">"动画停止"</span>) &#125;,</span><br><span class="line">    onFrame: <span class="function">(<span class="params">v</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">"动画过程中的回调函数"</span>, v) &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">config的一些配置参数：</span></span><br><span class="line"><span class="comment">    mass：影响速度以及过渡的效果。</span></span><br><span class="line"><span class="comment">    tension：影响整体速度。</span></span><br><span class="line"><span class="comment">    friction：控制阻力及其减速的速度。</span></span><br><span class="line"><span class="comment">    clamp：是否应该瞬间过渡。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">官方提供的一些有用的预设值搭配：</span></span><br><span class="line"><span class="comment">    config.default &#123; mass: 1, tension: 170, friction: 26 &#125;</span></span><br><span class="line"><span class="comment">    config.gentle &#123; mass: 1, tension: 120, friction: 14 &#125;</span></span><br><span class="line"><span class="comment">    config.wobbly &#123; mass: 1, tension: 180, friction: 12 &#125;</span></span><br><span class="line"><span class="comment">    config.stiff &#123; mass: 1, tension: 210, friction: 20 &#125;</span></span><br><span class="line"><span class="comment">    config.slow &#123; mass: 1, tension: 280, friction: 60 &#125;</span></span><br><span class="line"><span class="comment">    config.molasses &#123; mass: 1, tension: 280, friction: 120 &#125;   </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.改变透明度和颜色  多个状态改变</span></span><br><span class="line"><span class="keyword">const</span> multiAnimation = useSpring(&#123;</span><br><span class="line">    <span class="keyword">from</span>: &#123; <span class="attr">opacity</span>: <span class="number">0</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    to: [</span><br><span class="line">        &#123; <span class="attr">opacity</span>: <span class="number">1</span>, <span class="attr">color</span>: <span class="string">'#ffaaee'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">opacity</span>: <span class="number">1</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">opacity</span>: <span class="number">.5</span>, <span class="attr">color</span>: <span class="string">'#008000'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">opacity</span>: <span class="number">.8</span>, <span class="attr">color</span>: <span class="string">'black'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;animated.h1 style=&#123;animation&#125;&gt;Hello World&lt;<span class="regexp">/animated.h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;animated.h1 style=&#123;colorAnimation&#125;&gt;Hello World&lt;/</span>animated.h1&gt;</span><br><span class="line">        &lt;animated.h1 style=&#123;multiAnimation&#125;&gt;Hello World&lt;<span class="regexp">/animated.h1&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例---循环变动</span></span><br><span class="line"></span><br><span class="line">#1.App.jsx</span><br><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSpring, animated, interpolate &#125; <span class="keyword">from</span> <span class="string">'react-spring'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./app.css'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> animation = useSpring(&#123;</span><br><span class="line">        <span class="keyword">from</span>: &#123; <span class="attr">left</span>: <span class="string">'0%'</span>, <span class="attr">top</span>: <span class="string">'0%'</span>, <span class="attr">width</span>: <span class="string">'0%'</span>, <span class="attr">height</span>: <span class="string">'0%'</span>, <span class="attr">background</span>: <span class="string">'lightgreen'</span> &#125;,</span><br><span class="line">        to: <span class="keyword">async</span> next =&gt; &#123;</span><br><span class="line">          <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">await</span> next(&#123; <span class="attr">left</span>: <span class="string">'0%'</span>, <span class="attr">top</span>: <span class="string">'0%'</span>, <span class="attr">width</span>: <span class="string">'100%'</span>, <span class="attr">height</span>: <span class="string">'100%'</span>, <span class="attr">background</span>: <span class="string">'lightblue'</span> &#125;)</span><br><span class="line">            <span class="keyword">await</span> next(&#123; <span class="attr">height</span>: <span class="string">'50%'</span>, <span class="attr">background</span>: <span class="string">'lightgreen'</span> &#125;)</span><br><span class="line">            <span class="keyword">await</span> next(&#123; <span class="attr">width</span>: <span class="string">'50%'</span>, <span class="attr">left</span>: <span class="string">'50%'</span>, <span class="attr">background</span>: <span class="string">'lightgoldenrodyellow'</span> &#125;)</span><br><span class="line">            <span class="keyword">await</span> next(&#123; <span class="attr">top</span>: <span class="string">'0%'</span>, <span class="attr">height</span>: <span class="string">'100%'</span>, <span class="attr">background</span>: <span class="string">'lightpink'</span> &#125;)</span><br><span class="line">            <span class="keyword">await</span> next(&#123; <span class="attr">top</span>: <span class="string">'50%'</span>, <span class="attr">height</span>: <span class="string">'50%'</span>, <span class="attr">background</span>: <span class="string">'lightsalmon'</span> &#125;)</span><br><span class="line">            <span class="keyword">await</span> next(&#123; <span class="attr">width</span>: <span class="string">'100%'</span>, <span class="attr">left</span>: <span class="string">'0%'</span>, <span class="attr">background</span>: <span class="string">'lightcoral'</span> &#125;)</span><br><span class="line">            <span class="keyword">await</span> next(&#123; <span class="attr">width</span>: <span class="string">'50%'</span>, <span class="attr">background</span>: <span class="string">'lightseagreen'</span> &#125;)</span><br><span class="line">            <span class="keyword">await</span> next(&#123; <span class="attr">top</span>: <span class="string">'0%'</span>, <span class="attr">height</span>: <span class="string">'100%'</span>, <span class="attr">background</span>: <span class="string">'lightskyblue'</span> &#125;)</span><br><span class="line">            <span class="keyword">await</span> next(&#123; <span class="attr">width</span>: <span class="string">'100%'</span>, <span class="attr">background</span>: <span class="string">'lightslategrey'</span> &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">animated.div</span> <span class="attr">className</span>=<span class="string">"script-box"</span> <span class="attr">style</span>=<span class="string">&#123;animation&#125;</span> /&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#2.app.css</span><br><span class="line">* &#123;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  html,</span><br><span class="line">  body,</span><br><span class="line">  #root &#123;</span><br><span class="line">    width: <span class="number">100</span>%;</span><br><span class="line">    height: <span class="number">100</span>%;</span><br><span class="line">    margin: <span class="number">0</span>;</span><br><span class="line">    padding: <span class="number">0</span>;</span><br><span class="line">    background-color: white;</span><br><span class="line">    -webkit-touch-callout: none;</span><br><span class="line">    -webkit-user-select: none;</span><br><span class="line">    -khtml-user-select: none;</span><br><span class="line">    -moz-user-select: none;</span><br><span class="line">    -ms-user-select: none;</span><br><span class="line">    user-select: none;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  #app &#123;</span><br><span class="line">    background: #f0f0f0;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: <span class="number">100</span>%;</span><br><span class="line">    height: <span class="number">100</span>%;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .script-box &#123;</span><br><span class="line">    will-change: width, height, left, top;</span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给组件添加动画</span></span><br><span class="line"><span class="keyword">const</span> Demo4 = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//当我们要对组件进行动画的时候，我们需要使用animated方法把组件包裹起来，然后直接使用包裹后的组件名字</span></span><br><span class="line">    <span class="keyword">const</span> AnimatedDonut4 = animated(Donut4)</span><br><span class="line">    <span class="comment">//创建一个动画:该动画完成从value=0变化到value=100的过程</span></span><br><span class="line">    <span class="keyword">const</span> donutAnimation = useSpring(&#123; <span class="attr">from</span>: &#123; <span class="attr">value</span>: <span class="number">0</span> &#125;, <span class="attr">value</span>: <span class="number">100</span> ,<span class="attr">config</span>: &#123; <span class="attr">duration</span>: <span class="number">2000</span> &#125;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;AnimatedDonut4&gt;</span><br><span class="line">        &lt;<span class="regexp">/AnimatedDonut4&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Demo4;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-interpolate的用法"><a href="#1-2-interpolate的用法" class="headerlink" title="1.2 interpolate的用法"></a>1.2 interpolate的用法</h3><p>除了仅对元素和组件添加静态样式更改之外，我们还可以使用Interpolate创建更有趣和可重用的动画。interpolate方法可以用来在动画执行的过程中，根据给定的起始、最终值，计算动画的每一步需要的值。interpolate还有一个作用可以让我们模拟css的关键帧。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; o, xyz, color &#125; = useSpring(&#123;</span><br><span class="line">        <span class="keyword">from</span>: &#123; <span class="attr">o</span>: <span class="number">0</span>, <span class="attr">xyz</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">        to: &#123; <span class="attr">o</span>: <span class="number">1</span>, <span class="attr">xyz</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">5</span>], <span class="attr">color</span>: <span class="string">'green'</span> &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;<span class="comment">/*  Interpolate :允许我们提取变量值，转换成对应的动画样式</span></span><br><span class="line"><span class="comment">               Interpolate还有一个作用可以让我们模拟css的关键帧</span></span><br><span class="line"><span class="comment">            */</span>&#125;</span><br><span class="line">            &lt;animated.div</span><br><span class="line">                style=&#123;&#123;</span><br><span class="line">                    color,</span><br><span class="line">                    <span class="comment">//改变背景色 o作为入参</span></span><br><span class="line">                    background: o.interpolate(<span class="function"><span class="params">o</span> =&gt;</span> <span class="string">`rgba(210, 57, 77, <span class="subst">$&#123;o&#125;</span>)`</span>),</span><br><span class="line">                    <span class="comment">//改变transform xyz作为入参</span></span><br><span class="line">                    transform: xyz.interpolate(<span class="function">(<span class="params">x, y, z</span>) =&gt;</span> <span class="string">`translate3d(<span class="subst">$&#123;x&#125;</span>px, <span class="subst">$&#123;y&#125;</span>px, <span class="subst">$&#123;z&#125;</span>px)`</span>),</span><br><span class="line">                    <span class="comment">//直接调用interpolate方法可以合并多个值，这边border使用多个值来设定样式</span></span><br><span class="line">                    border: interpolate([o, color], (o, c) =&gt; <span class="string">`<span class="subst">$&#123;o * <span class="number">10</span>&#125;</span>px solid <span class="subst">$&#123;c&#125;</span>`</span>),</span><br><span class="line">                    <span class="comment">/*关键帧:range对应动画的阶段，output对应每一个动画阶段的输出值*/</span></span><br><span class="line">                    padding: o.interpolate(&#123; <span class="attr">range</span>: [<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>], <span class="attr">output</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>] &#125;).interpolate(<span class="function"><span class="params">o</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;o&#125;</span>%`</span>),</span><br><span class="line">                    borderColor: o.interpolate(&#123; <span class="attr">range</span>: [<span class="number">0</span>, <span class="number">1</span>], <span class="attr">output</span>: [<span class="string">'red'</span>, <span class="string">'#ffaabb'</span>] &#125;),</span><br><span class="line">                    <span class="comment">/*关键帧：省略range和output*/</span></span><br><span class="line">                    opacity: o.interpolate([<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.6</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0.1</span>, <span class="number">0.5</span>, <span class="number">1</span>])</span><br><span class="line">                &#125;&#125;</span><br><span class="line">            &gt;</span><br><span class="line">                &#123;<span class="comment">/*保留两位小数*/</span>&#125;</span><br><span class="line">                &#123;o.interpolate(<span class="function"><span class="params">n</span> =&gt;</span> n.toFixed(<span class="number">2</span>))&#125;</span><br><span class="line">            &lt;<span class="regexp">/animated.div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进度条</span></span><br><span class="line">#1.Donut.jsx</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSpring, animated, interpolate &#125; <span class="keyword">from</span> <span class="string">'react-spring'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@/styles/donut.css'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Donut4 = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; width &#125; = useSpring(&#123; <span class="attr">width</span>: <span class="number">100</span>, <span class="attr">from</span>: &#123; <span class="attr">width</span>: <span class="number">0</span> &#125; &#125;)</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div className=<span class="string">"main"</span>&gt;</span><br><span class="line">            &#123;<span class="comment">/*注意点：只有动画的属性才可以使用interpolate方法，普通的变量是不可以interpolate方法的 */</span>&#125;</span><br><span class="line">            &#123;<span class="comment">/* &lt;animated.div&gt;&#123;a.interpolate(v=&gt;v)&#125;&lt;/animated.div&gt; */</span>&#125;</span><br><span class="line">            &lt;animated.div className=<span class="string">"fill"</span> style=&#123;&#123;<span class="attr">width</span>:width.interpolate(<span class="function"><span class="params">v</span>=&gt;</span>v+<span class="string">'%'</span>)&#125;&#125;&gt;&lt;<span class="regexp">/animated.div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;animated.div className="content"&gt;&#123;width.interpolate(v=&gt;v.toFixed(0))&#125;&lt;/</span>animated.div&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Donut4;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">#2.donut.css</span></span><br><span class="line"><span class="regexp">.main&#123;</span></span><br><span class="line"><span class="regexp">    height: 50px;</span></span><br><span class="line"><span class="regexp">    line-height: 50px;</span></span><br><span class="line"><span class="regexp">    text-align: center;</span></span><br><span class="line"><span class="regexp">    position: relative;</span></span><br><span class="line"><span class="regexp">    width: 500px;</span></span><br><span class="line"><span class="regexp">    color: red;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">.main .fill&#123;</span></span><br><span class="line"><span class="regexp">    height: 100%;</span></span><br><span class="line"><span class="regexp">    background: blue;</span></span><br><span class="line"><span class="regexp">    border-radius: 10px;</span></span><br><span class="line"><span class="regexp">    position: absolute;</span></span><br><span class="line"><span class="regexp">    left: 0px;</span></span><br><span class="line"><span class="regexp">    top: 0px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">.main .content&#123;</span></span><br><span class="line"><span class="regexp">    z-index: 999;</span></span><br><span class="line"><span class="regexp">    position: absolute;</span></span><br><span class="line"><span class="regexp">    left: 0px;</span></span><br><span class="line"><span class="regexp">    top: 0px;</span></span><br><span class="line"><span class="regexp">    width: 100%;</span></span><br><span class="line"><span class="regexp">    height: 100%;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-useSpring的用法"><a href="#1-3-useSpring的用法" class="headerlink" title="1.3 useSpring的用法"></a>1.3 useSpring的用法</h3><h4 id="a-通过state切换动画"><a href="#a-通过state切换动画" class="headerlink" title="a) 通过state切换动画"></a>a) 通过state切换动画</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSpring, animated, interpolate &#125; <span class="keyword">from</span> <span class="string">'react-spring'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//注意：react-spring只能在hooks中使用，hooks是函数组件的新特性</span></span><br><span class="line">    <span class="comment">//因此react-spring只能在函数组件中用，函数组件中要声明state，需要借助useState()来完成</span></span><br><span class="line">    <span class="comment">//注意点：函数组件中没有this</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.声明一个state</span></span><br><span class="line">    <span class="keyword">const</span> [flag, setFlag] = useState(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.改变透明度动画 这边to的状态受到flag这个state控制</span></span><br><span class="line">    <span class="keyword">const</span> animation = useSpring(&#123;</span><br><span class="line">        <span class="keyword">from</span>: &#123; <span class="attr">opacity</span>: <span class="number">0</span> &#125;,</span><br><span class="line">        to: &#123; <span class="attr">opacity</span>: flag ? <span class="number">1</span> : <span class="number">0</span> &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;animated.h1 style=&#123;animation&#125;&gt;Hello World&lt;<span class="regexp">/animated.h1&gt;</span></span><br><span class="line"><span class="regexp">            &#123;/</span>*点击按钮的时候切换state状态，从而切换动画*<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">            &lt;button onClick=&#123;()=&gt;&#123;setFlag(state=&gt;!state)&#125;&#125;&gt;点我切换&lt;/</span>button&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例---点击翻转图片</span></span><br><span class="line">#1.App.jsx</span><br><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSpring, animated, interpolate &#125; <span class="keyword">from</span> <span class="string">'react-spring'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./app.css'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> [flipped, setFlipped] = useState(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">const</span> &#123; transform, opacity &#125; = useSpring(&#123;</span><br><span class="line">        opacity: flipped ? <span class="number">1</span> : <span class="number">0</span>,</span><br><span class="line">        transform: <span class="string">`perspective(600px) rotateX(<span class="subst">$&#123;flipped ? <span class="number">180</span> : <span class="number">0</span>&#125;</span>deg)`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div onClick=&#123;() =&gt; setFlipped(<span class="function"><span class="params">state</span> =&gt;</span> !state)&#125;&gt;</span><br><span class="line">            &lt;animated.div className=<span class="string">"c back"</span> style=&#123;&#123; <span class="attr">opacity</span>: opacity.interpolate(<span class="function"><span class="params">o</span> =&gt;</span> <span class="number">1</span> - o), transform &#125;&#125; /&gt;</span><br><span class="line">            &lt;animated.div className=<span class="string">"c front"</span> style=&#123;&#123; opacity, <span class="attr">transform</span>: transform.interpolate(<span class="function"><span class="params">t</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;t&#125;</span> rotateX(180deg)`</span>) &#125;&#125; /&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">#2.app.css</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">html,</span></span><br><span class="line"><span class="regexp">body,</span></span><br><span class="line"><span class="regexp">#app &#123;</span></span><br><span class="line"><span class="regexp">  margin: 0;</span></span><br><span class="line"><span class="regexp">  padding: 0;</span></span><br><span class="line"><span class="regexp">  height: 100%;</span></span><br><span class="line"><span class="regexp">  width: 100%;</span></span><br><span class="line"><span class="regexp">  overflow: hidden;</span></span><br><span class="line"><span class="regexp">  user-select: none;</span></span><br><span class="line"><span class="regexp">  background: #f0f0f0;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">#app &gt; div &#123;</span></span><br><span class="line"><span class="regexp">  width: 100%;</span></span><br><span class="line"><span class="regexp">  height: 100%;</span></span><br><span class="line"><span class="regexp">  display: flex;</span></span><br><span class="line"><span class="regexp">  align-items: center;</span></span><br><span class="line"><span class="regexp">  justify-content: center;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">.c &#123;</span></span><br><span class="line"><span class="regexp">  position: absolute;</span></span><br><span class="line"><span class="regexp">  max-width: 500px;</span></span><br><span class="line"><span class="regexp">  max-height: 500px;</span></span><br><span class="line"><span class="regexp">  width: 50ch;</span></span><br><span class="line"><span class="regexp">  height: 50ch;</span></span><br><span class="line"><span class="regexp">  cursor: pointer;</span></span><br><span class="line"><span class="regexp">  will-change: transform, opacity;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">.front,</span></span><br><span class="line"><span class="regexp">.back &#123;</span></span><br><span class="line"><span class="regexp">  background-size: cover;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">.back &#123;</span></span><br><span class="line"><span class="regexp">  background-image: url(https:/</span><span class="regexp">/images.unsplash.com/</span>photo<span class="number">-1544511916</span><span class="number">-0148</span>ccdeb877?ixlib=rb<span class="number">-1.2</span><span class="number">.1</span>&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;w=<span class="number">1901</span>&amp;q=<span class="number">80</span>i&amp;auto=format&amp;fit=crop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.front &#123;</span><br><span class="line">  background-image: url(https:<span class="comment">//images.unsplash.com/photo-1540206395-68808572332f?ixlib=rb-1.2.1&amp;w=1181&amp;q=80&amp;auto=format&amp;fit=crop);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="b-手动切换动画"><a href="#b-手动切换动画" class="headerlink" title="b) 手动切换动画"></a>b) 手动切换动画</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSpring, animated, interpolate &#125; <span class="keyword">from</span> <span class="string">'react-spring'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1.useSpring()接收箭头函数，此时会返回一个数组</span></span><br><span class="line">    <span class="comment">//通过解构赋值获取到useSpring()函数返回的结果  animation表示动画属性，set可以用来修改动画属性，stop可以用来停止动画</span></span><br><span class="line">    <span class="keyword">const</span> [animation, <span class="keyword">set</span>, stop] = useSpring(() =&gt; (&#123; opacity: <span class="number">0</span> &#125;))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;<span class="comment">/*2.鼠标移入和移出改变透明度*/</span>&#125;</span><br><span class="line">            &lt;animated.div style=&#123;animation&#125; onMouseOver=&#123;()=&gt;&#123;<span class="keyword">set</span>(&#123;opacity:<span class="number">1</span>&#125;)&#125;&#125; onMouseOut=&#123;()=&gt;&#123;<span class="keyword">set</span>(&#123;opacity:<span class="number">0</span>&#125;)&#125;&#125;&gt;i will fade&lt;<span class="regexp">/animated.div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例-图层移动</span></span><br><span class="line">#1.App.jsx</span><br><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSpring, animated, interpolate &#125; <span class="keyword">from</span> <span class="string">'react-spring'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./app.css'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//根据鼠标位置计算相对于图片中心点的坐标</span></span><br><span class="line">    <span class="keyword">const</span> calc = <span class="function">(<span class="params">x, y</span>) =&gt;</span> [x - <span class="built_in">window</span>.innerWidth / <span class="number">2</span>, y - <span class="built_in">window</span>.innerHeight / <span class="number">2</span>]</span><br><span class="line">    <span class="comment">//不同的图片给于不同的动画函数</span></span><br><span class="line">    <span class="keyword">const</span> trans1 = <span class="function">(<span class="params">x, y</span>) =&gt;</span> <span class="string">`translate3d(<span class="subst">$&#123;x <span class="regexp">/ 10&#125;px,$&#123;y /</span> <span class="number">10</span>&#125;</span>px,0)`</span></span><br><span class="line">    <span class="keyword">const</span> trans2 = <span class="function">(<span class="params">x, y</span>) =&gt;</span> <span class="string">`translate3d(<span class="subst">$&#123;x <span class="regexp">/ 8 + 35&#125;px,$&#123;y /</span> <span class="number">8</span> - <span class="number">230</span>&#125;</span>px,0)`</span></span><br><span class="line">    <span class="keyword">const</span> trans3 = <span class="function">(<span class="params">x, y</span>) =&gt;</span> <span class="string">`translate3d(<span class="subst">$&#123;x <span class="regexp">/ 6 - 250&#125;px,$&#123;y /</span> <span class="number">6</span> - <span class="number">200</span>&#125;</span>px,0)`</span></span><br><span class="line">    <span class="keyword">const</span> trans4 = <span class="function">(<span class="params">x, y</span>) =&gt;</span> <span class="string">`translate3d(<span class="subst">$&#123;x <span class="regexp">/ 3.5&#125;px,$&#123;y /</span> <span class="number">3.5</span>&#125;</span>px,0)`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建动画(这边只入参xy 然后再根据入参的xy计算每个div的动画属性)</span></span><br><span class="line">    <span class="keyword">const</span> [amimation, <span class="keyword">set</span>] = useSpring(() =&gt; (&#123; xy: [<span class="number">0</span>, <span class="number">0</span>], <span class="attr">config</span>: &#123; <span class="attr">mass</span>: <span class="number">10</span>, <span class="attr">tension</span>: <span class="number">550</span>, <span class="attr">friction</span>: <span class="number">140</span> &#125; &#125;))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (<span class="comment">/*根据鼠标位置，计算xy*/</span></span><br><span class="line">        &lt;div className=<span class="string">"container"</span> onMouseMove=&#123;(&#123; <span class="attr">clientX</span>: x, <span class="attr">clientY</span>: y &#125;) =&gt; <span class="keyword">set</span>(&#123; xy: calc(x, y) &#125;)&#125;&gt;</span><br><span class="line">            &lt;animated.div className=<span class="string">"card1"</span> style=&#123;&#123; <span class="attr">transform</span>: amimation.xy.interpolate(trans1) &#125;&#125; /&gt;</span><br><span class="line">            &lt;animated.div className=<span class="string">"card2"</span> style=&#123;&#123; <span class="attr">transform</span>: amimation.xy.interpolate(trans2) &#125;&#125; /&gt;</span><br><span class="line">            &lt;animated.div className=<span class="string">"card3"</span> style=&#123;&#123; <span class="attr">transform</span>: amimation.xy.interpolate(trans3) &#125;&#125; /&gt;</span><br><span class="line">            &lt;animated.div className=<span class="string">"card4"</span> style=&#123;&#123; <span class="attr">transform</span>: amimation.xy.interpolate(trans4) &#125;&#125; /&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">#2.app.css</span></span><br><span class="line"><span class="regexp">html,</span></span><br><span class="line"><span class="regexp">body,</span></span><br><span class="line"><span class="regexp">#app &#123;</span></span><br><span class="line"><span class="regexp">  width: 100%;</span></span><br><span class="line"><span class="regexp">  height: 100%;</span></span><br><span class="line"><span class="regexp">  margin: 0;</span></span><br><span class="line"><span class="regexp">  padding: 0;</span></span><br><span class="line"><span class="regexp">  background-color: white;</span></span><br><span class="line"><span class="regexp">  overflow: hidden;</span></span><br><span class="line"><span class="regexp">  background: #f0f0f0;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">body &#123;</span></span><br><span class="line"><span class="regexp">  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, ubuntu,</span></span><br><span class="line"><span class="regexp">    roboto, noto, segoe ui, arial, sans-serif;</span></span><br><span class="line"><span class="regexp">  background: transparent;</span></span><br><span class="line"><span class="regexp">  -webkit-touch-callout: none;</span></span><br><span class="line"><span class="regexp">  -webkit-user-select: none;</span></span><br><span class="line"><span class="regexp">  -khtml-user-select: none;</span></span><br><span class="line"><span class="regexp">  -moz-user-select: none;</span></span><br><span class="line"><span class="regexp">  -ms-user-select: none;</span></span><br><span class="line"><span class="regexp">  user-select: none;</span></span><br><span class="line"><span class="regexp">  cursor: default;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">.card1,</span></span><br><span class="line"><span class="regexp">.card2,</span></span><br><span class="line"><span class="regexp">.card3,</span></span><br><span class="line"><span class="regexp">.card4 &#123;</span></span><br><span class="line"><span class="regexp">  position: absolute;</span></span><br><span class="line"><span class="regexp">  border-radius: 5px;</span></span><br><span class="line"><span class="regexp">  background-size: cover;</span></span><br><span class="line"><span class="regexp">  background-position: center center;</span></span><br><span class="line"><span class="regexp">  background-repeat: no-repeat;</span></span><br><span class="line"><span class="regexp">  will-change: transform;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">.card1 &#123;</span></span><br><span class="line"><span class="regexp">  min-width: 60ch;</span></span><br><span class="line"><span class="regexp">  min-height: 60ch;</span></span><br><span class="line"><span class="regexp">  width: 45vw;</span></span><br><span class="line"><span class="regexp">  height: 45vw;</span></span><br><span class="line"><span class="regexp">  max-width: 100ch;</span></span><br><span class="line"><span class="regexp">  max-height: 100ch;</span></span><br><span class="line"><span class="regexp">  background-image: url(https:/</span><span class="regexp">/image.flaticon.com/i</span>cons/svg/<span class="number">119</span>/<span class="number">119596.</span>svg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card2 &#123;</span><br><span class="line">  width: <span class="number">25</span>ch;</span><br><span class="line">  height: <span class="number">25</span>ch;</span><br><span class="line">  background-image: url(https:<span class="comment">//image.flaticon.com/icons/svg/789/789395.svg);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card3 &#123;</span><br><span class="line">  opacity: <span class="number">0.9</span>;</span><br><span class="line">  width: <span class="number">25</span>ch;</span><br><span class="line">  height: <span class="number">25</span>ch;</span><br><span class="line">  background-image: url(https:<span class="comment">//image.flaticon.com/icons/svg/414/414927.svg);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card4 &#123;</span><br><span class="line">  width: <span class="number">25</span>ch;</span><br><span class="line">  height: <span class="number">25</span>ch;</span><br><span class="line">  background-image: url(https:<span class="comment">//image.flaticon.com/icons/svg/789/789392.svg);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.container &#123;</span><br><span class="line">  width: <span class="number">100</span>%;</span><br><span class="line">  height: <span class="number">100</span>%;</span><br><span class="line">  display: flex;</span><br><span class="line">  align-items: center;</span><br><span class="line">  justify-content: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-useSprings的用法"><a href="#1-4-useSprings的用法" class="headerlink" title="1.4 useSprings的用法"></a>1.4 useSprings的用法</h3><p>useSpring用来创建一个Spring，useSprings可以用来创建一组Spring，每个Spring都有自己的配置。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSprings, animated &#125; <span class="keyword">from</span> <span class="string">'react-spring'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> items = [<span class="number">0.2</span>, <span class="number">0.4</span>, <span class="number">0.6</span>, <span class="number">0.8</span>, <span class="number">1.0</span>];</span><br><span class="line">    <span class="keyword">const</span> springs = useSprings(<span class="number">5</span>, items.map(<span class="function"><span class="params">item</span> =&gt;</span> (&#123; <span class="attr">from</span>: &#123; <span class="attr">opacity</span>: <span class="number">0</span> &#125;, <span class="attr">to</span>: &#123; <span class="attr">opacity</span>: item &#125; &#125;)))</span><br><span class="line">    <span class="keyword">return</span> springs.map(<span class="function">(<span class="params">p, idx</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">animated.div</span> <span class="attr">key</span>=<span class="string">&#123;idx&#125;</span> <span class="attr">style</span>=<span class="string">&#123;p&#125;</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">animated.div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><h3 id="1-5-useTrail的用法"><a href="#1-5-useTrail的用法" class="headerlink" title="1.5 useTrail的用法"></a>1.5 useTrail的用法</h3><p>useTrail可以用来创建一组Spring，每个Spring都有相同的配置，每个Spring跟随前一个Spring，在交叉的动画中使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTrail, animated &#125; <span class="keyword">from</span> <span class="string">'react-spring'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//这种写法可以</span></span><br><span class="line">    <span class="comment">//const trail = useTrail(5, &#123;opacity: 1&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这种写法也可以</span></span><br><span class="line">    <span class="keyword">const</span> [trail, <span class="keyword">set</span>, stop] = useTrail(5, () =&gt; (&#123; opacity: <span class="number">1</span> &#125;))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;trail.map((p, idx) =&gt; <span class="tag">&lt;<span class="name">animated.div</span> <span class="attr">key</span>=<span class="string">&#123;idx&#125;</span> <span class="attr">style</span>=<span class="string">&#123;p&#125;</span> &gt;</span>哈哈<span class="tag">&lt;/<span class="name">animated.div</span>&gt;</span>)&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; set(&#123; opacity: 0 &#125;) &#125;&#125;&gt;点我改变透明度<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><h3 id="1-6-useTransition的用法"><a href="#1-6-useTransition的用法" class="headerlink" title="1.6 useTransition的用法"></a>1.6 useTransition的用法</h3><p>一个动画组，根据items的增加删除移动，会开启对应的动画</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例---切换一组数据</span></span><br><span class="line"><span class="keyword">import</span> React,&#123;useState&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTransition, animated &#125; <span class="keyword">from</span> <span class="string">'react-spring'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [items, setItems] = useState([&#123;<span class="attr">text</span>:<span class="string">'zhangsan'</span>,<span class="attr">key</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">text</span>:<span class="string">'lisi'</span>,<span class="attr">key</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">text</span>:<span class="string">'wangwu'</span>,<span class="attr">key</span>:<span class="number">3</span>&#125;])</span><br><span class="line">    <span class="keyword">const</span> transitions = useTransition(items, item =&gt; item.key, &#123;</span><br><span class="line">        <span class="keyword">from</span>: &#123; <span class="attr">transform</span>: <span class="string">'translate3d(0,-40px,0)'</span> &#125;,</span><br><span class="line">        enter: &#123; <span class="attr">transform</span>: <span class="string">'translate3d(0,0px,0)'</span> &#125;,</span><br><span class="line">        leave: &#123; <span class="attr">transform</span>: <span class="string">'translate3d(0,-40px,0)'</span> &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(transitions)</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;setItems(state=&gt;[&#123;text:'zhaoliu',key:12&#125;,...state])&#125;&#125;&gt;增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;</span></span><br><span class="line"><span class="xml">            transitions.map((&#123; item, props, key &#125;) =&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">animated.div</span> <span class="attr">key</span>=<span class="string">&#123;key&#125;</span> <span class="attr">style</span>=<span class="string">&#123;props&#125;</span>&gt;</span>&#123;item.text&#125;<span class="tag">&lt;/<span class="name">animated.div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        )</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例---切换组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTransition, animated &#125; <span class="keyword">from</span> <span class="string">'react-spring'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [toggle, setToggle] = useState(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">const</span> transitions = useTransition(toggle, <span class="literal">null</span>, &#123;</span><br><span class="line">        <span class="keyword">from</span>: &#123; <span class="attr">position</span>: <span class="string">'absolute'</span>, <span class="attr">opacity</span>: <span class="number">0</span> &#125;,</span><br><span class="line">        enter: &#123; <span class="attr">opacity</span>: <span class="number">1</span> &#125;,</span><br><span class="line">        leave: &#123; <span class="attr">opacity</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(transitions)</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; setToggle(state =&gt; !state) &#125;&#125;&gt;切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;</span></span><br><span class="line"><span class="xml">            transitions.map((&#123; item, key, props &#125;) =&gt;</span></span><br><span class="line">                &lt;React.Fragment key=&#123;key&#125;&gt;</span><br><span class="line">                    &#123;item &amp;&amp; &lt;animated.div key=&#123;key&#125; style=&#123;props&#125;&gt;切换单个组件&lt;/animated.div&gt;&#125;</span><br><span class="line">                    &#123;/* &#123;item ? &lt;animated.div style=&#123;props&#125;&gt;组件1&lt;/animated.div&gt; : &lt;animated.div style=&#123;props&#125;&gt;组件2&lt;/animated.div&gt;&#125; */&#125;</span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line"><span class="xml">            )</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例：切换路由</span></span><br><span class="line">#App.jsx</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">'@/components2/About'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'@/components2/Home'</span></span><br><span class="line"><span class="keyword">import</span> Search <span class="keyword">from</span> <span class="string">'@/components2/Search'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useTransition, animated &#125; <span class="keyword">from</span> <span class="string">'react-spring'</span></span><br><span class="line"><span class="keyword">import</span> &#123;  Route, Link, Switch,useLocation &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App2 = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> location = useLocation();</span><br><span class="line">    <span class="keyword">const</span> transitions = useTransition(location, location =&gt; location.pathname, &#123;</span><br><span class="line">        <span class="keyword">from</span>: &#123; <span class="attr">position</span>: <span class="string">'absolute'</span>, <span class="attr">opacity</span>: <span class="number">0</span>,<span class="attr">transform</span>: <span class="string">'translate3d(0,-40px,0)'</span> &#125;,</span><br><span class="line">        enter: &#123; <span class="attr">opacity</span>: <span class="number">1</span>,<span class="attr">transform</span>: <span class="string">'translate3d(0,0px,0)'</span> &#125;,</span><br><span class="line">        leave: &#123; <span class="attr">opacity</span>: <span class="number">0</span>,<span class="attr">transform</span>: <span class="string">'translate3d(0,-40px,0)'</span> &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;Link to=<span class="string">"/"</span>&gt;来到首页&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Link to="/</span>about<span class="string">"&gt;来到About&lt;/Link&gt;</span></span><br><span class="line"><span class="string">            &lt;Link to="</span>/search<span class="string">"&gt;来到Search&lt;/Link&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &#123;transitions.map((&#123; item, props, key &#125;) =&gt; (</span></span><br><span class="line"><span class="string">                &lt;animated.div key=&#123;key&#125; style=&#123;props&#125;&gt;</span></span><br><span class="line"><span class="string">                    &lt;Switch&gt;</span></span><br><span class="line"><span class="string">                        &lt;Route path='/' exact component=&#123;Home&#125; /&gt;</span></span><br><span class="line"><span class="string">                        &lt;Route path='/about' component=&#123;About&#125; /&gt;</span></span><br><span class="line"><span class="string">                        &lt;Route path='/search' strict component=&#123;Search&#125; /&gt;</span></span><br><span class="line"><span class="string">                    &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">                &lt;/animated.div&gt;</span></span><br><span class="line"><span class="string">            ))&#125;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default App2;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#main.js</span></span><br><span class="line"><span class="string">ReactDom.render(&lt;HashRouter&gt;&lt;App2&gt;&lt;/App2&gt;&lt;/HashRouter&gt;,document.getElementById("</span>app<span class="string">"))</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//背景轮播图案例</span></span><br><span class="line"></span><br><span class="line">#1.App.jsx</span><br><span class="line"><span class="keyword">import</span> React, &#123; useState,useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTransition, animated &#125; <span class="keyword">from</span> <span class="string">'react-spring'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./app.css'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> slides = [</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">url</span>: <span class="string">'photo-1544511916-0148ccdeb877?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;w=1901&amp;q=80i'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">url</span>: <span class="string">'photo-1544572571-ab94fd872ce4?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;w=1534&amp;q=80'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">url</span>: <span class="string">'reserve/bnW1TuTV2YGcoh1HyWNQ_IMG_0207.JPG?ixlib=rb-1.2.1&amp;w=1534&amp;q=80'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">url</span>: <span class="string">'photo-1540206395-68808572332f?ixlib=rb-1.2.1&amp;w=1181&amp;q=80'</span> &#125;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> [index, setIndex] = useState(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> transitions = useTransition(slides[index], item =&gt; item.id, &#123;</span><br><span class="line">        <span class="keyword">from</span>: &#123; <span class="attr">opacity</span>: <span class="number">0</span> &#125;,</span><br><span class="line">        enter: &#123; <span class="attr">opacity</span>: <span class="number">1</span> &#125;,</span><br><span class="line">        leave: &#123; <span class="attr">opacity</span>: <span class="number">0</span> &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在hooks中，使用useEffect，可以直接在函数组件内处理生命周期事件。 </span></span><br><span class="line">    <span class="comment">//如果你熟悉 React class 的生命周期函数，你可以把 useEffect Hook 看做 componentDidMount，componentDidUpdate 和 componentWillUnmount 这三个函数的组合</span></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span> setInterval(<span class="function"><span class="params">()</span> =&gt;</span> setIndex(<span class="function"><span class="params">state</span> =&gt;</span> (state + <span class="number">1</span>) % <span class="number">4</span>), <span class="number">2000</span>), [])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;</span></span><br><span class="line"><span class="xml">            transitions.map((&#123; item, props, key &#125;) =&gt; (</span></span><br><span class="line">                &lt;animated.div</span><br><span class="line">                    key=&#123;key&#125;</span><br><span class="line">                    className="bg"</span><br><span class="line">                    style=&#123;&#123; ...props, backgroundImage: `url(https://images.unsplash.com/$&#123;item.url&#125;&amp;auto=format&amp;fit=crop)` &#125;&#125;</span><br><span class="line"><span class="xml">                /&gt;</span></span><br><span class="line"><span class="xml">            ))</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br><span class="line"></span><br><span class="line">#2.app.css</span><br><span class="line"></span><br><span class="line">.App &#123;</span><br><span class="line">    font-family: sans-serif;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .bg &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: <span class="number">0</span>;</span><br><span class="line">    left: <span class="number">0</span>;</span><br><span class="line">    width: <span class="number">100</span>vw;</span><br><span class="line">    height: <span class="number">100</span>vh;</span><br><span class="line">    background-size: cover;</span><br><span class="line">    background-position: center;</span><br><span class="line">    will-change: opacity;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="1-7-useChain的用法"><a href="#1-7-useChain的用法" class="headerlink" title="1.7 useChain的用法"></a>1.7 useChain的用法</h3><p>useChain可以让一系列动画沿着一定的序列运行</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The spring will start right away: 0.0 * 1000ms = 0ms</span></span><br><span class="line"><span class="comment">// The transition will start after: 0.5 * 1000ms (the timeFrame default) = 500ms</span></span><br><span class="line">useChain([springRef, transitionRef], [<span class="number">0</span>, <span class="number">0.5</span>]) <span class="comment">/*1000*/</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例：点击div展开子控件</span></span><br><span class="line">#1.App.jsx</span><br><span class="line"><span class="keyword">import</span> React, &#123; useState, useRef &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTransition, useSpring, useChain, animated &#125; <span class="keyword">from</span> <span class="string">'react-spring'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./app.css'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> data = [&#123; <span class="attr">name</span>: <span class="number">1</span>, <span class="attr">css</span>: <span class="string">"red"</span> &#125;, &#123; <span class="attr">name</span>: <span class="number">2</span>, <span class="attr">css</span>: <span class="string">"blue"</span> &#125;, &#123; <span class="attr">name</span>: <span class="number">3</span>, <span class="attr">css</span>: <span class="string">"yellow"</span> &#125;, &#123; <span class="attr">name</span>: <span class="number">4</span>, <span class="attr">css</span>: <span class="string">"pink"</span> &#125;];</span><br><span class="line">    <span class="comment">//定义一个open state用于控制窗口是否被打开</span></span><br><span class="line">    <span class="keyword">const</span> [open, setOpen] = useState(<span class="literal">false</span>)</span><br><span class="line">    <span class="comment">//创建一个springRef的引用</span></span><br><span class="line">    <span class="keyword">const</span> springRef = useRef()</span><br><span class="line">    <span class="comment">//创建Spring动画,作用是当open为true的时候，让父盒子变大</span></span><br><span class="line">    <span class="keyword">const</span> &#123; size, background, ...rest &#125; = useSpring(&#123;</span><br><span class="line">        ref: springRef,</span><br><span class="line">        <span class="keyword">from</span>: &#123; <span class="attr">size</span>: <span class="string">'30%'</span>, <span class="attr">background</span>: <span class="string">'hotpink'</span> &#125;,</span><br><span class="line">        to: &#123; <span class="attr">size</span>: open ? <span class="string">'100%'</span> : <span class="string">'30%'</span>, <span class="attr">background</span>: open ? <span class="string">'white'</span> : <span class="string">'hotpink'</span> &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个transRef的引用</span></span><br><span class="line">    <span class="keyword">const</span> transRef = useRef()</span><br><span class="line">    <span class="comment">//创建过渡动画(当父盒子打开后，若干子盒子呈现)</span></span><br><span class="line">    <span class="keyword">const</span> transitions = useTransition(open ? data : [], item =&gt; item.name, &#123;</span><br><span class="line">        ref: transRef,</span><br><span class="line">        unique: <span class="literal">true</span>, <span class="comment">//动画进入和离开使用相同的key</span></span><br><span class="line">        trail: <span class="number">400</span>/data.length,  <span class="comment">//动画的延迟时间</span></span><br><span class="line">        <span class="keyword">from</span>: &#123; <span class="attr">opacity</span>: <span class="number">0</span>, <span class="attr">transform</span>: <span class="string">'scale(0)'</span> &#125;,</span><br><span class="line">        enter: &#123; <span class="attr">opacity</span>: <span class="number">1</span>, <span class="attr">transform</span>: <span class="string">'scale(1)'</span> &#125;,</span><br><span class="line">        leave: &#123; <span class="attr">opacity</span>: <span class="number">0</span>, <span class="attr">transform</span>: <span class="string">'scale(0)'</span> &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建动画链  当open是true，先执行springRef动画；否则先执行transRef动画</span></span><br><span class="line">    <span class="comment">// 当open为true，0~0.1执行springRef动画，0.1之后执行transRef动画</span></span><br><span class="line">    <span class="comment">// 当open为false，0~0.6执行transRef动画，0.6之后执行springRef动画</span></span><br><span class="line">    useChain(open ? [springRef, transRef] : [transRef, springRef], [<span class="number">0</span>, open ? <span class="number">0.1</span> : <span class="number">0.6</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;animated.div className=<span class="string">"parent"</span> style=&#123;&#123; <span class="attr">width</span>: size, <span class="attr">height</span>: size, background &#125;&#125; onClick=&#123;() =&gt; setOpen(<span class="function"><span class="params">open</span> =&gt;</span> !open)&#125;&gt;</span><br><span class="line">            &#123;transitions.map(<span class="function">(<span class="params">&#123; item, key, props &#125;</span>) =&gt;</span> (</span><br><span class="line">                &lt;animated.div className=<span class="string">"item"</span> key=&#123;key&#125; style=&#123;&#123; ...props, <span class="attr">background</span>: item.css &#125;&#125; /&gt;</span><br><span class="line">            ))&#125;</span><br><span class="line">        &lt;<span class="regexp">/animated.div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">#2.app.css</span></span><br><span class="line"><span class="regexp">html,body,#app&#123;</span></span><br><span class="line"><span class="regexp">    width: 100%;</span></span><br><span class="line"><span class="regexp">    height: 100%;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">body&#123;</span></span><br><span class="line"><span class="regexp">    background: cornflowerblue;</span></span><br><span class="line"><span class="regexp">    padding: 50px;</span></span><br><span class="line"><span class="regexp">    box-sizing: border-box;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">.parent&#123;</span></span><br><span class="line"><span class="regexp">    margin: 0 auto;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">.item&#123;</span></span><br><span class="line"><span class="regexp">   width: 100px;</span></span><br><span class="line"><span class="regexp">   height: 100px;</span></span><br><span class="line"><span class="regexp">   display: inline-block; </span></span><br><span class="line"><span class="regexp">   margin-left: 20px;</span></span><br><span class="line"><span class="regexp">   margin-top: 20px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>formik和yup</title>
      <link href="/2019/06/29/formik%E5%92%8Cyup/"/>
      <url>/2019/06/29/formik%E5%92%8Cyup/</url>
      
        <content type="html"><![CDATA[<h1 id="1-formik-yup"><a href="#1-formik-yup" class="headerlink" title="1.formik+yup"></a>1.formik+yup</h1><p>formik文档</p><p><a href="https://jaredpalmer.com/formik/docs/api/formik#props" target="_blank" rel="noopener">https://jaredpalmer.com/formik/docs/api/formik#props</a></p><p>yup文档</p><p><a href="https://github.com/jquense/yup#yup" target="_blank" rel="noopener">https://github.com/jquense/yup#yup</a></p><p>表单操作在React中一直是一件比较繁琐的事情，使用formik可以极大的简化表单操作，formik的slogan就是 Build forms in React, without the tears 😭 </p><h2 id="1-1-formik介绍"><a href="#1-1-formik介绍" class="headerlink" title="1.1 formik介绍"></a>1.1 formik介绍</h2><p>当我们想要访问表单中的input控件的值时，通常有两种操作，一种是使用ref去得到dom结构，第二种是使用state存储value。首先，针对于第一种情况，虽然使用ref能够让我们很方便的获取到dom节点，进而获取input的值，但是需要注意的是当我们在使用React的时候，我们需要时刻告诉自己，不要直接操作dom！不要直接操作dom！不要直接操作dom！官方也是不推荐该做法的； 对于第二种做法，虽然这是官方推荐的做法，当时由于绑定了state，所以form表单中的控件也变成了受控组件，如果我们想真正改动其数据，我们往往需要再绑定一个onChange事件，当控件过多时，操作也是非常繁琐的。</p><p>而formik的出现，将表单操作化繁为简，使得表单操作变得非常的简单。formik不仅提供了针对的表单的状态管理，还能很方便的对表单做规则校验。其实formik的原理很简单：它内置了表单的state管理操作，无需我们在单独为表单建立state，同时使用了Context，能够让表单组件多层嵌套，不再需要我们一层层传递。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>npm</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install formik --save</span><br></pre></td></tr></table></figure><p>要么</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add formik</span><br></pre></td></tr></table></figure><p>Formik与React v15 +兼容，并与ReactDOM和React Native一起使用。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p> <img src="/" alt="img" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/10769576-f46a2b762c50bf87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500/format/webp"> </p><p>我们该表单作为例子，表单包含了姓名，性别，年龄三个字段，一个提交按钮，给定表单规则如下：</p><ul><li>姓名（name）: 必填非空</li><li>性别（gender）: 必选非空</li><li>年龄（age）:必填非空，大于0的整数</li></ul><p>formik提供了一个名为<code>Formik</code>的组件，组件包含了initialValues，validate,onSubmit,render等props（不限于此，列举出来的只是当前用到的关键的props，完整结构详解Formik API，下面解释一个各个prop作用：</p><ul><li>initialValues：初始化表单的数据</li><li>validate：表单规则校验，返回一个错误信息的对象</li><li>onSubmit: 获得表单各个字段，自定义自己的业务操作</li><li>render: 表单内部的children组件</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Formik &#125; <span class="keyword">from</span> <span class="string">'formik'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BasicExample = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;My Form&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Formik</span></span><br><span class="line"><span class="regexp">      initialValues=&#123;&#123; name: 'jared' &#125;&#125;</span></span><br><span class="line"><span class="regexp">      onSubmit=&#123;(values, actions) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">        setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          alert(JSON.stringify(values, null, 2));</span></span><br><span class="line"><span class="regexp">          actions.setSubmitting(false);</span></span><br><span class="line"><span class="regexp">        &#125;, 1000);</span></span><br><span class="line"><span class="regexp">      &#125;&#125;</span></span><br><span class="line"><span class="regexp">    &gt;</span></span><br><span class="line"><span class="regexp">      &#123;props =&gt; (</span></span><br><span class="line"><span class="regexp">        &lt;form onSubmit=&#123;props.handleSubmit&#125;&gt;</span></span><br><span class="line"><span class="regexp">          &lt;input</span></span><br><span class="line"><span class="regexp">            type="text"</span></span><br><span class="line"><span class="regexp">            onChange=&#123;props.handleChange&#125;</span></span><br><span class="line"><span class="regexp">            onBlur=&#123;props.handleBlur&#125;</span></span><br><span class="line"><span class="regexp">            value=&#123;props.values.name&#125;</span></span><br><span class="line"><span class="regexp">            name="name"</span></span><br><span class="line"><span class="regexp">          /</span>&gt;</span><br><span class="line">          &#123;props.errors.name &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"feedback"</span>&gt;</span>&#123;props.errors.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;</span><br><span class="line">          &lt;button type=<span class="string">"submit"</span>&gt;Submit&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>form&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;<span class="regexp">/Formik&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>针对内部的表单，render方法会传入一个props，props包括了values，errors，handleSubmit，handleChange，handleBlur等属性（更详细的内容参见<a href="https://jaredpalmer.com/formik/docs/api/formik#dirty-boolean" target="_blank" rel="noopener">完整props</a>，其中：</p><ul><li>values：对应的就是表单各项数据</li><li>errors：validate所返回的表单校验后的错误信息</li><li>touched：表示表单内的控件是否已经被操作过</li><li>handleSubmit：是表单触发提交事件后的formik对提交流程处理事件，规则校验就在其中</li><li>handleChane: 更改表单数据的事件</li><li>handleBlur: 控件失去焦点后的操作事件，会进行对表单进行规则校验的流程</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;Formik</span><br><span class="line">          initialValues=&#123;&#123;</span><br><span class="line">            name: <span class="string">""</span>,</span><br><span class="line">            gender: <span class="string">""</span>,</span><br><span class="line">            age: <span class="string">""</span></span><br><span class="line">          &#125;&#125;</span><br><span class="line">          validate=&#123;values =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> errors = &#123;&#125;;</span><br><span class="line">            <span class="keyword">if</span> (values.name.length === <span class="number">0</span>) &#123;</span><br><span class="line">              errors.name = <span class="string">"Name can not be empty"</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (values.gender.length === <span class="number">0</span>) &#123;</span><br><span class="line">              errors.gender = <span class="string">"You must choose a gender"</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (values.age &lt;= <span class="number">0</span> || values.age % <span class="number">1</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">              errors.age = <span class="string">"Age must be a Positive Integer"</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> errors;</span><br><span class="line">          &#125;&#125;</span><br><span class="line">          onSubmit=&#123;(values) =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(values)</span><br><span class="line">          &#125;&#125;</span><br><span class="line">          render=&#123;props =&gt;</span><br><span class="line">            &lt;form onSubmit=&#123;props.handleSubmit&#125;&gt;</span><br><span class="line">              &lt;div className=<span class="string">"content"</span>&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                  &lt;label&gt;姓名： &lt;<span class="regexp">/label&gt;&lt;input type="text" id="name" name="name" value=&#123;props.values.name&#125;</span></span><br><span class="line"><span class="regexp">                                            onChange=&#123;props.handleChange&#125; onBlur=&#123;props.handleBlur&#125;/</span>&gt;</span><br><span class="line">&#123;props.touched.name &amp;&amp; props.errors.name &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.errors.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                  &lt;label&gt;性别： &lt;/</span>label&gt;</span><br><span class="line">                  &lt;input type=<span class="string">"radio"</span> id=<span class="string">"male"</span> value=<span class="string">"male"</span> name=<span class="string">"gender"</span> onChange=&#123;props.handleChange&#125;</span><br><span class="line">                         onBlur=&#123;props.handleBlur&#125;/&gt; <span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">"male"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">                  &lt;input type=<span class="string">"radio"</span> id=<span class="string">"female"</span> value=<span class="string">"female"</span> name=<span class="string">"gender"</span> onChange=&#123;props.handleChange&#125;</span><br><span class="line">                         onBlur=&#123;props.handleBlur&#125;/&gt; <span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">"female"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">&#123;props.touched.gender &amp;&amp; props.errors.gender &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.errors.gender&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                  &lt;label&gt;年龄： &lt;/</span>label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">id</span>=<span class="string">"age"</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">&#123;props.values.age&#125;</span></span></span></span><br><span class="line"><span class="xml">                                            onChange=&#123;props.handleChange&#125; onBlur=&#123;props.handleBlur&#125;/&gt;</span></span><br><span class="line">&#123;props.touched.age &amp;&amp; props.errors.age &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.errors.age&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div className="submit-area"&gt;</span></span><br><span class="line"><span class="regexp">                  &lt;button type="submit"&gt;提交&lt;/</span>button&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">              &lt;/</span>div&gt;</span><br><span class="line">            &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br></pre></td></tr></table></figure><p>但是我们依旧可以看出在每一个输入控件的地方，都重复的绑定了onChange，onBlur等事件，并且每个输入错误信息的方式都是很重复的，这显得有点累赘。但是好在formik提交了Form，Field，ErrorMessage等封装好的组件，用于减少重复的工作，代码如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;Formik</span><br><span class="line">          ......</span><br><span class="line">        <span class="comment">//same as before</span></span><br><span class="line">          render=&#123;props =&gt;</span><br><span class="line">            &lt;Form&gt;</span><br><span class="line">              &lt;div className=<span class="string">"content"</span>&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                  &lt;label&gt;姓名： &lt;<span class="regexp">/label&gt;&lt;Field name="name"/</span>&gt;</span><br><span class="line">&lt;ErrorMessage name=<span class="string">"name"</span>/&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                  &lt;label&gt;性别： &lt;/</span>label&gt;</span><br><span class="line">                  &lt;Field name=<span class="string">"gender"</span> render=&#123;(&#123;field&#125;) =&gt;</span><br><span class="line">                    &lt;input type=<span class="string">"radio"</span> name=&#123;field.name&#125; value=<span class="string">"male"</span> checked=&#123;field.value === <span class="string">"male"</span>&#125;</span><br><span class="line">                           onChange=&#123;field.onChange&#125;</span><br><span class="line">                           onBlur=&#123;field.onBlur&#125;/&gt;</span><br><span class="line">                  &#125;/&gt;</span><br><span class="line">                  &lt;label htmlFor=<span class="string">"male"</span>&gt;男&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">                  &lt;Field name="gender" render=&#123;(&#123;field&#125;) =&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;input type="radio" name=&#123;field.name&#125; value="female" checked=&#123;field.value === "female"&#125;</span></span><br><span class="line"><span class="regexp">                           onChange=&#123;field.onChange&#125;</span></span><br><span class="line"><span class="regexp">                           onBlur=&#123;field.onBlur&#125;/</span>&gt;</span><br><span class="line">                  &#125;/&gt; <span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">"female"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">&lt;ErrorMessage name=<span class="string">"gender"</span>/&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                  &lt;label&gt;年龄： &lt;/</span>label&gt;<span class="xml"><span class="tag">&lt;<span class="name">Field</span> <span class="attr">name</span>=<span class="string">"age"</span>/&gt;</span></span></span><br><span class="line">&lt;ErrorMessage name=<span class="string">"age"</span>/&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div className="submit-area"&gt;</span></span><br><span class="line"><span class="regexp">                  &lt;button type="submit"&gt;提交&lt;/</span>button&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">              &lt;/</span>div&gt;</span><br><span class="line">            &lt;<span class="regexp">/Form&gt;</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br></pre></td></tr></table></figure><p>可以看出，使用formik提供的组件还能进一步简化代码，通过对比可以看出，Form组件想到与form加上onSubmit；ErrorMessage组件就是将touched,errors等一系列判断包裹了起来；Field组件则是封装了onChange，onBlur，value等属性，需要注意的是对于radio，checkbox，select等控件需要单独做一些特殊处理，通常使用其render方法来自定义，除此之外，因为有了render方法，使得Field也能很好的和其他的第三方封装的控件结合。</p><p> 此外，formik针对数组类型属性也有很好的支持，现在让我们在表单里面加一个字段，表单样式如下： </p><p> <img src="/" alt="img" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/10769576-49fa1d42d3cb6b7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/520/format/webp"> </p><p>我们为表单添加了一个addresses字段，它是一个存储地址的数据，它的验证规则是至少有一个非空的字段。</p><p>formik提供了一个FieldArray的组件专门处理数组类型字段，代码如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;Formik</span><br><span class="line">          initialValues=&#123;&#123;</span><br><span class="line">            name: <span class="string">""</span>,</span><br><span class="line">            gender: <span class="string">""</span>,</span><br><span class="line">            age: <span class="string">""</span>,</span><br><span class="line">            addresses: [<span class="string">""</span>]</span><br><span class="line">          &#125;&#125;</span><br><span class="line">          validate=&#123;values =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> errors = &#123;&#125;;</span><br><span class="line">            <span class="keyword">if</span> (values.name.length === <span class="number">0</span>) &#123;</span><br><span class="line">              errors.name = <span class="string">"Name can not be empty"</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (values.gender.length === <span class="number">0</span>) &#123;</span><br><span class="line">              errors.gender = <span class="string">"You must choose a gender"</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (values.age &lt;= <span class="number">0</span> || values.age % <span class="number">1</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">              errors.age = <span class="string">"Age must be a Positive Integer"</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> addresses = values.addresses.filter(<span class="function"><span class="params">address</span> =&gt;</span> address.trim() !== <span class="string">""</span>);</span><br><span class="line">            <span class="keyword">if</span> (addresses.length === <span class="number">0</span>) &#123;</span><br><span class="line">              errors.addresses = <span class="string">"Addresses must have 1 address at least"</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> errors;</span><br><span class="line">          &#125;&#125;</span><br><span class="line">       </span><br><span class="line">          onSubmit=&#123;(values) =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(values)</span><br><span class="line">          &#125;&#125;</span><br><span class="line">          render=&#123;props =&gt;</span><br><span class="line">            &lt;Form&gt;</span><br><span class="line">              &lt;div className=<span class="string">"content"</span>&gt;</span><br><span class="line">              ......</span><br><span class="line">               <span class="comment">// same as before</span></span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                  &lt;label&gt;地址： &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">                  &lt;FieldArray name="addresses" render=&#123;arrayHelper =&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                      &#123;props.values.addresses.map((address, index) =&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;div className="address"&gt;</span></span><br><span class="line"><span class="regexp">                          &lt;Field name=&#123;`addresses.$&#123;index&#125;`&#125;/</span>&gt;</span><br><span class="line">                          &lt;div className=<span class="string">"address_add"</span> onClick=&#123;() =&gt; &#123;</span><br><span class="line">                            arrayHelper.push(<span class="string">""</span>)</span><br><span class="line">                          &#125;&#125;&gt;+</span><br><span class="line">                          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;/</span>div&gt;</span><br><span class="line">                      )&#125;</span><br><span class="line">                    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                  &#125;/</span>&gt;</span><br><span class="line">                  &lt;ErrorMessage name=<span class="string">"addresses"</span> component=<span class="string">"div"</span> className=<span class="string">"error"</span>/&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div className="submit-area"&gt;</span></span><br><span class="line"><span class="regexp">                  &lt;button type="submit"&gt;提交&lt;/</span>button&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">              &lt;/</span>div&gt;</span><br><span class="line">           &lt;<span class="regexp">/Form&gt;</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br></pre></td></tr></table></figure><p>可以看到，使用FieldArray时，它会提供一个arrayHelper的参数，我们可以通过arrayHelper很方便去操作数组的数组，如push，pop等等（更详细的参见<a href="https://jaredpalmer.com/formik/docs/api/fieldarray#fieldarray-helpers" target="_blank" rel="noopener">完整arrayHelper API</a>）</p><p>到此为止，就是formik的基本功能的介绍了。</p><h2 id="1-2-注入Yup"><a href="#1-2-注入Yup" class="headerlink" title="1.2 注入Yup"></a>1.2 注入Yup</h2><p>虽然formik已经极大的方便了表单的操作，但是我们还是可以看到在做表单验证的时候，写的代码还是比较繁琐，这个时候就需要yup出场了，yup的专长就是做规则校验。并且聪明的formik作者在设计formik的时候就让其很好的支持yup了。</p><p> yup的官方介绍：<code>Yup is a JavaScript object schema validator and object parser.</code> </p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -S yup</span><br></pre></td></tr></table></figure><p>Yup总是依赖Promise全局对象来处理异步值以及Set和Map。对于不支持这些功能的浏览器，需要包含polyfill，例如core js：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#39;core-js&#x2F;es6&#x2F;promise&#39;;</span><br><span class="line">import &#39;core-js&#x2F;es6&#x2F;set&#39;;</span><br><span class="line">import &#39;core-js&#x2F;es6&#x2F;map&#39;;</span><br></pre></td></tr></table></figure><p>如果使用TypeScript，建议安装Yup类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D @types&#x2F;yup</span><br></pre></td></tr></table></figure><p> 在Formik组件里有一个名为validationSchema的prop，这个就是为yup留出的接口。</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> yup <span class="keyword">from</span> <span class="string">'yup'</span>; <span class="comment">// for everything</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//没有yup的情况</span></span><br><span class="line">&lt;Formik</span><br><span class="line">          validate=&#123;values =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> errors = &#123;&#125;;</span><br><span class="line">            <span class="keyword">if</span> (values.name.length === <span class="number">0</span>) &#123;</span><br><span class="line">              errors.name = <span class="string">"Name can not be empty"</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (values.gender.length === <span class="number">0</span>) &#123;</span><br><span class="line">              errors.gender = <span class="string">"You must choose a gender"</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (values.age &lt;= <span class="number">0</span> || values.age % <span class="number">1</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">              errors.age = <span class="string">"Age must be a Positive Integer"</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> addresses = values.addresses.filter(<span class="function"><span class="params">address</span> =&gt;</span> address.trim() !== <span class="string">""</span>);</span><br><span class="line">            <span class="keyword">if</span> (addresses.length === <span class="number">0</span>) &#123;</span><br><span class="line">              errors.addresses = <span class="string">"Addresses must have 1 address at least"</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> errors;</span><br><span class="line">          &#125;&#125;</span><br><span class="line">       <span class="comment">//......</span></span><br><span class="line">        /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用yup的情况</span></span><br><span class="line"> &lt;Formik</span><br><span class="line">          validationSchema=&#123;Yup.object().shape(&#123;</span><br><span class="line">            name: Yup.string().trim().required(<span class="string">"Name can not be empty"</span>),</span><br><span class="line">            gender: Yup.string().required(<span class="string">"You must choose a gender"</span>),</span><br><span class="line">            age: Yup.number().moreThan(<span class="number">0</span>, <span class="string">"Age must be greater than 0"</span>).integer(<span class="string">"Age must be a integer"</span>),</span><br><span class="line">            addresses: Yup.array().compact().min(<span class="number">1</span>, <span class="string">"Addresses must have 1 address at least"</span>)</span><br><span class="line">          &#125;)&#125;</span><br><span class="line">      <span class="comment">//......</span></span><br><span class="line">       /&gt;</span><br></pre></td></tr></table></figure><p>可以看到使用Yup后，不管是从代码量，还是可读性来看都提交了很多，尤其是在表单非常复杂时，这之间的优化会非常的明显。</p><p>可以看到Yup的操作非常的语义化，所以学习成本非常的低，你只需要知道它的api，就能很轻易的使用它，所以对Yup的使用不再赘述，详细信息参见Yup文档。</p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>react组件通信</title>
      <link href="/2019/06/26/react%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/06/26/react%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-父子组件的通信"><a href="#1-1-父子组件的通信" class="headerlink" title="1.1 父子组件的通信"></a>1.1 父子组件的通信</h2><h3 id="a-父组件传递给子组件"><a href="#a-父组件传递给子组件" class="headerlink" title="a) 父组件传递给子组件"></a>a) 父组件传递给子组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;CMTItem key=&#123;i&#125; &#123;...item&#125;&lt;<span class="regexp">/CMTItem&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/子组件通过this.props可以获取到父组件传递过来的数据</span></span><br></pre></td></tr></table></figure><h3 id="b-子组件传递给父组件"><a href="#b-子组件传递给父组件" class="headerlink" title="b) 子组件传递给父组件"></a>b) 子组件传递给父组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line"> &lt;CMTBox reload=&#123;<span class="keyword">this</span>.loadCmts&#125;&gt;&lt;<span class="regexp">/CMTBox&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/子组件通过this.props.reload() 来调用父组件的方法，调用的时候可以传递参数</span></span><br></pre></td></tr></table></figure><h2 id="1-2-使用Context实现跨组件通信"><a href="#1-2-使用Context实现跨组件通信" class="headerlink" title="1.2 使用Context实现跨组件通信"></a>1.2 使用Context实现跨组件通信</h2><p>当你不想在组件树中通过逐层传递 <code>props</code>或者<code>state</code>的方式来传递数据时，可以使用<code>Context</code>来实现<strong>跨层级</strong>的组件数据传递。</p><h3 id="a-父子组件传递数据的方式"><a href="#a-父子组件传递数据的方式" class="headerlink" title="a) 父子组件传递数据的方式"></a>a) 父子组件传递数据的方式</h3><p><img src="/" alt="1553135155547" class="lazyload" data-src="/2019/06/26/react%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/1553135155547.png"></p><h3 id="b-使用Context跨级传递数据"><a href="#b-使用Context跨级传递数据" class="headerlink" title="b) 使用Context跨级传递数据"></a>b) 使用Context跨级传递数据</h3><p><img src="/" alt="1553135231745" class="lazyload" data-src="/2019/06/26/react%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/1553135231745.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个Context对象</span></span><br><span class="line"><span class="keyword">const</span> ThemeContext = React.createContext(<span class="string">"light"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextComp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="comment">//ThemeContext.Provider 数据的提供者，允许消费组件订阅context的变化</span></span><br><span class="line">        <span class="comment">//value就是给子组件暴露的数据</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">ThemeContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;name:</span>"<span class="attr">zhangsan</span>"&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ThemedButton</span>&gt;</span><span class="tag">&lt;/<span class="name">ThemedButton</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThemedButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这能让你使用 this.context 来消费最近 Context 上的那个值</span></span><br><span class="line">    <span class="keyword">static</span> contextType = ThemeContext;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Content</span>&gt;</span><span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;this.context.name&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ThemeContext.Consumer 允许我们在函数组件中使用Context</span></span><br><span class="line"><span class="comment">//ThemeContext.Consumer中的箭头函数的入参就是最近一个Provider所暴露的数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Content</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">ThemeContext.Consumer</span>&gt;</span>&#123;</span></span><br><span class="line"><span class="xml">        obj =&gt; &#123;</span></span><br><span class="line"><span class="xml">            return <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;obj.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;<span class="tag">&lt;/<span class="name">ThemeContext.Consumer</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-使用自定义事件实现组件通讯"><a href="#1-3-使用自定义事件实现组件通讯" class="headerlink" title="1.3 使用自定义事件实现组件通讯"></a>1.3 使用自定义事件实现组件通讯</h2><p>在没有嵌套关系的组件中，我们可以使用自定义事件的方式实现组件通信。</p><blockquote><p>1.在componentDidMount事件中，订阅事件</p><p>2.在组件卸载的时候，在componentWillUnmount事件中取消事件的订阅;</p><p>3.以常用的发布/订阅模式，借用Node.js Events模块的浏览器版实现</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install events --save</span><br></pre></td></tr></table></figure><p>在src下新建一个util目录里面建一个events.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventEmitter &#125; <span class="keyword">from</span> <span class="string">'events'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> EventEmitter();</span><br></pre></td></tr></table></figure><p>list1.jsx</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">'../util/events'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            message: <span class="string">'List1'</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="comment">// 组件装载完成以后声明一个自定义事件</span></span><br><span class="line">        <span class="keyword">this</span>.eventEmitter = emitter.addListener(<span class="string">'changeMessage'</span>, (message) =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                message,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        emitter.removeListener(<span class="keyword">this</span>.eventEmitter);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.state.message&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default List;</span></span><br></pre></td></tr></table></figure><p>List2.jsx</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">'../util/events'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    handleClick = <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">        emitter.emit(<span class="string">'changeMessage'</span>, message);</span><br><span class="line">    &#125;;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>, <span class="string">'List2'</span>)&#125;&gt;点击我改变List1组件中显示信息&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>App.jsx</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> List1 <span class="keyword">from</span> <span class="string">'./components/List1'</span>;</span><br><span class="line"><span class="keyword">import</span> List2 <span class="keyword">from</span> <span class="string">'./components/List2'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;List1 /&gt;</span><br><span class="line">                &lt;List2 /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>自定义事件是典型的发布订阅模式,通过向事件对象上添加监听器和触发事件来实现组件之间的通信</p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue样式穿透</title>
      <link href="/2019/05/02/vue%E6%A0%B7%E5%BC%8F%E7%A9%BF%E9%80%8F/"/>
      <url>/2019/05/02/vue%E6%A0%B7%E5%BC%8F%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是scoped"><a href="#1-什么是scoped" class="headerlink" title="1.什么是scoped"></a>1.什么是scoped</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在Vue文件中的style标签上有一个特殊的属性，scoped。当一个style标签拥有scoped属性时候，它的css样式只能用于当前的Vue组件，可以使组件的样式不相互污染。如果一个项目的所有style标签都加上了scoped属性，相当于实现了样式的模块化。</span><br></pre></td></tr></table></figure><h2 id="2-scoped的实现原理"><a href="#2-scoped的实现原理" class="headerlink" title="2.scoped的实现原理"></a>2.scoped的实现原理</h2><p>Vue中的scoped属性的效果主要是通过PostCss实现的。以下是转译前的代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped lang&#x3D;&quot;less&quot;&gt;</span><br><span class="line">    .example&#123;</span><br><span class="line">        color:red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;example&quot;&gt;scoped测试案例&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>转译后:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.example[data-v-5558831a] &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;example&quot; data-v-5558831a&gt;scoped测试案例&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>既:PostCSS给一个组件中的所有dom添加了一个独一无二的动态属性，给css选择器额外添加一个对应的属性选择器，来选择组件中的dom,这种做法使得样式只作用于含有该属性的dom元素(组件内部的dom)。</p><blockquote><p>总结：scoped的渲染规则：</p></blockquote><ol><li>给HTML的dom节点添加一个不重复的data属性(例如: data-v-5558831a)来唯一标识这个dom 元素</li><li>在每句css选择器的末尾(编译后生成的css语句)加一个当前组件的data属性选择器(例如：[data-v-5558831a])来私有化样式</li></ol><h2 id="3-scoped穿透"><a href="#3-scoped穿透" class="headerlink" title="3.scoped穿透"></a>3.scoped穿透</h2><p>scoped看起来很好用，当时在Vue项目中，当我们引入第三方组件库时(如使用vue-awesome-swiper实现移动端轮播)，需要在局部组件中修改第三方组件库的样式，而又不想去除scoped属性造成组件之间的样式覆盖。这时我们可以通过特殊的方式穿透scoped。</p><blockquote><p>stylus的样式穿透 使用&gt;&gt;&gt;</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 外层 &gt;&gt;&gt; 第三方组件 </span><br><span class="line">     样式</span><br><span class="line">     </span><br><span class="line">.wrapper &gt;&gt;&gt; .swiper-pagination-bullet-active</span><br><span class="line"> background: #fff</span><br></pre></td></tr></table></figure><blockquote><p>sass和less的样式穿透 使用/deep/</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">外层 &#x2F;deep&#x2F; 第三方组件 &#123;</span><br><span class="line">    样式</span><br><span class="line">&#125;</span><br><span class="line">.wrapper &#x2F;deep&#x2F; .swiper-pagination-bullet-active&#123;</span><br><span class="line">  background: #fff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-在组件中修改第三方组件库样式的其它方法"><a href="#3-在组件中修改第三方组件库样式的其它方法" class="headerlink" title="3.在组件中修改第三方组件库样式的其它方法"></a>3.在组件中修改第三方组件库样式的其它方法</h2><p>上面我们介绍了在使用scoped 属性时，通过scopd穿透的方式修改引入第三方组件库样式的方法，下面我们介绍其它方式来修改引入第三方组件库的样式</p><blockquote><p>在vue组件中不使用scoped属性</p></blockquote><hr><blockquote><p>在vue组建中使用两个style标签，一个加上scoped属性，一个不加scoped属性，把需要覆盖的css样式写在不加scoped属性的style标签里</p></blockquote><hr><blockquote><p>建立一个reset.css(基础全局样式)文件，里面写覆盖的css样式，在入口文件main.js 中引入</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2019/04/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2019/04/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-正则表达式简介"><a href="#1-正则表达式简介" class="headerlink" title="1. 正则表达式简介"></a>1. 正则表达式简介</h2><h3 id="1-1-什么是正则表达式"><a href="#1-1-什么是正则表达式" class="headerlink" title="1.1 什么是正则表达式"></a>1.1 什么是正则表达式</h3><p>正则表达式：用于匹配规律规则的表达式，正则表达式最初是科学家对人类神经系统的工作原理的早期研究，现在在编程语言中有广泛的应用。正则表通常被用来检索、替换那些符合某个模式(规则)的文本。<br>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p><h3 id="1-2-正则表达式的作用"><a href="#1-2-正则表达式的作用" class="headerlink" title="1.2 正则表达式的作用"></a>1.2 正则表达式的作用</h3><ol><li>给定的字符串是否符合正则表达式的过滤逻辑(匹配)</li><li>可以通过正则表达式，从字符串中获取我们想要的特定部分(提取)</li><li>强大的字符串替换能力(替换)</li></ol><h3 id="1-3-正则表达式的特点"><a href="#1-3-正则表达式的特点" class="headerlink" title="1.3 正则表达式的特点"></a>1.3 正则表达式的特点</h3><ol><li>灵活性、逻辑性和功能性非常的强</li><li>可以迅速地用极简单的方式达到字符串的复杂控制</li><li>对于刚接触的人来说，比较晦涩难懂</li></ol><h3 id="1-4-正则表达式的测试"><a href="#1-4-正则表达式的测试" class="headerlink" title="1.4 正则表达式的测试"></a>1.4 正则表达式的测试</h3><ul><li><p><a href="https://c.runoob.com/front-end/854" target="_blank" rel="noopener">在线测试正则</a></p></li><li><p>工具中使用正则表达式</p><ul><li><p>sublime/vscode/word</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sublime调试正则</span></span><br><span class="line"><span class="number">1</span>、按command+F(windows:ctrl+f)调出查找面板</span><br><span class="line"><span class="number">2</span>、点击上图中最左侧的『.*』开启正则模式；</span><br><span class="line"><span class="number">3</span>、在查找输入框输入正则匹配的模式（.*）部分即是正则表达式部分</span><br></pre></td></tr></table></figure></li><li><p>演示替换所有的数字</p></li></ul></li></ul><h3 id="1-5-正则表达式的组成"><a href="#1-5-正则表达式的组成" class="headerlink" title="1.5 正则表达式的组成"></a>1.5 正则表达式的组成</h3><ul><li>普通字符</li><li>特殊字符(元字符)：正则表达式中有特殊意义的字符</li></ul><p>示例演示：</p><ul><li><code>\d</code> 匹配数字</li><li><code>ab\d</code> 匹配 ab1、ab2</li></ul><h3 id="1-6-元字符串"><a href="#1-6-元字符串" class="headerlink" title="1.6 元字符串"></a>1.6 元字符串</h3><p>通过测试工具演示下面元字符的使用</p><h4 id="1-6-1-常用元字符串"><a href="#1-6-1-常用元字符串" class="headerlink" title="1.6.1 常用元字符串"></a>1.6.1 常用元字符串</h4><p>元字符：除了\n之外的其他任意字符</p><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线</td></tr><tr><td>\W</td><td>匹配任意不是字母，数字，下划线</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>.</td><td>匹配除换行符以外的任意单个字符</td></tr><tr><td>^</td><td>表示匹配行首的文本(以谁开始)</td></tr><tr><td>$</td><td>表示匹配行尾的文本(以谁结束)</td></tr><tr><td>\b</td><td>表示单词边界匹配符   what are you</td></tr></tbody></table><h4 id="1-6-2-限定符"><a href="#1-6-2-限定符" class="headerlink" title="1.6.2 限定符"></a>1.6.2 限定符</h4><table><thead><tr><th>限定符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//限定符:限定前面的表达式出现的次数</span></span><br><span class="line">*    表示的是:前面的表达式出现了<span class="number">0</span>次到多次</span><br><span class="line">[a-z][<span class="number">0</span><span class="number">-9</span>]*  小写字母中的任意一个,后面是要么是没有数字的,要么是多个数字的</span><br><span class="line"></span><br><span class="line">+    表示的是:前面的表达式出现了<span class="number">1</span>次到多次</span><br><span class="line">[a-z][<span class="number">9</span>]+    小写字母一个后面最少一个<span class="number">9</span>,或者多个<span class="number">9</span></span><br><span class="line"></span><br><span class="line">?    表示的是:前面的表达式出现了<span class="number">0</span>次到<span class="number">1</span>次,最少是<span class="number">0</span>次,最多<span class="number">1</span>次 。另一个含义:阻止贪婪模式</span><br><span class="line">[<span class="number">4</span>][a-z]?    <span class="number">4</span>后面可以出现a~z，也可以没有</span><br><span class="line"></span><br><span class="line">n&#123;<span class="number">0</span>,&#125; 表示的是n出现了<span class="number">0</span>次到多次,和*一样的</span><br><span class="line">n&#123;<span class="number">1</span>,&#125; 表示的是n出现了<span class="number">1</span>次到多次,和 +一样的</span><br><span class="line">n&#123;<span class="number">0</span>,<span class="number">1</span>&#125; 表示的是n出现了<span class="number">0</span>次到<span class="number">1</span>次,和 ?一样的</span><br><span class="line">n&#123;<span class="number">5</span>,<span class="number">10</span>&#125; 表示的是前面的n出现了<span class="number">5</span>次到<span class="number">10</span>次</span><br><span class="line">n&#123;<span class="number">4</span>&#125;  表示n出现了<span class="number">4</span>次</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span><span class="number">-7</span>] 表示的是<span class="number">1</span>到<span class="number">7</span>之间的任意的一个数字</span><br><span class="line">[a-z] 表示的是:所有的小写的字母中的任意的一个</span><br><span class="line">[A-Z] 表示的是:所有的大写的字母中的任意的一个</span><br><span class="line">[a-zA-Z] 表示的是:所有的字母的任意的一个</span><br><span class="line">[<span class="number">0</span><span class="number">-9</span>a-zA-Z] 表示的是: 所有的数字或者是字母中的一个</span><br><span class="line">[\u4e00-\u9fa5]  匹配汉字</span><br><span class="line"></span><br><span class="line">^ 表示的是以什么开始,或者是取非(取反) </span><br><span class="line">^[<span class="number">0</span><span class="number">-9</span>] 以数字开头</span><br><span class="line">^[a-z] 以小写字母开始</span><br><span class="line">[^<span class="number">0</span><span class="number">-9</span>] 取反,非数字</span><br><span class="line">[^a-z] 非小写字母</span><br><span class="line">[^<span class="number">0</span><span class="number">-9</span>a-zA-Z_] 不再<span class="number">0</span>到<span class="number">9</span> a到z A到Z之间</span><br><span class="line"></span><br><span class="line">$ 表示的是以什么结束   [<span class="number">0</span><span class="number">-9</span>][a-z]$  必须以小写字母结束</span><br></pre></td></tr></table></figure><h4 id="1-6-3-其它"><a href="#1-6-3-其它" class="headerlink" title="1.6.3 其它"></a>1.6.3 其它</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\  转义符</span><br><span class="line">|  或者。选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱。</span><br><span class="line">        [0-9]|[a-z] 表示的是要么是一个数字,要么是一个小写的字母</span><br><span class="line">() 分组。[0-9]|([a-z])|[A-Z]         gr(a|e)y匹配gray和grey</span><br><span class="line">        ([0-9])([1-5])([a-z]) 三组, 从最左边开始计算</span><br></pre></td></tr></table></figure><h2 id="2-JavaScript-中使用正则表达式"><a href="#2-JavaScript-中使用正则表达式" class="headerlink" title="2. JavaScript 中使用正则表达式"></a>2. JavaScript 中使用正则表达式</h2><h3 id="2-1-创建正则对象"><a href="#2-1-创建正则对象" class="headerlink" title="2.1 创建正则对象"></a>2.1 创建正则对象</h3><p>方式1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\d'</span>, <span class="string">'i'</span>);</span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\d'</span>, <span class="string">'gi'</span>);</span><br></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/i</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/gi</span>;</span><br></pre></td></tr></table></figure><p>参数</p><table><thead><tr><th>标志</th><th>说明</th></tr></thead><tbody><tr><td>i</td><td>忽略大小写</td></tr><tr><td>g</td><td>全局匹配</td></tr><tr><td>gi</td><td>全局匹配+忽略大小写</td></tr></tbody></table><h3 id="2-2-正则对象的常用方法"><a href="#2-2-正则对象的常用方法" class="headerlink" title="2.2 正则对象的常用方法"></a>2.2 正则对象的常用方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reg.test(<span class="string">"字符串"</span>)  <span class="comment">//查看字符串是否符合指定的正则表达式，返回true和false</span></span><br><span class="line">reg.exec(<span class="string">"字符串"</span>)  <span class="comment">//用正则表达式模式在字符串中运行查找，并返回包含该查找结果的一个数组</span></span><br></pre></td></tr></table></figure><h3 id="2-3-匹配正则表达式"><a href="#2-3-匹配正则表达式" class="headerlink" title="2.3 匹配正则表达式"></a>2.3 匹配正则表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在字符串中查找是否有符合条件的</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[a-zA-Z]+/</span>.test(<span class="string">"hello"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/./</span>.test(<span class="string">"除了回车换行以为的任意字符"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/.*/</span>.test(<span class="string">"0个到多个"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/.+/</span>.test(<span class="string">"1个到多个"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/.?/</span>.test(<span class="string">"哈哈"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[a-z]/</span>.test(<span class="string">"what"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[A-Z]/</span>.test(<span class="string">"Are"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[a-zA-Z]/</span>.test(<span class="string">"干啥子"</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[0-9a-zA-Z]/</span>.test(<span class="string">"9ebg"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/b|(ara)/</span>.test(<span class="string">"abra"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[a-z]&#123;2,3&#125;/</span>.test(<span class="string">"arfsf"</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d/</span>.test(<span class="string">"998"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d*/</span>.test(<span class="string">"998"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d+/</span>.test(<span class="string">"998"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d&#123;0,&#125;/</span>.test(<span class="string">"998"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d&#123;2,3&#125;/</span>.test(<span class="string">"998"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\D/</span>.test(<span class="string">"eat"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\s/</span>.test(<span class="string">"  "</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\S/</span>.test(<span class="string">"嘎嘎"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\w/</span>.test(<span class="string">"_"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\W/</span>.test(<span class="string">"_"</span>));<span class="comment">//fasle</span></span><br></pre></td></tr></table></figure><h3 id="2-4-正则匹配案例"><a href="#2-4-正则匹配案例" class="headerlink" title="2.4 正则匹配案例"></a>2.4 正则匹配案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.查看字符串是否包含数字</span></span><br><span class="line"><span class="comment">//var reg = new RegExp("\\d+");</span></span><br><span class="line"><span class="keyword">var</span> reg =<span class="regexp">/\d+/</span>;  <span class="comment">//相比上面写法少了转义字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test 方法检查在字符串中是否存在一个模式，如果存在则返回 true，否则就返回 false。</span></span><br><span class="line">alert(reg.test(<span class="string">"abc123"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.需求：校验QQ号码</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[1-9]\d&#123;4,10&#125;$/</span>;</span><br><span class="line">alert(reg.test(<span class="string">"11533"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.固定电话的正则</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(0\d&#123;2,3&#125;-)?[1-9]\d&#123;7&#125;$/</span>;</span><br><span class="line">alert(reg.test(<span class="string">"021-88882222"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.匹配日期</span></span><br><span class="line"><span class="keyword">var</span> dateStr = <span class="string">'2015-10-10'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(dateStr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.查看字符串是否以数字开头以数字结束</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(\d+)$|^(\d+)(.)*(\d+)$/</span>;</span><br><span class="line">alert(reg.test(<span class="string">"abc123"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意点：其中^表示开头，$表示结束，/^\d+$/表示需要匹配的字符串必须以数字开头，必须以数字结束。如果去掉，则会进行部分匹配</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.验证中文名字(2到6位)</span></span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^[\u4e00-\u9fa5]&#123;2,6&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7.需求：找出所有3个英文字母组成的单词</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"da Jia hao hao xue xi zheng qu sheng lii"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\b[a-z]&#123;3&#125;\b/ig</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// exec 方法:用正则表达式模式在字符串中运行查找，并返回包含该查找结果的一个数组。</span></span><br><span class="line"><span class="keyword">while</span>((line = reg.exec(str)) !=<span class="literal">null</span>)&#123;</span><br><span class="line">  alert(line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//8.把里面所有的数字全部显示出来</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"中国移动:10086,中国联通:10010,中国电信:10000"</span>; </span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/\d&#123;5&#125;/g</span>;</span><br><span class="line"><span class="comment">//通过正则表达式匹配这个字符串</span></span><br><span class="line"><span class="keyword">var</span> line=reg.exec(str);</span><br><span class="line"><span class="keyword">while</span> (line!=<span class="literal">null</span>)&#123;</span><br><span class="line">   <span class="comment">//输出匹配的内容</span></span><br><span class="line">   <span class="built_in">console</span>.log(line[<span class="number">0</span>]);</span><br><span class="line">   line=reg.exec(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-分组提取"><a href="#2-5-分组提取" class="headerlink" title="2.5 分组提取"></a>2.5 分组提取</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1. 提取日期中的年部分  2015-5-10</span></span><br><span class="line"><span class="keyword">var</span> dateStr = <span class="string">'2016-1-5'</span>;</span><br><span class="line"><span class="comment">// 正则表达式中的()作为分组来使用，获取分组匹配到的结果用Regex.$1 $2 $3....来获取</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d&#123;4&#125;)-\d&#123;1,2&#125;-\d&#123;1,2&#125;/</span>;</span><br><span class="line"><span class="keyword">if</span> (reg.test(dateStr)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 提取邮件中的每一部分</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w+)@(\w+)\.(\w+)(\.\w+)?/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123123@xx.com"</span>;</span><br><span class="line"><span class="keyword">if</span> (reg.test(str)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-字符串中正则的使用"><a href="#3-字符串中正则的使用" class="headerlink" title="3. 字符串中正则的使用"></a>3. 字符串中正则的使用</h2><h3 id="3-1-字符串中支持正则方法"><a href="#3-1-字符串中支持正则方法" class="headerlink" title="3.1 字符串中支持正则方法"></a>3.1 字符串中支持正则方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">match()    <span class="comment">//match方法返回符合条件的集合</span></span><br><span class="line">replace()  <span class="comment">//替换字符串</span></span><br><span class="line">search()   <span class="comment">//查找字符串</span></span><br><span class="line">split()    <span class="comment">//切割字符串</span></span><br></pre></td></tr></table></figure><h3 id="3-2-字符串正则提取"><a href="#3-2-字符串正则提取" class="headerlink" title="3.2 字符串正则提取"></a>3.2 字符串正则提取</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//match方法返回符合条件的集合</span></span><br><span class="line"><span class="comment">//1.查找字符串中所有连续出现的数字，放入数组</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"abc123ee23f90"</span>;</span><br><span class="line">alert(str.match(<span class="regexp">/\d+/g</span>));</span><br><span class="line">alert(str.match(<span class="regexp">/\d+/</span>));<span class="comment">//如果这里没有/g，只会找到第一个符合条件的放入数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.查找字符串中所有的数字，放入数组</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"abc123ee23f90"</span>;</span><br><span class="line">alert(str.match(<span class="regexp">/\d/g</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 提取工资</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"张三：1000，李四：5000，王五：8000。"</span>;</span><br><span class="line"><span class="keyword">var</span> array = str.match(<span class="regexp">/\d+/g</span>); </span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 提取email地址</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123123@xx.com,fangfang@valuedopinions.cn 286669312@qq.com 2、emailenglish@emailenglish.englishtown.com 286669312@qq.com..."</span>;</span><br><span class="line"><span class="keyword">var</span> array = str.match(<span class="regexp">/\w+@\w+\.\w+(\.\w+)?/g</span>);  <span class="comment">//(\.\w+)?  表示可能出现0次或者多次</span></span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.把里面所有的数字全部显示出来</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"中国移动:10086,中国联通:10010,中国电信:10000"</span>; </span><br><span class="line"><span class="keyword">var</span> array=str.match(<span class="regexp">/\d&#123;5&#125;/g</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br></pre></td></tr></table></figure><h3 id="3-3-贪婪模式和懒惰模式"><a href="#3-3-贪婪模式和懒惰模式" class="headerlink" title="3.3 贪婪模式和懒惰模式"></a>3.3 贪婪模式和懒惰模式</h3><p>所谓贪婪匹配就是匹配重复字符是尽可能多的匹配</p><p>懒惰模式就是匹配的时候尽可能的少匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"aaaaa"</span>.match(<span class="regexp">/a+/</span>);    <span class="comment">//贪婪模式：["aaaaa"]</span></span><br><span class="line"><span class="string">"aaaaa"</span>.match(<span class="regexp">/a+?/</span>);   <span class="comment">//懒惰模式(使用?号)：["a"]</span></span><br><span class="line"></span><br><span class="line"><span class="string">'0a123ba123b'</span>.match(<span class="regexp">/a[a-b0-9]*b/</span>);  <span class="comment">//贪婪模式: ["a123ba123b"]</span></span><br><span class="line"><span class="string">'0a123ba123b'</span>.match(<span class="regexp">/a[a-b0-9]*?b/</span>);  <span class="comment">//懒惰模式 ：["a123b"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//按照贪婪和懒惰模式，下面的结有问题：</span></span><br><span class="line"><span class="string">"aaab"</span>.match(<span class="regexp">/a+b/</span>);   <span class="comment">//["aaab"]</span></span><br><span class="line"><span class="string">"aaab"</span>.match(<span class="regexp">/a+?b/</span>);  <span class="comment">//["aaab"]  这边明明是懒惰模式，可是匹配结果仍然是"aaab"</span></span><br><span class="line"><span class="comment">//原因是正则表达式的模式匹配总是会寻找字符串中第一个可能匹配的位置。</span></span><br></pre></td></tr></table></figure><h3 id="3-4-字符串正则替换"><a href="#3-4-字符串正则替换" class="headerlink" title="3.4 字符串正则替换"></a>3.4 字符串正则替换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 替换所有空白</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"   123AD  asadf   asadfasf  adf "</span>;</span><br><span class="line">str = str.replace(<span class="regexp">/\s/g</span>,<span class="string">"xx"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 替换所有,|，</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abc,efg,123，abc,123，a"</span>;</span><br><span class="line">str = str.replace(<span class="regexp">/,|，/g</span>, <span class="string">"."</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.替换字符串中所有的 – 和 + 号</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"a-b-+b-c"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/-|\+/g</span>;  <span class="comment">//注意，此处没有加边界匹配器，因为要替换所有的-,g表示匹配的模式,+号需要转义</span></span><br><span class="line">alert(str.replace(reg, <span class="string">"*"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.替换字符串中的所有的帅</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"你好帅哦,真的是太帅了,帅,就是真帅"</span>;</span><br><span class="line">str=str.replace(<span class="regexp">/帅/g</span>,<span class="string">"猥琐"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.替换字符串中的所有的h</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"HhpphH"</span>;<span class="comment">//SSppSS</span></span><br><span class="line">str=str.replace(<span class="regexp">/[h]/gi</span>,<span class="string">"S"</span>);  <span class="comment">//i忽略大小写</span></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//6.替换重叠词</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"妮妮好好啊，我好喜喜欢你"</span>;</span><br><span class="line"><span class="keyword">var</span> str1 = str.replace(<span class="regexp">/(.)\1+/g</span>,<span class="string">"$1"</span>)</span><br><span class="line">alert(str1);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//7.替换标签为空字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"&lt;p&gt; 你好小明 &lt;/p&gt; &lt;div&gt;王鹏&lt;/div&gt;"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/&lt;[^&lt;&gt;]+&gt;/g</span>;  <span class="comment">//标签中除了&lt;&gt;不能放，其他都能放，所以是[^&lt;&gt;]</span></span><br><span class="line">alert(str.replace(reg, <span class="string">""</span>));</span><br></pre></td></tr></table></figure><p><img src="/" alt class="lazyload" data-src="/2019/04/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/bb.png"></p><h3 id="3-5-字符串正则其他方法"><a href="#3-5-字符串正则其他方法" class="headerlink" title="3.5 字符串正则其他方法"></a>3.5 字符串正则其他方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.查找字符串中指定字符</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"a-b-b-c"</span>;</span><br><span class="line"><span class="comment">//忽略大小写查找</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a/i</span>;  </span><br><span class="line"><span class="comment">//打印结果是所查找的内容在字符串中出现的第一个位置</span></span><br><span class="line">alert(str.search(reg));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.切割字符串</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"a|b|c|"</span>;</span><br><span class="line"><span class="keyword">var</span> arr=str.split(<span class="regexp">/\W+/</span>);</span><br><span class="line">alert(arr)</span><br></pre></td></tr></table></figure><h3 id="3-6-正则案例：验证密码强度"><a href="#3-6-正则案例：验证密码强度" class="headerlink" title="3.6 正则案例：验证密码强度"></a>3.6 正则案例：验证密码强度</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"dv"</span>&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">"pwd"</span>&gt;密码&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="text" id="pwd" maxlength="16"&gt;&lt;!--课外话题--&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;em&gt;密码强度：&lt;/</span>em&gt;</span><br><span class="line">&lt;em id=<span class="string">"strength"</span>&gt;&lt;<span class="regexp">/em&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="strengthLevel" class="strengthLv0"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script src=<span class="string">"common.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style type="text/</span>css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    #dv&#123;</span></span><br><span class="line"><span class="string">        width: 300px;</span></span><br><span class="line"><span class="string">        height:200px;</span></span><br><span class="line"><span class="string">        position: absolute;</span></span><br><span class="line"><span class="string">        left:300px;</span></span><br><span class="line"><span class="string">        top:100px;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    .strengthLv0 &#123;</span></span><br><span class="line"><span class="string">        height: 6px;</span></span><br><span class="line"><span class="string">        width: 120px;</span></span><br><span class="line"><span class="string">        border: 1px solid #ccc;</span></span><br><span class="line"><span class="string">        padding: 2px;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .strengthLv1 &#123;</span></span><br><span class="line"><span class="string">        background: red;</span></span><br><span class="line"><span class="string">        height: 6px;</span></span><br><span class="line"><span class="string">        width: 40px;</span></span><br><span class="line"><span class="string">        border: 1px solid #ccc;</span></span><br><span class="line"><span class="string">        padding: 2px;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .strengthLv2 &#123;</span></span><br><span class="line"><span class="string">        background: orange;</span></span><br><span class="line"><span class="string">        height: 6px;</span></span><br><span class="line"><span class="string">        width: 80px;</span></span><br><span class="line"><span class="string">        border: 1px solid #ccc;</span></span><br><span class="line"><span class="string">        padding: 2px;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .strengthLv3 &#123;</span></span><br><span class="line"><span class="string">        background: green;</span></span><br><span class="line"><span class="string">        height: 6px;</span></span><br><span class="line"><span class="string">        width: 120px;</span></span><br><span class="line"><span class="string">        border: 1px solid #ccc;</span></span><br><span class="line"><span class="string">        padding: 2px;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.strengthLv4 &#123;</span></span><br><span class="line"><span class="string">        background: black;</span></span><br><span class="line"><span class="string">        height: 6px;</span></span><br><span class="line"><span class="string">        width: 150px;</span></span><br><span class="line"><span class="string">        border: 1px solid #ccc;</span></span><br><span class="line"><span class="string">        padding: 2px;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">my$("</span>pwd<span class="string">").onkeyup = function()&#123;</span></span><br><span class="line"><span class="string">    var value = this.value;</span></span><br><span class="line"><span class="string">    var level = 0;</span></span><br><span class="line"><span class="string">    //1.如果输入的内容中函数字  强度是0</span></span><br><span class="line"><span class="string">    if(/\d+/.test(value))&#123;</span></span><br><span class="line"><span class="string">        level++;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    //2.如果输入的内容含小写字母  强度是1</span></span><br><span class="line"><span class="string">    if(/[a-z]+/.test(value))&#123;</span></span><br><span class="line"><span class="string">        level++;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    //3.如果输入的内容含大写字母  强度是2</span></span><br><span class="line"><span class="string">    if(/[A-Z]+/.test(value))&#123;</span></span><br><span class="line"><span class="string">        level++;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    //4.如果输入的内容含非字符  强度是3</span></span><br><span class="line"><span class="string">    if(/\W+/.test(value))&#123;</span></span><br><span class="line"><span class="string">        level++;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    my$("</span>strengthLevel<span class="string">").className = "</span>strengthLv<span class="string">"+level;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-7-正则案例：表单验证"><a href="#3-7-正则案例：表单验证" class="headerlink" title="3.7 正则案例：表单验证"></a>3.7 正则案例：表单验证</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">QQ号：&lt;input type=<span class="string">"text"</span> id=<span class="string">"txtQQ"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">邮箱：&lt;input type="text" id="txtEMail"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;</span><br><span class="line">手机：&lt;input type="text" id="txtPhone"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;</span><br><span class="line">生日：&lt;input type="text" id="txtBirthday"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;</span><br><span class="line">姓名：&lt;input type="text" id="txtName"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">//1.获取页面所有的inputs</span><br><span class="line">var inputs = my$byTagName("input");</span><br><span class="line">//2.遍历inputs绑定事件</span><br><span class="line">for(var i=0;i&lt;inputs.length;i++)&#123;</span><br><span class="line">    inputs[i].onblur = function()&#123;</span><br><span class="line">        checkCorrect(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//3.每次文本框失去焦点时候确定文本框对应的正则以及提示</span><br><span class="line">function checkCorrect(ele)&#123;</span><br><span class="line">    var reg = null;</span><br><span class="line">    var tip = null;</span><br><span class="line">    //检验QQ</span><br><span class="line">    if(ele.getAttribute("name") == "qq") &#123;</span><br><span class="line">        reg = /^[1-9]\d&#123;4,10&#125;$/;</span><br><span class="line">        tip = "请输入正确的QQ号码";</span><br><span class="line">    &#125;</span><br><span class="line">    //校验email</span><br><span class="line">    else if(ele.getAttribute("name") == "email")&#123;</span><br><span class="line">        reg = /^\w+@\w+\.\w+(\.\w+)?$/;</span><br><span class="line">        tip = "请输入正确的email";</span><br><span class="line">    &#125;</span><br><span class="line">    else if(ele.getAttribute("name") == "phone")&#123;</span><br><span class="line">        reg = /^1[34578]\d&#123;9&#125;$/;</span><br><span class="line">        tip = "请输入正确的手机号码";</span><br><span class="line">    &#125;</span><br><span class="line">    else if(ele.getAttribute("name") == "birthday")&#123;</span><br><span class="line">        reg = /^((\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;))$/;</span><br><span class="line">        tip = "请输入正确的生日";</span><br><span class="line">    &#125;</span><br><span class="line">    else if(ele.getAttribute("name") == "name")&#123;</span><br><span class="line">        reg = /^\w&#123;2,&#125;$/;</span><br><span class="line">        tip = "请输入正确的名字";</span><br><span class="line">    &#125;</span><br><span class="line">    //真正去进行校验</span><br><span class="line">    doCheck(ele,reg,tip);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//正则的校验</span><br><span class="line">function doCheck(element, reg, tip)&#123;</span><br><span class="line">    //获取当前input的下一个兄弟元素</span><br><span class="line">    var span = element.nextElementSibling;</span><br><span class="line">    //如果正则校验通过，则输入正确</span><br><span class="line">    if(reg.test(element.value))&#123;</span><br><span class="line">        span.style.color = "green";</span><br><span class="line">        setInnerText(span,"输入正确");</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        span.style.color = "red";</span><br><span class="line">        setInnerText(span,tip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli的使用</title>
      <link href="/2019/03/29/vue-cli%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/03/29/vue-cli%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-vue-cli使用"><a href="#1-vue-cli使用" class="headerlink" title="1.vue-cli使用"></a>1.vue-cli使用</h2><p>vue-cli是vue官网提供的一个脚手架，这个构建工具大大降低了webpack的使用难度，支持热更新，有<strong>webpack-dev-server</strong>的支持，相当于启动了一个请求服务器，给你搭建了一个测试环境，只关注开发就OK</p><h3 id="1-1-安装vue-cli创建项目"><a href="#1-1-安装vue-cli创建项目" class="headerlink" title="1.1 安装vue-cli创建项目"></a>1.1 安装vue-cli创建项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.npm install -g @vue&#x2F;cli@3.9.1</span><br><span class="line">2.将配置环境变量  C:\dev\nodejs</span><br><span class="line">3.vue create project-name</span><br></pre></td></tr></table></figure><p><img src="/" alt="1548217691062" class="lazyload" data-src="/2019/03/29/vue-cli%E7%9A%84%E4%BD%BF%E7%94%A8/1548217691062.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看最终生效的 webpack 配置信息</span></span><br><span class="line">vue inspect &gt; output.js</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置文件参考文档</span></span><br><span class="line">https:<span class="comment">//cli.vuejs.org/zh/config/#devserver-proxy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//运行App</span></span><br><span class="line">npm run serve</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译App</span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><p><img src="/" alt="1548290537572" class="lazyload" data-src="/2019/03/29/vue-cli%E7%9A%84%E4%BD%BF%E7%94%A8/1548290537572.png"></p><h3 id="1-2-windows-32位-npm装不上vue-cli的问题"><a href="#1-2-windows-32位-npm装不上vue-cli的问题" class="headerlink" title="1.2 windows(32位) npm装不上vue/cli的问题"></a>1.2 windows(32位) npm装不上vue/cli的问题</h3><p><img src="/" alt="1562661036910" class="lazyload" data-src="/2019/03/29/vue-cli%E7%9A%84%E4%BD%BF%E7%94%A8/1562661036910.png"></p><p><img src="/" alt="1562661053769" class="lazyload" data-src="/2019/03/29/vue-cli%E7%9A%84%E4%BD%BF%E7%94%A8/1562661053769.png"></p><p><img src="/" alt="1562661089819" class="lazyload" data-src="/2019/03/29/vue-cli%E7%9A%84%E4%BD%BF%E7%94%A8/1562661089819.png"></p><h3 id="1-3-vue-config-js配置"><a href="#1-3-vue-config-js配置" class="headerlink" title="1.3 vue.config.js配置"></a>1.3 vue.config.js配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//官网配置： https://cli.vuejs.org/zh/config/#filenamehashing</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> debug = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//部署应用包时的基本URL，如果是生产环境，部署到 /cli-study/dist 路径；如果是开发环境，部署到根路径</span></span><br><span class="line">  publicPath: !debug</span><br><span class="line">      ? <span class="string">'/cli-study/dist'</span></span><br><span class="line">      : <span class="string">'/'</span>,</span><br><span class="line">  <span class="comment">//输出文件路径</span></span><br><span class="line">  outputDir: <span class="string">'dist'</span>,</span><br><span class="line">  <span class="comment">//放置生成的静态资源 (js、css、img、fonts) 的 (相对于 outputDir 的) 目录。</span></span><br><span class="line">  assetsDir: <span class="string">'static'</span>,</span><br><span class="line">  <span class="comment">//默认情况下，生成的静态资源在它们的文件名中包含了 hash 以便更好的控制缓存</span></span><br><span class="line">  filenameHashing: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// eslint-loader 是否在保存的时候检查</span></span><br><span class="line">  lintOnSave: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 是否使用包含运行时编译器的Vue构建版本，设置为 true 后你就可以在 Vue 组件中使用 template 选项了，但是这会让你的应用额外增加 10kb 左右。</span></span><br><span class="line">  runtimeCompiler: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 默认情况下 babel-loader 会忽略所有 node_modules 中的文件。如果你想要通过 Babel 显式转译一个依赖，可以在这个选项中列出来。</span></span><br><span class="line">  transpileDependencies: [],</span><br><span class="line">  <span class="comment">// 生产环境不需要sourceMap</span></span><br><span class="line">  productionSourceMap: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 官网：https://cli.vuejs.org/zh/guide/webpack.html#%E7%AE%80%E5%8D%95%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F</span></span><br><span class="line">  <span class="comment">// 更多配置参考：https://www.jb51.net/article/150844.htm</span></span><br><span class="line">  configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(config, &#123; <span class="comment">// 开发生产共同配置</span></span><br><span class="line">      resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">          <span class="string">'@'</span>: path.resolve(__dirname, <span class="string">'./src'</span>),</span><br><span class="line">          <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// webpack的链式操作，允许对内部的 webpack 配置进行更细粒度的修改</span></span><br><span class="line">  <span class="comment">// 参考： https://cli.vuejs.org/zh/guide/webpack.html#%E9%93%BE%E5%BC%8F%E6%93%8D%E4%BD%9C-%E9%AB%98%E7%BA%A7</span></span><br><span class="line">  chainWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">      <span class="comment">// 本地开发配置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 生产开发配置</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// css的相关配置</span></span><br><span class="line">  css: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//所有 webpack-dev-server 的选项都支持</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    https: <span class="literal">false</span>,</span><br><span class="line">    hotOnly: <span class="literal">false</span>,</span><br><span class="line">    proxy: <span class="literal">null</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 第三方插件配置</span></span><br><span class="line">  pluginOptions: &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-4-vue-cli搭建项目"><a href="#1-4-vue-cli搭建项目" class="headerlink" title="1.4 vue-cli搭建项目"></a>1.4 vue-cli搭建项目</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create project_name</span><br></pre></td></tr></table></figure><h3 id="1-5-Eslint格式化-vue文件"><a href="#1-5-Eslint格式化-vue文件" class="headerlink" title="1.5 Eslint格式化.vue文件"></a>1.5 Eslint格式化.vue文件</h3><p>ESLint是一个用来识别 ECMAScript 并且按照规则给出报告的代码检测工具，使用它可以避免低级错误和统一代码的风格。</p><p>你可能有疑问，在.vue 文件中你怎么检验你的代码，因为它不是 JavaScript。我们假设你使用 <a href="https://eslint.org/" target="_blank" rel="noopener">ESLint</a> (如果你没有使用话，你应该去使用！)。</p><p>你还需要官方的 <a href="https://github.com/vuejs/eslint-plugin-vue" target="_blank" rel="noopener">eslint-plugin-vue</a>，它支持同时检查你.vue文件中的模板和脚本。</p><p><a href="https://vue-loader-v14.vuejs.org/zh-cn/workflow/linting.html" target="_blank" rel="noopener">https://vue-loader-v14.vuejs.org/zh-cn/workflow/linting.html</a></p><h4 id="a-eslint配置-rules规则"><a href="#a-eslint配置-rules规则" class="headerlink" title="a) eslint配置(rules规则)"></a>a) eslint配置(rules规则)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭必须使用单引号</span></span><br><span class="line"><span class="string">"quotes"</span>: [<span class="number">0</span>, <span class="string">"single"</span>],</span><br><span class="line"><span class="comment">// 允许多余的换行</span></span><br><span class="line"><span class="string">"no-multi-spaces"</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">'no-console'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'error'</span> : <span class="string">'off'</span>,</span><br><span class="line"><span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'error'</span> : <span class="string">'off'</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">'prefer-promise-reject-errors'</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">'space-unary-ops'</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">'no-unused-expressions'</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">'no-useless-return'</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">'standard/no-callback-literal'</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">'import/first'</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">'import/export'</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">'no-mixed-operators'</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">'no-use-before-define'</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许使用分号</span></span><br><span class="line"><span class="string">'semi'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许使用==</span></span><br><span class="line"><span class="string">'eqeqeq'</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缩进使用不做限制</span></span><br><span class="line"><span class="string">'indent'</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许使用tab</span></span><br><span class="line"><span class="string">'no-tabs'</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数圆括号之前没有空格</span></span><br><span class="line"><span class="string">'space-before-function-paren'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不要求块内空格填充格式</span></span><br><span class="line"><span class="string">'padded-blocks'</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不限制变量一起声明</span></span><br><span class="line"><span class="string">'one-var'</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件语句中复制操作符需要用圆括号括起来</span></span><br><span class="line"><span class="string">'no-cond-assign'</span>: [<span class="number">2</span>, <span class="string">'except-parens'</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许使用条件表达式使用常量</span></span><br><span class="line"><span class="string">'no-constant-condition'</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单行可忽略大括号，多行不可忽略</span></span><br><span class="line"><span class="string">'curly'</span>: [<span class="number">2</span>, <span class="string">'multi-line'</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许使用var变量</span></span><br><span class="line"><span class="string">'no-var'</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许出现多个空格</span></span><br><span class="line"><span class="string">'no-multi-spaces'</span>: [<span class="string">'error'</span>, &#123; <span class="attr">ignoreEOLComments</span>: <span class="literal">true</span> &#125;],</span><br><span class="line"><span class="string">'camelcase'</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象字面量的键值空格风格</span></span><br><span class="line"><span class="string">'key-spacing'</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// if语句包含一个return语句， else就多余</span></span><br><span class="line"><span class="string">'no-else-return'</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建议将经常出现的数字提取为变量</span></span><br><span class="line"><span class="string">'no-magic-numbers'</span>: [<span class="number">0</span>, &#123; <span class="attr">ignoreArrayIndexes</span>: <span class="literal">true</span> &#125;],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许重复声明变量</span></span><br><span class="line"><span class="string">'no-redeclare'</span>: [<span class="number">2</span>, &#123; <span class="attr">builtinGlobals</span>: <span class="literal">true</span> &#125;],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立即执行函数风格</span></span><br><span class="line"><span class="string">'wrap-iife'</span>: [<span class="number">2</span>, <span class="string">'inside'</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许圆括号中出现空格</span></span><br><span class="line"><span class="string">'space-in-parens'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保运算符周围有空格</span></span><br><span class="line"><span class="string">'space-infix-ops'</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制点号与属性同一行</span></span><br><span class="line"><span class="string">'dot-location'</span>: [<span class="number">2</span>, <span class="string">'property'</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制单行代码使用空格</span></span><br><span class="line"><span class="string">'block-spacing'</span>: [<span class="number">2</span>, <span class="string">'always'</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 约束for-in使用hasOwnProperty判断</span></span><br><span class="line"><span class="string">'guard-for-in'</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 采用one true brace style大括号风格</span></span><br><span class="line"><span class="string">'brace-style'</span>: [<span class="number">2</span>, <span class="string">'1tbs'</span>, &#123; <span class="string">'allowSingleLine'</span>: <span class="literal">true</span> &#125;],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一逗号周围空格风格</span></span><br><span class="line"><span class="string">'comma-spacing'</span>: [<span class="number">2</span>, &#123; <span class="string">'before'</span>: <span class="literal">false</span>, <span class="string">'after'</span>: <span class="literal">true</span> &#125;],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁止出现多个空行</span></span><br><span class="line"><span class="string">'no-multiple-empty-lines'</span>: [<span class="number">2</span>, &#123; <span class="string">'max'</span>: <span class="number">1</span>, <span class="string">'maxEOF'</span>: <span class="number">2</span> &#125;],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许箭头函数不使用圆括号</span></span><br><span class="line"><span class="string">'arrow-parens'</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 规范generator函数的使用</span></span><br><span class="line"><span class="string">'generator-star-spacing'</span>: [<span class="number">2</span>, &#123; <span class="string">'before'</span>: <span class="literal">false</span>, <span class="string">'after'</span>: <span class="literal">true</span> &#125;],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求在块级</span></span><br><span class="line"><span class="string">'lines-around-comment'</span>: [<span class="number">2</span>, &#123; <span class="string">'beforeBlockComment'</span>: <span class="literal">true</span>, <span class="string">'afterBlockComment'</span>: <span class="literal">false</span>, <span class="string">'beforeLineComment'</span>: <span class="literal">true</span>, <span class="string">'afterLineComment'</span>: <span class="literal">false</span> &#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"off"</span>或者<span class="number">0</span>，不启用这个规则</span><br><span class="line"><span class="string">"warn"</span>或者<span class="number">1</span>，出现问题会有警告</span><br><span class="line"><span class="string">"error"</span>或者<span class="number">2</span>，出现问题会报错</span><br></pre></td></tr></table></figure><p><a href="https://github.com/vuejs/eslint-plugin-vue/blob/master/docs/rules/README.md" target="_blank" rel="noopener">https://github.com/vuejs/eslint-plugin-vue/blob/master/docs/rules/README.md</a></p><blockquote><p>注意：”extends”: “plugin:vue/recommended” 会同时检查js和模板的语法错误</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vscode中通过  npm run lint会自动进行eslint的校验和修正</span><br><span class="line">npm run lint --fix</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>简述Js中的原型与原型链</title>
      <link href="/2019/03/22/%E7%AE%80%E8%BF%B0Js%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2019/03/22/%E7%AE%80%E8%BF%B0Js%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="1-原型"><a href="#1-原型" class="headerlink" title="1.原型"></a>1.原型</h2><p> Javascript是基于对象的编程语言，他其中也含有部分封装、继承的概念，而原型概念便是基于继承的。</p><p> 函数的原型类似于面向对象语言中子类的父类，而函数本身类似于子类。函数继承了函数原型中的属性和方法，即函数本身可以调用它原型中的属性和方法。</p><p> 知识点：若有函数Person，则它的函数原型为Person.prototype，函数原型本身是个对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Person (name) &#123;</span><br><span class="line">  this.name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.type &#x3D; &#39;human&#39;</span><br><span class="line">Person.prototype.sayName &#x3D; function () &#123;</span><br><span class="line">  console.log(this.name + &#39;说话了&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;此时我们用Person构造函数构造了一个p对象</span><br><span class="line">var p &#x3D; new Person(&#39;小王&#39;);</span><br><span class="line">&#x2F;&#x2F;我们打印p.name</span><br><span class="line">console.log(p.name); &#x2F;&#x2F;结果是&#39;小王&#39;，因为Preson函数中已经预置了name属性并且接受了new对象时传入的&#39;小王&#39;，结果勿容置疑</span><br><span class="line">&#x2F;&#x2F;我们再打印p.type 调用p.sayName()  按常理说Preson构造函数中是不存在type属性和sayName方法，若调用应该会报错</span><br><span class="line">console.log(p.type); &#x2F;&#x2F;结果  human</span><br><span class="line">p.sayName(); &#x2F;&#x2F; 结果  小王说话了</span><br><span class="line">&#x2F;&#x2F;结果和我们预想的不同，这是为什么呢?</span><br><span class="line">&#x2F;&#x2F;因为Person继承了它原型Person.prototype中的信息，当调用p.type时，会优先在Person类中找该属性，若找到了则直接使用，若没找到则在他的原型中找并使用。因为我们设置了Person原型的type属性的，则p可以直接使用</span><br></pre></td></tr></table></figure><p>在上面的例子中涉及到了 构造函数、对象和函数原型，接下来给出三者之间的关系图；</p><h2 id="2-构造函数、实例、原型三者之间的关系"><a href="#2-构造函数、实例、原型三者之间的关系" class="headerlink" title="2.构造函数、实例、原型三者之间的关系"></a>2.构造函数、实例、原型三者之间的关系</h2><p><img src="/" alt="三者关系" class="lazyload" data-src="/2019/03/22/%E7%AE%80%E8%BF%B0Js%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/yuanxing1.jpg"></p><p>由图中我们可以很直观的看到三者之间的关系。</p><p>p对象由Person构造函数构造</p><p>p对象通过<strong>proto</strong>属性访问到Person对象原型</p><p>Person对象原型通过constructor访问Person构造函数</p><p>Person函数通过prototype属性访问到Person原型对象</p><p>注意：对象是通过<strong>proto</strong>属性访问对象原型，函数是通过prototype访问对象原型，但两者访问到的对象原型是同一个</p><p>验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(p.__proto__ &#x3D;&#x3D; Person.prototype); &#x2F;&#x2F;结果为 true</span><br></pre></td></tr></table></figure><p>constructor的作用：可以使得对象访问到对应的构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;</span><br><span class="line">&#125;</span><br><span class="line">var p &#x3D; new Person();</span><br><span class="line">console.log(p.constructor);&#x2F;&#x2F; 打印  function Person()</span><br></pre></td></tr></table></figure><p>知道以上的知识之后，我们还要了解，其实Person的原型也有原型，即存在Person.prototype.prototype，并且它是Person.prototype的原型，可以用图来直观了解这其中的关系，这便是一个简单的原型链。</p><h2 id="3、原型链"><a href="#3、原型链" class="headerlink" title="3、原型链"></a>3、原型链</h2><p><img src="/" alt="原型链" class="lazyload" data-src="/2019/03/22/%E7%AE%80%E8%BF%B0Js%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/yuanxing2.jpg"></p><h2 id="4、原型链中的搜索规则"><a href="#4、原型链中的搜索规则" class="headerlink" title="4、原型链中的搜索规则"></a>4、原型链中的搜索规则</h2><p>了解了 <strong>构造函数-实例-原型对象</strong> 三者之间的关系后，接下来我们来解释一下为什么实例对象可以访问原型对象中的成员。</p><p>每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性</p><ul><li>搜索首先从对象实例本身开始</li><li>如果在实例中找到了具有给定名字的属性，则返回该属性的值</li><li>如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性</li><li>如果在原型对象中找到了这个属性，则返回该属性的值</li></ul><p>也就是说，在我们调用 <code>p.sayName()</code> 的时候，会先后执行两次搜索：</p><ul><li>首先，解析器会问：“实例 p 有 sayName 属性吗？”答：“没有。</li><li>”然后，它继续搜索，再问：“ p 的原型有 sayName 属性吗？”答：“有。</li><li>”于是，它就读取那个保存在原型对象中的函数。</li></ul><p>而这正是多个对象实例共享原型所保存的属性和方法的基本原理。</p><p>总结：</p><ul><li>先在自己身上找，找到即返回</li><li>自己身上找不到，则沿着原型链向上查找，找到即返回</li><li>如果一直到原型链的末端还没有找到，则返回 <code>undefined</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue双向数据绑定</title>
      <link href="/2019/03/21/vue%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
      <url>/2019/03/21/vue%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="vue双向绑定的原理"><a href="#vue双向绑定的原理" class="headerlink" title="vue双向绑定的原理"></a>vue双向绑定的原理</h2><h3 id="a-页面–-gt-数据"><a href="#a-页面–-gt-数据" class="headerlink" title="a) 页面–&gt;数据"></a>a) 页面–&gt;数据</h3><p>view更新data只需要添加DOM事件监听即可，比如input标签监听 ‘input’ 事件就可以实现</p><h3 id="b-数据–-gt-页面"><a href="#b-数据–-gt-页面" class="headerlink" title="b) 数据–&gt;页面"></a>b) 数据–&gt;页面</h3><p>是通过数据劫持 + 发布者-订阅者模式的方式来实现的</p><h4 id="1-数据劫持"><a href="#1-数据劫持" class="headerlink" title="(1).数据劫持"></a>(1).数据劫持</h4><p>vue是通过Object.defineProperty()来实现数据劫持的。(vue3.0已换成proxy来实现数据劫持)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">'name'</span>, &#123;</span><br><span class="line">    <span class="keyword">set</span>: function (value) &#123;</span><br><span class="line">        name = value;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'你取了一个书名叫做'</span> + value);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span>: function () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'《'</span> + name + <span class="string">'》'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">book.name = <span class="string">'vue权威指南'</span>;  <span class="comment">// 你取了一个书名叫做vue权威指南</span></span><br><span class="line">book.name = <span class="string">'vue权威指南2'</span>;  <span class="comment">// 你取了一个书名叫做vue权威指南</span></span><br><span class="line"><span class="built_in">console</span>.log(book.name);  <span class="comment">// 《vue权威指南》</span></span><br></pre></td></tr></table></figure><h4 id="2-发布者订阅模式"><a href="#2-发布者订阅模式" class="headerlink" title="(2).发布者订阅模式"></a>(2).发布者订阅模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//订阅器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dept</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.watchers = [];</span><br><span class="line">&#125;</span><br><span class="line">Dept.prototype.addWatcher = <span class="function"><span class="keyword">function</span> (<span class="params">watcher</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.watchers.push(watcher);</span><br><span class="line">&#125;</span><br><span class="line">Dept.prototype.notifyWatcher = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.watchers.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">watcher</span>) </span>&#123;</span><br><span class="line">        watcher.update(value);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//订阅者</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Watcher.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">"接收到新天气"</span>+value+<span class="string">"，准备干啥"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建几个订阅者</span></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Watcher(<span class="string">"小明"</span>);</span><br><span class="line"><span class="keyword">var</span> xiaohong = <span class="keyword">new</span> Watcher(<span class="string">"小红"</span>);</span><br><span class="line"><span class="keyword">var</span> xiaohei = <span class="keyword">new</span> Watcher(<span class="string">"小黑"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个订阅器</span></span><br><span class="line"><span class="keyword">var</span> dept = <span class="keyword">new</span> Dept();</span><br><span class="line">dept.addWatcher(xiaoming);</span><br><span class="line">dept.addWatcher(xiaohong);</span><br><span class="line">dept.addWatcher(xiaohei);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据劫持常用方案：Object.defineProperty(Vue 2.0)    Proxy(Vue 3.0)</span></span><br><span class="line"><span class="comment">//数据劫持的主要作用：劫持数据的变化</span></span><br><span class="line"><span class="keyword">var</span> weatherStation = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(weatherStation, <span class="string">"weather"</span>, &#123;</span><br><span class="line">    <span class="comment">//当在外部给book的name属性赋值的时候，会执行set</span></span><br><span class="line">    <span class="keyword">set</span>: function (value) &#123;</span><br><span class="line">        name = value;</span><br><span class="line">        <span class="comment">//一旦天气变化，订阅器通知所有的观察者去更新</span></span><br><span class="line">        dept.notifyWatcher(value);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//当在外部获取book的name属性的时候，会执行get</span></span><br><span class="line">    <span class="keyword">get</span>: function () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"当前天气是"</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">weatherStation.weather = <span class="string">"晴天"</span>;</span><br><span class="line">weatherStation.weather = <span class="string">"冰雹"</span>;</span><br></pre></td></tr></table></figure><h4 id="3-数据绑定的实现流程"><a href="#3-数据绑定的实现流程" class="headerlink" title="(3).数据绑定的实现流程"></a>(3).数据绑定的实现流程</h4><p>首先要对数据进行劫持监听，所以我们需要设置一个监听器Observer，用来监听所有属性。如果属性发上变化了，就需要告诉订阅者Watcher看是否需要更新。</p><p>因为订阅者是有很多个，所以我们需要有一个消息订阅器Dep来专门收集这些订阅者，然后在监听器Observer和订阅者Watcher之间进行统一管理的。</p><p>接着，我们还需要有一个指令解析器Compile，对每个节点元素进行扫描和解析，将相关指令对应初始化成一个订阅者Watcher，并替换模板数据或者绑定相应的函数，此时当订阅者Watcher接收到相应属性的变化，就会执行对应的更新函数，从而更新视图。</p><p>因此接下去我们执行以下3个步骤，实现数据的双向绑定：</p><blockquote><p>1.监听器Observer，用来劫持并监听所有属性，如果有变动的，就通知所有订阅者。</p><p>2.订阅者Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。</p><p>3.解析器Compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅者</p></blockquote><p><img src="/" alt="1547815009579" class="lazyload" data-src="/2019/03/21/vue%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/1547815009579.png"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>css和js是如何堵塞dom渲染的</title>
      <link href="/2019/01/20/css%E5%92%8Cjs%E6%98%AF%E5%A6%82%E4%BD%95%E5%A0%B5%E5%A1%9Edom%E6%B8%B2%E6%9F%93%E7%9A%84/"/>
      <url>/2019/01/20/css%E5%92%8Cjs%E6%98%AF%E5%A6%82%E4%BD%95%E5%A0%B5%E5%A1%9Edom%E6%B8%B2%E6%9F%93%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p>浏览器是解析<code>DOM</code>生成<code>DOM Tree</code>，结合<code>CSS</code>生成的<code>CSS Tree</code>，最终组成<code>render tree</code>，再渲染页面。</p><p>1.CSS不会堵塞DOM解析(DOM Tree的生成)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/sleep3000-common.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">"./js/logDiv.js"</span>"&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                                                            </span><br><span class="line">#1.sleep3000-common.css 会延迟3秒钟返回，样式就是设置div块为浅蓝色</span><br><span class="line">   div&#123;backgroundColor:lightBlue&#125;  </span><br><span class="line">#2.logDiv.js 代码如下，script标签加defer的含义是该脚本将在文档完成解析后，触发           DOMContentLoaded 事件前执行</span><br><span class="line">   const div = document.querySelector('div');</span><br><span class="line">   console.log(div);</span><br><span class="line"> #3.执行结果</span><br><span class="line"> 先打印出div这个DOM节点，过3s左右之后才渲染出一个浅蓝色的div。</span><br><span class="line"> 这就证明了CSS 是不会阻塞 DOM 的解析的，尽管CSS下载需要3s，但这个过程中，浏览器不会傻等着CSS下载完，而是会解析DOM的。</span><br></pre></td></tr></table></figure><p>2.CSS会堵塞页面的渲染</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">        &lt;style&gt;</span></span><br><span class="line"><span class="regexp">    div &#123;</span></span><br><span class="line"><span class="regexp">    width: 100px;</span></span><br><span class="line"><span class="regexp">    height: 100px;</span></span><br><span class="line"><span class="regexp">    background: lightgreen;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"/css/sleep3000-common.css"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">    &lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"> &lt;/</span>html&gt;</span><br><span class="line"></span><br><span class="line">#1.sleep3000-common.css 会延迟3ms返回，样式就是设置div块为浅蓝色</span><br><span class="line">#2.最终结果是浏览器会转圈圈三秒，之后呈现出一个浅蓝色的div，所以结果是CSS会堵塞页面的渲染。</span><br></pre></td></tr></table></figure><p>3.JS会堵塞DOM解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="/</span>js/blok.js<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string"> &lt;/html&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#1.block.js代码如下</span></span><br><span class="line"><span class="string">const arr = [];</span></span><br><span class="line"><span class="string">for (let i = 0; i &lt; 10000000; i++) &#123;</span></span><br><span class="line"><span class="string">  arr.push(i);</span></span><br><span class="line"><span class="string">  arr.splice(i % 3, i % 7, i % 5);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">const div = document.querySelector('div');</span></span><br><span class="line"><span class="string">console.log(div)</span></span><br><span class="line"><span class="string">#2.最终结果浏览器转圈圈一会，这过程中不会有任何东西出现，之后打印出null。说明JS堵塞了DOM解析。</span></span><br><span class="line"><span class="string">#3.如果JS文件体积太大，同时你确定没必要阻塞DOM解析的话，不妨按需要加上defer或者async属性，此时脚本下载的过程中是不会阻塞DOM解析的。</span></span><br></pre></td></tr></table></figure><p>4.浏览器遇到 <script>且没有<code>defer</code>或<code>async</code>属性的标签时，会触发页面渲染。如果<script>标签前面有CSS资源，会等到CSS资源加载完毕之后再执行<script>脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;link rel="stylesheet" href="./</span>css/sleep3000-common.css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>/js/logDiv.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;style&gt;</span></span><br><span class="line"><span class="string">        div &#123;</span></span><br><span class="line"><span class="string">            background: lightgrey;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &lt;/style&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>/js/sleep5000-logDiv.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;link rel="</span>stylesheet<span class="string">" href="</span>/css/sleep3000-common.css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#答案是等待3秒浅蓝色打印div，等待5秒浅灰色打印div，最后浅蓝色。由此可见，每次碰到&lt;script&gt;标签时，浏览器都会渲染一次页面。这是基于同样的理由，浏览器不知道脚本的内容，因而碰到脚本时，只好先渲染页面，确保脚本能获取到最新的DOM元素信息，尽管脚本可能不需要这些信息。</span></span><br></pre></td></tr></table></figure><p>5.优化方案：</p><p><code>&lt;script&gt;</code>最好放底部，<code>&lt;link&gt;</code>最好放头部，如果头部同时有<code>&lt;script&gt;</code>与<code>&lt;link&gt;</code>的情况下，最好将<code>&lt;script&gt;</code>放在<code>&lt;link&gt;</code>上面</p><p>6.附：defer 与 async</p><p>如果我们不想<script>堵塞页面的解析，我们可以给<script>标签添加defer或者async属性。defer和async的区别主要如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.执行时机不同：</span><br><span class="line">defer的脚本将在DOM解析完成后、触发 DOMContentLoaded 事件前执行</span><br><span class="line">async的脚本一旦加载完毕，就会执行(不论是在DOM解析阶段还是DOMContentLoaded之前之后，但是一定是在window.load之前执行)</span><br><span class="line">2.执行顺序不同：</span><br><span class="line">defer能保证多个脚本按照书写顺序执行</span><br><span class="line">async不能保证多个脚本的执行顺序</span><br></pre></td></tr></table></figure></script></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
